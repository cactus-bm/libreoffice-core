<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="DialogModul" script:language="StarBasic">Option Explicit

Public Const bDebugWizard=True

Public Const SBFIRSTAPPLCHECKED = 0
Public Const SBSECONDAPPLCHECKED = 1
Public Const SBTHIRDAPPLCHECKED = 2
Public Const SBFOURTHAPPLCHECKED = 3
Public WizardMode as String
Public Const SBMICROSOFTMODE = &quot;MS&quot;
Public Const SBXMLMODE = &quot;XML&quot;
&apos; The absolute maximal Number of possible Applications
Public Const Twip = 425
Public Const SBMAXAPPLCOUNT = 4
Public MaxApplCount as Integer
Public CurOffice As Integer
Public SOBitmapPath As String
Public SOWorkPath As String
Public SOTemplatePath as String
Public bCancelTask As Boolean
Public bDoKeepApplValues as Boolean
Public iApplSection as Integer
Public oUcb as Object
Public PathSeparator as String

Public ApplCount as Integer
Public sKeyName(SBMAXAPPLCOUNT-1) as String
Public sValueName(SBMAXAPPLCOUNT-1) as String
Public sCRLF as String
Public MSFilterName(5,2) as String
Public XMLFilterName(7,2)

&apos; e.g.:
&apos; XMLFilterName(x,0) = &quot;sdw&quot; 						&apos; in documents we take the extensions; in SO-templates the appropriate Filtername
&apos; XMLFilterName(x,1) = &quot;swriter: StarWriter 5.0&quot; 	&apos; the filtername of the target-format
&apos; XMLFilterName(x,2) = &quot;sxw&quot; 						&apos; the target extension

Public ChkApplication(SBMAXAPPLCOUNT-1) as Object
Public Applications(SBMAXAPPLCOUNT-1,9)

Public Const SBAPPLCONVERT = 0
Public Const SBDOCCONVERT = 1
Public Const SBDOCRECURSIVE = 2
Public Const SBDOCSOURCE = 3
Public Const SBDOCTARGET = 4
Public Const SBTEMPLCONVERT = 5
Public Const SBTEMPLRECURSIVE = 6
Public Const SBTEMPLSOURCE = 7
Public Const SBTEMPLTARGET = 8
Public Const SBAPPLKEY = 9

&apos; Application-relating Data are stored in this Array
&apos; according to the following structure:
&apos; Applications(X,0) = True/False 		(Application is to be converted)
&apos; Applications(X,1) = True/False 		(Documents are to be converted)
&apos; Applications(X,2) = True/False		(Including Subdirectories)
&apos; Applications(X,3) = &quot;File:///...&quot;		(SourceUrl of the documents)
&apos; Applications(X,4) = &quot;File///:...&quot;		(TargetUrl of the documents)
&apos; Applications(X,5) = True/False		(Templates are to be converted)
&apos; Applications(X,6) = True/False 		(Including Subdirectories)
&apos; Applications(X,7) = &quot;File:///...&quot;		(SourceUrl of the templates)
&apos; Applications(X,8) = &quot;File:///...&quot; 	(TargetUrl of the templates)
&apos; Applications(X,9) = 0					(Key to the original Index of the Applications)


Sub FillStep_Welcome()
Dim i as Integer
&apos;	bDoKeepApplValues = False
	With ImportDialog
		.cbHelp.Label = sHelpButton
		.cbCancel.Label = sCancelButton
		.cbBack.Label = sBackButton
		.cbGoOn.Label = sNextButton
		.WelcomeTextLabel.Label = sWelcomeTextLabel1
		.WelcomeTextLabel2.Label = sWelcomeTextLabel2
		.WelcomeTextLabel3.Label = sWelcomeTextLabel3

		.OptMSDocuments.Label = sContainerName(0)
		.ChkFirstMSApplication.Label = sMsDocumentCheckbox(0)
		.ChkSecondMSApplication.Label = sMsDocumentCheckbox(1)
		.ChkThirdMSApplication.Label = sMsDocumentCheckbox(2)

		.OptSODocuments.Label = sContainerName(1)
		.ChkFirstSOApplication.Label = sSODocumentCheckbox(0)
		.ChkSecondSOApplication.Label = sSODocumentCheckbox(1)
		.ChkThirdSOApplication.Label = sSODocumentCheckbox(2)
		.ChkFourthSOApplication.Label = sSODocumentCheckbox(3)
		.cbBack.Enabled = False
		.Step = 1
	End With
	ToggleNextButton()
End Sub


Sub FillStep_InputPaths(OfficeIndex as Integer, bStartup as Boolean)
Dim Index as Integer
	If bStartup And Not bDoKeepApplValues Then
	    If ImportDialog.OptMSDocuments.State = 1 Then
			SetupMSConfiguration()
		Else
			SetupXMLConfiguration()
		End If
		&apos; TemplateCheckBox-Captions
		GetApplResourceArray(1009 + iApplSection, ApplCount, sTemplateCheckBox())
		&apos; DocumentCheckbox- Captions
		GetApplResourceArray(1009 + iApplSection + ApplCount, ApplCount, sDocumentCheckBox())
		AssignCheckboxObjects()
		FillUpApplicationList()
	End If
	CurOffice = OfficeIndex
	Index = Applications(CurOffice,SBAPPLKEY)
	InitializePathsforCurrentApplication(Index)
	With ImportDialog
		.TemplateCheckbox.Label = sTemplateCheckbox(Index)
    	.DocumentPathCheckbox.State = Abs(Applications(CurOffice,SBDOCCONVERT))
		SetEnabledDocument_InputPath()    	
    	.DocumentSearchSubDir.State = Abs(Applications(CurOffice,SBDOCRECURSIVE))
		.DocumentImportPath.Text = ConvertFromUrl(Applications(CurOffice,SBDOCSOURCE))
		.DocumentExportPath.Text = ConvertFromUrl(Applications(CurOffice,SBDOCTARGET))
		.hlnDocuments.Label = sProgressMoreDocs

		If WizardMode = SBXMLMODE AND Index = 3 Then
			&apos; Note: SO-Helper Applications are partly treated like templates although they only have documents
			.hlnTemplates.Label = sProgressMoreDocs
			.TemplateCheckbox.Label = sSOHelperDocuments(0)
			.DocumentPathCheckbox.Label = sSOHelperDocuments(1)
		Else
			.TemplateCheckbox.Label = sTemplateCheckbox(Index)
			.DocumentPathCheckbox.Label = sDocumentCheckbox(Index)
			.hlnTemplates.Label = sProgressMoreTemplates
		End If
		.TemplateCheckbox.State = Abs(Applications(CurOffice,SBTEMPLCONVERT))
		SetEnabledTemplate_InputPath()
		.TemplateSearchSubDir.State = Abs(Applications(CurOffice,SBTEMPLRECURSIVE))
		.TemplateImportPath.Text = ConvertFromUrl(Applications(CurOffice,SBTEMPLSOURCE))
		.TemplateExportPath.Text = ConvertFromUrl(Applications(CurOffice,SBTEMPLTARGET))
		.cbGoOn.Label = sNextButton
		.cbBack.Enabled = True
		ImportDialog.Step = 2
	End With
	ToggleNextButton()
End Sub


Sub FillUpApplicationList()
Dim i as Integer
Dim a as Integer
Dim BoolValue as Boolean
	If Not bDoKeepApplValues Then
		a = 0
		For i = 0 To ApplCount - 1
			BoolValue = ChkApplication(i).State = 1
			Applications(a,SBAPPLCONVERT) = BoolValue
			Applications(a,SBDOCCONVERT) = BoolValue
			Applications(a,SBDOCRECURSIVE) = BoolValue
			Applications(a,SBDOCSOURCE) = &quot;&quot;			&apos; GetDefaultPath(i)
			Applications(a,SBDOCTARGET) = &quot;&quot;			&apos; SOWorkPath
			Applications(a,SBTEMPLCONVERT) = BoolValue
			Applications(a,SBTEMPLRECURSIVE) = BoolValue
			Applications(a,SBTEMPLSOURCE) = &quot;&quot; 			&apos; GetTemplateDefaultPath(i)
			Applications(a,SBTEMPLTARGET) = &quot;&quot; 			&apos; GetTargetTemplatePath(i)
			Applications(a,SBAPPLKEY) = i
			If ChkApplication(i).State = 1 Then 
				a = a + 1
			End If
		Next i
		ApplCount = a
	End If
End Sub


Sub InitializePathsforCurrentApplication(i as Integer)
	AssignPathToCurrentApplication(SBDOCSOURCE, GetDefaultPath(i))
	AssignPathToCurrentApplication(SBDOCTARGET, SOWorkPath)
	AssignPathToCurrentApplication(SBTEMPLSOURCE, GetTemplateDefaultPath(i))
	AssignPathToCurrentApplication(SBTEMPLTARGET, GetTargetTemplatePath(i))
End Sub


Sub AssignPathToCurrentApplication(Index as Integer, NewPath as String)
	If Applications(CurOffice,Index) = &quot;&quot; Then
		If CurOffice &gt; 0 Then
			Applications(CurOffice,Index) = Applications(CurOffice-1,Index)
		Else
			Applications(CurOffice,Index) = NewPath
		End If
	End If
End Sub


Sub SaveStep_InputPath()
	Applications(CurOffice,SBDOCCONVERT)  = ImportDialog.DocumentPathCheckbox.State = 1
	Applications(CurOffice,SBDOCRECURSIVE)  = ImportDialog.DocumentSearchSubDir.State = 1
	Applications(CurOffice,SBDOCSOURCE)  = ConvertToURL(ImportDialog.DocumentImportPath.Text)
	Applications(CurOffice,SBDOCTARGET) = ConvertToUrl(ImportDialog.DocumentExportPath.Text)
    Applications(CurOffice,SBTEMPLCONVERT) = ImportDialog.TemplateCheckbox.State = 1
    Applications(CurOffice,SBTEMPLRECURSIVE) = ImportDialog.TemplateSearchSubDir.State = 1
	Applications(CurOffice,SBTEMPLSOURCE) = ConvertToURL(ImportDialog.TemplateImportPath.Text)
	Applications(CurOffice,SBTEMPLTARGET) = ConvertToURL(ImportDialog.TemplateExportPath.Text)
End Sub


Sub SetEnabledTemplate_InputPath()
Dim bDoEnable as Boolean
	With ImportDialog
    	bDoEnable = .TemplateCheckbox.State = 1
		.TemplateImportLabel.Enabled = bDoEnable
		.TemplateExportLabel.Enabled = bDoEnable
		.TemplateImportPath.Enabled = bDoEnable
		.TemplateExportPath.Enabled = bDoEnable
		.TemplateSearchSubDir.Enabled = bDoEnable
		.TemplateImportPath.Enabled = bDoEnable
		If Not bDoEnable Then
			.cbGoOn.Enabled = .DocumentPathCheckbox.State = 1
		Else
			.cbGoOn.Enabled = True
		End If
	End With
End Sub


Sub SetEnabledDocument_InputPath()
Dim bDoEnable as Boolean
	With ImportDialog
    	bDoEnable = .DocumentPathCheckbox.State = 1
		.DocumentImportLabel.Enabled = bDoEnable
		.DocumentExportLabel.Enabled = bDoEnable
		.DocumentSearchSubDir.Enabled = bDoEnable
		.DocumentImportPath.Enabled = bDoEnable
		.DocumentExportPath.Enabled = bDoEnable
		If Not bDoEnable Then
			.cbGoOn.Enabled = .TemplateCheckbox.State = 1
		Else
			.cbGoOn.Enabled = True
		End If
	End With
End Sub


Function MakeSummaryString()
Dim sTmpText As String
Dim i as Integer
Dim Index as Integer
Dim sAddText as String
	For i = 0 To ApplCount -1
		Index = Applications(i,SBAPPLKEY)
		If 	Applications(i,SBTEMPLCONVERT) Then
			&apos; Templates are to be converted
			sAddText = &quot;&quot;
			If WizardMode = SBMICROSOFTMODE Then
				sAddText = sSumMSTemplates(Index) &amp; sCRLF
			Else
				sAddText = sSumSOTemplates(Index) &amp; sCRLF			
			End If
			sTmpText = sTmpText &amp; sAddText &amp;  ConvertFromUrl(Applications(i,SBTEMPLSOURCE)) &amp; sCRLF
			If Applications(i,SBTEMPLRECURSIVE) Then
				&apos; Including Subdirectories
				sTmpText = sTmpText &amp; sSumInclusiveSubDir &amp; sCRLF
			End If
			sTmpText = sTmpText &amp; sSumSaveDocuments &amp; sCRLF
			sTmpText = sTmpText &amp; Applications(i,SBTEMPLTARGET) &amp; sCRLF
			sTmpText = sTmpText &amp; sCRLF
		End If

		If Applications(i,SBDOCCONVERT) Then
			&apos; Documents are to be converted
			If WizardMode = SBMICROSOFTMODE Then
				sAddText = sSumMSDocuments(Index) &amp; sCRLF
			Else
				sAddText = sSumSODocuments(Index) &amp; sCRLF			
			End If
			sTmpText = sTmpText &amp; sAddText &amp; ConvertFromUrl(Applications(i,SBDOCSOURCE)) &amp; sCRLF

			If Applications(i,SBDOCRECURSIVE) Then
				&apos; Including Subdirectories
				sTmpText = sTmpText &amp; sSumInclusiveSubDir &amp; sCRLF
			End If

			sTmpText = sTmpText &amp; sSumSaveDocuments &amp; sCRLF
			sTmpText = sTmpText &amp; Applications(i,SBDOCTARGET) &amp; sCRLF
			sTmpText = sTmpText &amp; sCRLF
		End If
	Next i
	MakeSummaryString = sTmpText
End Function


Sub FillStep_Summary()
&apos; Todo: Angabe ÃƒÆ’Ã‚Â¼ber die Vorlagengruppen,bzw. Template-Exportpfad
	With ImportDialog
		.SummaryTextbox.Text = MakeSummaryString()
		.cbGoOn.Enabled = .SummaryTextbox.Text &lt;&gt; &quot;&quot;
		.cbGoOn.Label = sBeginButton
		.SummaryHeaderLabel.Label = sSummaryHeader
		.Step = 3
	End With
End Sub


Sub FillStep_Progress()
	With ImportDialog
		.cbBack.Enabled = False
		.cbGoOn.Enabled = False
	    .hlnProgress.Label = sProgressPage_1
	    .LabelRetrieval.FontWeight = com.sun.star.awt.FontWeight.BOLD
   	 	.LabelRetrieval.Label = sProgressPage_2
   	 	.LabelCurProgress.Label = sProgressPage_3
   	 	.LabelCurDocumentRetrieval.Label = &quot;&quot;
   	 	.LabelCurTemplateRetrieval.Label = &quot;&quot;
   		.LabelCurDocument.Label = &quot;&quot;
		.Step = 4
	End With
End Sub


Sub DocumentDirSearchDialog()
	CallDirSearchDialog(ImportDialog.DocumentImportPath)
End Sub


Sub StarDocumentDirSearchDialog()
	CallDirSearchDialog(ImportDialog.DocumentExportPath)
End Sub


Sub CallDirSearchDialog(oTargetControl as Object)
Dim sDirName as String
	sDirName = Application.FileDialog(&quot;P&quot;, sPathDialogMessage, oTargetControl.Text)
	If Len(sDirName) &gt; 0 Then
		oTargetControl.Text = sDirName
	End If
End Sub


Sub	SetupMSConfiguration()
	iApplSection = 0
	Wizardmode = SBMICROSOFTMODE
	MaxApplCount = 3
	ApplCount = 3

	sKeyName(0) = &quot;Software\Microsoft\Office\8.0\Word\Options&quot;
	sKeyName(1) = &quot;Software\Microsoft\Office\8.0\Excel\Microsoft Excel&quot;
	sKeyName(2) = &quot;Software\Microsoft\Office\8.0\PowerPoint\Recent Folder List\Default&quot;

	sValueName(0) = &quot;DOC-PATH&quot;
	sValueName(1) = &quot;DefaultPath&quot;
	sValueName(2) = &quot;&quot;

&apos; See definition of Filtername-Array about meaning of fields
	MSFilterName(0,0) = &quot;doc&quot;
	MSFilterName(0,1) = &quot;swriter: StarOffice XML (Writer)&quot;
	MSFilterName(0,2) = &quot;sxw&quot;

	MSFilterName(1,0) = &quot;xls&quot;
	MSFilterName(1,1) = &quot;scalc: StarOffice XML (Calc)&quot;
	MSFilterName(1,2) = &quot;sxc&quot;

	MSFilterName(2,0) = &quot;ppt&quot;
	MSFilterName(2,1) = &quot;simpress: StarOffice XML (Impress)&quot;
	MSFilterName(2,2) = &quot;sxi&quot;

	MSFilterName(3,0) = &quot;dot&quot;
	MSFilterName(3,1) = &quot;swriter: writer_StarOffice_XML_Writer_Template&quot;
	MSFilterName(3,2) = &quot;stw&quot;

	MSFilterName(4,0) = &quot;xlt&quot;
	MSFilterName(4,1) = &quot;scalc: calc_StarOffice_XML_Calc_Template&quot;
	MSFilterName(4,2) = &quot;stc&quot;

	MSFilterName(5,0) = &quot;pot&quot;
	MSFilterName(5,1) = &quot;simpress: impress_StarOffice_XML_Impress_Template&quot;
	MSFilterName(5,2) = &quot;sti&quot;
End Sub



Sub SetupXMLConfiguration()
	iApplSection = 1000
	Wizardmode = SBXMLMODE
	ApplCount = 4
	MaxApplCount = 4

	XMLFilterName(0,0) = &quot;sdw&quot;
	XMLFilterName(0,1) = &quot;swriter: StarOffice XML (Writer)&quot;
	XMLFilterName(0,2) = &quot;sxw&quot;

	XMLFilterName(1,0) = &quot;sdc&quot;
	XMLFilterName(1,1) = &quot;scalc: StarOffice XML (Calc)&quot;
	XMLFilterName(1,2) = &quot;sxc&quot;
&apos; Todo: Gepacktes &apos;sdp&apos; Format berücksichtigen
	XMLFilterName(2,0) = &quot;sdd|sda&quot;
	XMLFilterName(2,1) = &quot;simpress: StarOffice XML (Impress)|sdraw: StarOffice XML (Draw)&quot;
	XMLFilterName(2,2) = &quot;sxi|sxd&quot;

	XMLFilterName(3,0) = &quot;smf&quot;
	XMLFilterName(3,1) = &quot;smath: StarOffice XML (Math)&quot;
	XMLFilterName(3,2) = &quot;sxm&quot;

	XMLFilterName(4,0) = &quot;application/vnd.stardivision.writer;application/vnd.stardivision.writer/web;application/x-starwriter&quot;
	XMLFilterName(4,1) = &quot;swriter: writer_StarOffice_XML_Writer_Template&quot;
	XMLFilterName(4,2) = &quot;stw&quot;

	XMLFilterName(5,0) = &quot;application/vnd.stardivision.calc;application/x-starcalc&quot;
	XMLFilterName(5,1) = &quot;scalc: calc_StarOffice_XML_Calc_Template&quot;
	XMLFilterName(5,2) = &quot;stc&quot;

	XMLFilterName(6,0) = &quot;application/vnd.stardivision.impress;application/x-starimpress|application/vnd.stardivision.draw;application/x-stardraw&quot;
	XMLFilterName(6,1) = &quot;simpress: impress_StarOffice_XML_Impress_Template|draw_StarOffice_XML_Draw_Template&quot;
	XMLFilterName(6,2) = &quot;sti|std&quot;

	XMLFilterName(7,0) = &quot;sgl&quot;
	XMLFilterName(7,1) = &quot;swriter: writer_globaldocument_StarOffice_XML_Writer_GlobalDocument&quot;
	XMLFilterName(7,2) = &quot;sxg&quot;
End Sub


Function CheckControlPath(oTextBox as Object, ByVal bDoEnable as Boolean)
Dim sPath as String
	If Not bDoEnable Then
		CheckControlPath = False
	Else
		sPath = ConvertToUrl(Trim(oTextBox.Text)
		CheckControlPath = oUcb.Exists(sPath)
	End If
End Function


Sub AssignCheckboxObjects()
	With ImportDialog
    	If .OptSODocuments.State = 1 Then
			Set ChkApplication(0) = .ChkFirstSOApplication
			Set ChkApplication(1) = .ChkSecondSOApplication
			Set ChkApplication(2) = .ChkThirdSOApplication
			Set ChkApplication(3) = .ChkFourthSOApplication
		Else
			Set ChkApplication(0) = .ChkFirstMSApplication
			Set ChkApplication(1) = .ChkSecondMSApplication
			Set ChkApplication(2) = .ChkThirdMSApplication
		End If
	End With
End Sub


Function CheckInputPaths() as Boolean
Dim bChangePage as Boolean
	bChangePage = CheckTextBoxPath(ImportDialog.TemplateImportPath, True, False)
	bChangePage = CheckTextBoxPath(ImportDialog.TemplateExportPath, bChangePage, True)
	bChangePage = CheckTextBoxPath(ImportDialog.DocumentImportPath, bChangePage, False)
	bChangePage = CheckTextBoxPath(ImportDialog.DocumentExportPath, bChangePage, True)
	CheckInputPaths = bChangePage
End Function


Function CheckTextBoxPath(oTextBox as Object, ByVal bCheck as Boolean, bCreateNew as Boolean) as Boolean
Dim iCreate as Integer
Dim sQueryMessage as String
Dim sUrlPath as String
Dim sMessageNoDir as String
Dim sShowPath as String
	If oTextBox.Enabled Then
		If bCheck Then
			sShowPath = oTextBox.Text
			sUrlPath = ConvertToUrl(sShowPath)
			If Not oUcb.Exists(sUrlPath) Then
				If Not bCreateNew Then
					&apos; Sourcedirectories must be existing, Targetdirectories may be created new
					sQueryMessage = ReplaceString(sMsgDirNotThere, sShowPath,&quot;%1&quot;)
					Msgbox(sQueryMessage,16,sTitle)
					CheckTextBoxPath() = False
					Exit Function
				Else
					sQueryMessage = ReplaceString(sMsgDirNotThere, sShowPath,&quot;%1&quot;)
					sQueryMessage = sQueryMessage &amp; Chr(13) &amp; sQueryForNewCreation
					iCreate = Msgbox (sQueryMessage, 36, sTitle)
					If iCreate = 6 Then
						On Local Error Goto NOVALIDPATH
						oUcb.CreateFolder(sUrlPath)
						If Not oUcb.Exists(sUrlPath) Then
							Goto NOVALIDPATH
						End If
					Else
						CheckTextBoxPath() = False
						Exit Function
					End If
				End If
			End If
			CheckTextBoxPath() = True
		Else
			CheckTextBoxPath() = False
		End If
	Else
		CheckTextBoxPath() = True
	End If
	Exit Function
NOVALIDPATH:
	sMessageNoDir = ReplaceString(sNoDirCreation, sShowPath, &quot;%1&quot;)
	Msgbox(sMessageNoDir, 16, sTitle)
	CheckTextBoxPath() = False
End Function


Sub InitializeProgressPage(oDialog as Object)
  &apos;oDialog.LabelRetrieval.Label = &quot;&quot;
  &apos;oDialog.LabelCurProgress.Label = &quot;&quot;
  oDialog.LabelRetrieval.FontWeight = com.sun.star.awt.FontWeight.NORMAL
  oDialog.LabelCurProgress.FontWeight = com.sun.star.awt.FontWeight.BOLD
End Sub


Sub TakoverFolderName(aEvent as Object)
Dim RefControlName as String
Dim oRefControl
	RefControlName = aEvent.Source.Model.Tag
	oRefControl = ImportDialogArea.GetControl(RefControlName)
	GetFolderName(oRefControl.Model)
End Sub
</script:module>