<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="AutoPilotRun" script:language="StarBasic">Option Explicit

Public SourceDir as String
Public TargetDir as String
Public TargetStemDir as String
Public SourceFile as String
Public TargetFile as String
Public Source as String
Public SubstFile as String
Public SubstDir as String
Public NoArgs()
Public FilterList(6) as String
Public GoOn as Boolean
Public DoUnprotect as Integer
Public Password as String
Public DocIndex as Integer
Public oPathSettings as Object
Public oDocInfo as Object
Public oUcb as Object
Public TotDocCount as Integer
Public sTotDocCount as String

Sub StartAutoPilot()
Dim i As Integer
	BasicLibraries.LoadLibrary(&quot;Tools&quot;)
	If InitResources(&quot;Euro Converter&quot;, &quot;eur&quot;) Then
		oDocInfo = CreateUnoService(&quot;com.sun.star.document.DocumentProperties&quot;)

		oUcb = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
		DocDisposed = True
		oLocale = GetStarOfficeLocale()
		InitializeConverter(oLocale, 2)
		ToggleGoOnButton()
		DialogModel.cmdGoOn.DefaultButton = True
		DialogConvert.Execute
	End If
End Sub


Sub ConvertDocuments()
Dim FilesList()
	If Source &lt;&gt; &quot;&quot; And TargetDir &lt;&gt; &quot;&quot; Then
		If DialogModel.optSingleFile.State = 1 Then
			SourceFile = Source
			TotDocCount = 1
		Else
			SourceDir = Source
			TargetStemDir = TargetDir
			FilterList(0) = &quot;application/x-starcalc&quot;
			FilterList(1) = &quot;application/vnd.stardivision.calc&quot;
			FilterList(2) = &quot;application/vnd.sun.xml.calc&quot;

			If DialogModel.chkTextDocuments.State = 1 Then
				ReDim Preserve FilterList(6) as String
				FilterList(3) = &quot;application/x-starwriter&quot;
				FilterList(4) = &quot;application/vnd.stardivision.writer&quot;
				FilterList(5) = &quot;application/vnd.stardivision.writer/web&quot;
				FilterList(6) = &quot;application/vnd.sun.xml.writer&quot;
			End If			
			FilesList() = ReadDirectories(SourceDir, bRecursive, True, False, FilterList())
			TotDocCount = Ubound(FilesList(),1) + 1
		End If
		InitializeProgressPage(DialogModel)
&apos;		ChangeToNextProgressStep()
		sTotDocCount = CStr(TotDocCount)
		For DocIndex = 0 To TotDocCount - 1
			If InitializeDocument(FilesList()) Then
				ConvertDocument()
				DocDisposed = StoreDocument()
			End If
		Next DocIndex
		DialogModel.cmdGoOn.Enabled = True
		If GoOn Then
			Msgbox (sMsgREADY,64, sMsgDLGTITLE)
		End	If
	End If
End Sub


Function InitializeDocument(FilesList()) as Boolean
&apos; The Autopilot is started from step No. 2
Dim sViewPath as String
Dim bIsReadOnly as Boolean
	On Local Error Goto NEXTFILE
	If DialogModel.optWholeDir.State = 1 Then
		SourceFile = FilesList(DocIndex,0)
		TargetFile = ReplaceString(SourceFile,TargetStemDir,SourceDir)
		TargetDir = DirectorynameoutofPath(TargetFile, &quot;/&quot;)
	Else
		SourceFile = Source
		TargetFile = TargetDir &amp; &quot;/&quot; &amp; FileNameoutofPath(SourceFile, &quot;/&quot;)
	End If

	If Not oUcb.Exists(TargetDir) Then
		oUcb.CreateFolder(TargetDir)
	End If
 	oDocument = OpenDocument(SourceFile, NoArgs(), StarDesktop)
	bIsReadOnly = oDocument.IsReadOnly
	If Not bIsReadOnly Then
		RetrieveDocumentObjects()
		sViewPath = CutPathView(SourceFile, 60)
		DialogModel.lblCurDocument.Label = Str(DocIndex+1) &amp; &quot;/&quot; &amp; sTotDocCount &amp; &quot;  (&quot; &amp; sViewPath &amp; &quot;)&quot;
	Else
		Msgbox(sMsgDOCISREADONLY, 16, GetProductName())
	End If
	InitializeDocument() = Not bIsReadOnly
NEXTFILE:
	If Err &lt;&gt; 0 Then
		InitializeDocument() = False
		Resume LETSGO
LETSGO:		
	End If	
End Function


Sub ChangeToNextProgressStep()
	DialogModel.lblCurProgress.FontWeight = com.sun.star.awt.FontWeight.NORMAL
	DialogConvert.GetControl(&quot;lblCurProgress&quot;).Visible = False
	DialogConvert.GetControl(&quot;lblCurProgress&quot;).Visible = True
End Sub


Function StoreDocument()
	If TargetFile &lt;&gt; &quot;&quot; Then
		On Local Error Goto NOSAVING
&apos;	XMLFilterName(1,1) = &quot;scalc: StarOffice XML (Calc)&quot;
&apos;	XMLFilterName(5,0) = &quot;application/vnd.stardivision.calc;application/x-starcalc&quot;
&apos;	XMLFilterName(5,1) = &quot;scalc: calc_StarOffice_XML_Calc_Template&quot;
		
		If TargetFile &lt;&gt; SourceFile Then
			oDocument.StoreToUrl(TargetFile,NoArgs)
		Else
			oDocument.Store
		End If
		oDocument.Dispose()
		StoreDocument() = True
		NOSAVING:
		If Err &lt;&gt; 0 Then
			StoreDocument() = False
			Resume CLERROR
		End If
		CLERROR:
	End If
End Function


Sub SwapExtent()
	DialogModel.chkRecursive.Enabled = DialogModel.optWholeDir.State = 1
	If DialogModel.optWholeDir.State = 1 Then
		DialogModel.lblSource.Label = sSOURCEDIR     &apos;&quot;Quellverzeichnis:&quot;
		If Not IsNull(SubstFile) Then
			SubstFile = DialogModel.txtSource.Text
			DialogModel.txtSource.Text = SubstDir
		End If
	Else
		DialogModel.LblSource.Label = sSOURCEFILE   &apos;&quot;Quelldatei:&quot;
		If Not IsNull(SubstDir) Then
			SubstDir = DialogModel.txtSource.Text
			DialogModel.txtSource.Text = SubstFile
		End If
	End If
	ToggleGoOnButton()
End Sub


Sub HelperDialog()
&apos;Todo: The String &quot;start&quot; can be replaced by a HelpIndex
	StarDesktop.LoadComponentfromUrl(&quot;vnd.sun.star.help://&quot; &amp; sDocType &amp; &quot;/start&quot;, &quot;_OFFICE_HELP&quot;, 64, NoArgs())
End Sub


Sub	InitializeThirdStep()
Dim TextBoxText as String
	Source = AssignFileName(DialogModel.txtSource.Text, DialogModel.lblSource.Label, True)
	TargetDir = AssignFileName(DialogModel.txtTarget.Text, DialogModel.lblTarget.Label, False)
	If Source &lt;&gt; &quot;&quot; And TargetDir &lt;&gt; &quot;&quot; Then
		bRecursive = DialogModel.chkRecursive.State = 1
		bDoUnprotect = DialogModel.chkProtect.State = 1
		DialogModel.lblRetrieval.FontWeight = com.sun.star.awt.FontWeight.BOLD
		DialogModel.lblRetrieval.Label = sPrgsRETRIEVAL
		DialogModel.lblCurProgress.Label = sPrgsCONVERTING
		If DialogModel.optWholeDir.State = 1 Then
			TextBoxText = sSOURCEDIR &amp; &quot; &quot; &amp; Source &amp; chr(13) &apos;&amp; &quot; &quot;
			If DialogModel.chkRecursive.State = 1 Then
				TextBoxText = TextBoxText &amp; DeleteStr(sInclusiveSubDir,&quot;~&quot;) &amp; chr(13)
			End If
		Else
			TextBoxText = sSOURCEFILE &amp; &quot; &quot; &amp; Source &amp; chr(13) 
		End If
		TextBoxText = TextBoxText &amp; sTARGETDIR &amp; &quot; &quot; &amp; TargetDir &amp; chr(13)
		If DialogModel.chkProtect.State = 1 Then
			TextBoxText = TextboxText &amp; sPrgsUNPROTECT
		End If
		DialogModel.txtConfig.Text = TextBoxText
	 	ToggleProgressStep()
	 End If
End Sub


Sub ToggleProgressStep(Optional aEvent as Object)
Dim bMakeVisible as Boolean
Dim LocStep as Integer
	&apos; If the Sub is call by the &apos;cmdBack&apos; Button then set the &apos;bMakeVisible&apos; variable accordingly
	bMakeVisible = IsMissing(aEvent)
	&apos; Todo: Wieso können die nicht unsichtbar gemacht werden?
 	DialogConvert.GetControl(&quot;lblCurrencies&quot;).Visible = Not bMakeVisible
 	DialogConvert.GetControl(&quot;lstCurrencies&quot;).Visible = Not bMakeVisible
	DialogConvert.GetControl(&quot;cmdBack&quot;).Visible = bMakeVisible
 	DialogConvert.GetControl(&quot;cmdGoOn&quot;).Visible = bMakeVisible
	If bMakeVisible Then
		DialogModel.Step =  3
	Else
		DialogModel.Step = 2
	End If
	DialogModel.imgPreview.ImageUrl = BitmapDir &amp; &quot;euro_&quot; &amp; DialogModel.Step &amp; &quot;.bmp&quot;	 	
End Sub


Sub EnableStep2DialogControls(OnValue as Boolean)
	With DialogModel
		.hlnExtent.Enabled = OnValue
		.optWholeDir.Enabled = OnValue
		.optSingleFile.Enabled = OnValue
		.chkProtect.Enabled = OnValue
		.cmdCallSourceDialog.Enabled = OnValue
		.cmdCallTargetDialog.Enabled = OnValue
		.lblSource.Enabled = OnValue
		.lblTarget.Enabled = OnValue
		.txtSource.Enabled = OnValue
		.txtTarget.Enabled = OnValue
		.imgPreview.Enabled = OnValue
		.lstCurrencies.Enabled = OnValue
		.lblCurrencies.Enabled = OnValue
		If OnValue Then
			ToggleGoOnButton()
			.chkRecursive.Enabled = .optWholeDir.State = 1
		Else
			.cmdGoOn.Enabled = False
			.chkRecursive.Enabled = False
		End If
	End With
End Sub


Sub InitializeProgressPage()
	DialogConvert.GetControl(&quot;lblRetrieval&quot;).Visible = False
	DialogConvert.GetControl(&quot;lblCurProgress&quot;).Visible = False
	DialogModel.lblRetrieval.FontWeight = com.sun.star.awt.FontWeight.NORMAL
	DialogModel.lblCurProgress.FontWeight = com.sun.star.awt.FontWeight.BOLD
	DialogConvert.GetControl(&quot;lblRetrieval&quot;).Visible = True
	DialogConvert.GetControl(&quot;lblCurProgress&quot;).Visible = True
	DialogModel.cmdGoOn.Enabled = False
End Sub


Function AssignFileName(sPath as String, ByVal HeaderString, bCheckFileType as Boolean) as String
Dim bIsValid as Boolean
Dim sLocMimeType as String
Dim sNoDirMessage as String
	HeaderString = DeleteStr(HeaderString, &quot;:&quot;)
	sPath = ConvertToUrl(Trim(sPath))
	bIsValid = oUcb.Exists(sPath)
	If bIsValid Then
		If DialogModel.optSingleFile.State = 1 Then
			If bCheckFileType Then
				sLocMimeType = GetRealFileContent(oDocInfo, sPath)
				If DialogModel.chkTextDocuments.State = 1 Then
&apos;Todo: Neue Resource aufsetzen mit Hinweis, dass Writer oder Calc Dokument ausgewählt werden muss
					If (Instr(1, sLocMimeType, &quot;writer&quot;) = 0) And (Instr(1, sLocMimeType, &quot;calc&quot;) = 0) Then
						Msgbox(sMsgFileInvalid, 48, sMsgDLGTITLE)
						bIsValid = False						
					End If				
				Else
					If Instr(1, sLocMimeType, &quot;calc&quot;) = 0 Then
						Msgbox(sMsgFileInvalid, 48, sMsgDLGTITLE)
						bIsValid = False
					End If
				End If
			End If
		Else
			If Not oUcb.IsFolder(sPath) Then
				sNoDirMessage = ReplaceString(sMsgNODIRECTORY,sPath,&quot;&lt;1&gt;&quot;)
				Msgbox(sNoDirMessage,48, sMsgDLGTITLE)
				bIsValid = False
			Else
				sPath = RTrimStr(sPath,&quot;/&quot;)
				sPath = sPath &amp; &quot;/&quot;
			End If
		End if
	Else
		Msgbox(HeaderString &amp; &quot; &apos;&quot; &amp; ConvertFromUrl(sPath) &amp; &quot;&apos; &quot; &amp;  sMsgNOTTHERE,48, sMsgDLGTITLE)
	End If
	If bIsValid Then
		AssignFileName() = sPath
	Else
		AssignFilename() = &quot;&quot;
	End If
End Function


Sub ToggleGoOnButton()
Dim bDoEnable as Boolean	
Dim sLocMimeType as String
Dim sPath as String
	bDoEnable = Ubound(DialogModel.lstCurrencies.SelectedItems()) &gt; -1
	If bDoEnable Then
		&apos; Check if Source is set correctly
		sPath = ConvertToUrl(Trim(DialogModel.txtSource.Text))
		bDoEnable = oUcb.Exists(sPath)
	End If
	If bDoEnable Then
		&apos; Check if Source is set correctly
		sPath = ConvertToUrl(Trim(DialogModel.txtTarget.Text))
		&apos; Check if Target is set correctly
		bDoEnable = oUcb.Exists(DialogModel.txtTarget.Text)
	End If
	DialogModel.cmdGoOn.Enabled = bDoEnable
End Sub


Sub CallFolderPicker()
	GetFolderName(DialogModel.txtTarget)
End Sub


Sub CallFilePicker()
	If DialogModel.optSingleFile.State = 1 Then
		Dim oMasterKey as Object
		Dim oFilters() as Object
		
		oMasterKey = GetRegistryKeyContent(&quot;org.openoffice.Office.TypeDetection/&quot;)
		oFilters() = oMasterKey.Filters

		If DialogModel.chkTextDocuments.State = 1 Then
			Dim FilterNames(21,1) as String

			FilterNames(9,0) = oFilters.GetByName(&quot;writer_StarOffice_XML_Writer&quot;).UIName
			FilterNames(9,1) = &quot;*.sxw&quot;

			FilterNames(10,0) = oFilters.GetByName(&quot;writer_StarOffice_XML_Writer_Template&quot;).UIName
			FilterNames(10,1) = &quot;*.vor&quot;

			FilterNames(11,0) = oFilters.GetByName(&quot;writer_StarWriter_10&quot;).UIName
			FilterNames(11,1) = &quot;*.sdw&quot;

			FilterNames(12,0) = oFilters.GetByName(&quot;writer_StarWriter_30&quot;).UIName
			FilterNames(12,1) = &quot;*.sdw&quot;

			FilterNames(13,0) = oFilters.GetByName(&quot;writer_StarWriter_30_VorlageTemplate&quot;).UIName
			FilterNames(13,1) = &quot;*.vor&quot;

			FilterNames(14,0) = oFilters.GetByName(&quot;writer_StarWriter_40&quot;).UIName
			FilterNames(14,1) = &quot;*.sdw&quot;

			FilterNames(15,0) = oFilters.GetByName(&quot;writer_StarWriter_40_VorlageTemplate&quot;).UIName
			FilterNames(15,1) = &quot;*.vor&quot;

			FilterNames(16,0) = oFilters.GetByName(&quot;writer_StarWriter_50&quot;).UIName
			FilterNames(16,1) = &quot;*.sdw&quot;

			FilterNames(17,0) = oFilters.GetByName(&quot;writer_StarWriter_50_VorlageTemplate&quot;).UIName
			FilterNames(17,1) = &quot;*.vor&quot;

			FilterNames(18,0) = oFilters.GetByName(&quot;writer_web_StarOffice_XML_Writer_Web_Template&quot;).UIName
			FilterNames(18,1) = &quot;*.stw&quot;

			FilterNames(19,0) = oFilters.GetByName(&quot;writer_web_StarWriterWeb_40_VorlageTemplate&quot;).UIName
			FilterNames(19,1) = &quot;*.vor&quot;

			FilterNames(20,0) = oFilters.GetByName(&quot;writer_web_StarWriterWeb_50_VorlageTemplate&quot;).UIName
			FilterNames(20,1) = &quot;*.vor&quot;

			FilterNames(21,0) = oFilters.GetByName(&quot;writer_web_HTML&quot;).UIName
			FilterNames(21,1) = &quot;*.HTML&quot;

		Else
			ReDim FilterNames(8,1) as String
		End If
		FilterNames(0,0) = oFilters.GetByName(&quot;calc_StarOffice_XML_Calc&quot;).UIName	
		Filternames(0,1) = &quot;*.sxc&quot;

		FilterNames(1,0) = oFilters.GetByName(&quot;calc_StarOffice_XML_Calc_Template&quot;).UIName
		Filternames(1,1) = &quot;*.stw&quot;

		FilterNames(2,0) = oFilters.GetByName(&quot;calc_StarCalc_10&quot;).UIName
		Filternames(2,1) = &quot;*.sdc&quot;

		FilterNames(3,0) = oFilters.GetByName(&quot;calc_StarCalc_30&quot;).UIName
		Filternames(3,1) = &quot;*.sdc&quot;

		FilterNames(4,0) = oFilters.GetByName(&quot;calc_StarCalc_30_VorlageTemplate&quot;).UIName
		Filternames(4,1) = &quot;*.vor&quot;

		FilterNames(5,0) = oFilters.GetByName(&quot;calc_StarCalc_40&quot;).UIName
		Filternames(5,1) = &quot;*.sdc&quot;

		FilterNames(6,0) = oFilters.GetByName(&quot;calc_StarCalc_40_VorlageTemplate&quot;).UIName
		Filternames(6,1) = &quot;*.vor&quot;

		FilterNames(7,0) = oFilters.GetByName(&quot;calc_StarCalc_50&quot;).UIName
		Filternames(7,1) = &quot;*.sdc&quot;

		FilterNames(8,0) = oFilters.GetByName(&quot;calc_StarCalc_50_VorlageTemplate&quot;).UIName
		Filternames(8,1) = &quot;*.vor&quot;

		GetFileName(DialogModel.txtSource, Filternames())
	Else
		GetFolderName(DialogModel.txtSource)
	End If
End Sub</script:module>