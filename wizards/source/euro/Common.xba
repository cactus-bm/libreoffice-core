<?xml version="1.0" encoding="UTF-8"?>

<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Common" script:language="StarBasic">REM  *****  BASIC  *****
Public DialogModel as Object
Public DialogConvert as Object


Sub	RetrieveDocumentObjects()
    oSheets = oDocument.Sheets
	oSheet = oDocument.Sheets.GetbyIndex(0)
    oStatusline = oDocument.GetCurrentController.GetFrame.CreateStatusIndicator
    &apos; Retrieve the indices for the cellformatations
    oFormats = oDocument.NumberFormats
	oAddressRanges = oDocument.createInstance(&quot;com.sun.star.sheet.SheetCellRanges&quot;)
End Sub    


Sub CloseDialog
Dim n, m as Integer
	If Not bMacroStopped Then
		&apos; Die Zuordnungstabelle lÃ¶schen
		If Not IsNull(oStyles) Then
			Redim StyleRangeAssignmentList(20,50)as String
		End If

		ReDim RangeList(100) as String
		ReDim SelRangeList(100) as String
		Redim RangeBools(100) as Boolean
		ReDim RemoveList(100) as String
		ClearArray(ListboxItems())
		&apos; Prevent That this Procedure is called again the second time 
		&apos; by the Unload Event of the dialog
		bMacroStopped = True
		DialogConvert.EndExecute
		If Not DocDisposed Then
			ReprotectSheets()	
		End If
		Stop
	End If
End Sub


Function ConvertDocument()
Dim i, a as integer
Dim CurStylename as String
Dim DummyList(100) as String
Dim RangeName as String
Dim oDummySheet as Object
Dim AddRange as Boolean
	GoOn = True
	DocDisposed = True
	CurCellCount = 0
	StatusValue = 0
	AddRange = True
	
	oStatusline.Start(sStsPROGRESS,100) 			&apos;&quot;Konvertierungsfortschritt:&quot;
	StatusValue = 0
	If Not bRangeListDefined Then
		TotCellCount = 0
		CreateRangeEnumeration(True)	
	Else
		IncreaseStatusvalue(SBRelGet/3)
	End If
	&apos; Check protected Areas
	a = 1
	i = 0
	For i = 1 To Val(RangeList(0))
		RangeName = RangeList(i)
		If Rangename &lt;&gt; &quot;&quot; Then
			oDummySheet = RetrieveSheetoutofRangeName(RangeName)

			&apos; Unprotect the sheet if necessary
			AddRange = UnprotectSheet(oDummySheet)
			If AddRange Then
&apos; Todo: Umschreiben mit Redim RangeList(RangeIndex) Preserve
				DummyList(a) = RangeName
				DummyList(0) = Str(a)
				a = a + 1
			Else
				Exit For
			End If
		End If
	Next
	If AddRange Then
		RangeIndex = Val(DummyList(0))
		Dim LocRangeList(RangeIndex-1) as String
		Dim LocRangeBools(RangeIndex) as String
		For i = 0 To RangeIndex
			LocRangeList(i-1 ) = DummyList(i)
			LocRangeBools(i-1) = True
		Next i
		ConvertThehardWay(LocRangeList(), LocRangeBools(), True, True)
		MakeStyleEnumeration(True)
		oDocument.calculateAll()
	End If
	ReprotectSheets()
	oStatusline.End
	bRangeListDefined = False
	ConvertDocument = AddRange
	On Local Error Goto 0 
End Function


Sub SwitchNumberFormat(oObject as Object, oFormats as object, sNewSymbol as String)
Dim nFormatLanguage as Integer
Dim nFormatDecimals as Integer
Dim nFormatLeading as Integer
Dim bFormatLeading as Integer
Dim bFormatNegRed as Integer
Dim bFormatThousands as Integer
Dim i as Integer
Dim aNewStr as String
Dim iNumberFormat as Long
Dim AddToList as Boolean

	&apos; Numberformat mit dem neuen Symbol als Basis fÃ¼r generateFormat
	aSimpleStr = &quot;0 [$&quot;+sNewSymbol+&quot;]&quot;
	nSimpleKey = Numberformat(oFormats, aSimpleStr, oLocale)
	On Local Error Resume Next
	iNumberFormat = oObject.NumberFormat
	If Err &lt;&gt; 0 Then
		Msgbox &quot;Error Reading the Number Format&quot;
		Resume CLERROR
	End If

	On Local Error GoTo NOKEY
	aFormat() = oFormats.getByKey(iNumberFormat)
	On Local Error GoTo 0
	&apos; Typ und WÃ¤hrungssymbol des Numberformats heraussuchen
	&apos; neues WÃ¤hrungsformat mit passenden Einstellungen setzen
	nFormatDecimals = aFormat.Decimals
	nFormatLeading = aFormat.LeadingZeros
	bFormatNegRed = aFormat.NegativeRed
	bFormatThousands = aFormat.ThousandsSeparator
	oLocale = aFormat.Locale
	aNewStr = oFormats.generateFormat( nSimpleKey, oLocale, _
			bFormatThousands, bFormatNegRed, nFormatDecimals, nFormatLeading)
	oObject.NumberFormat = Numberformat(oFormats, aNewStr, oLocale)
	NOKEY:
	If Err &lt;&gt; 0 Then
		Resume CLERROR
	End If
	CLERROR:
End Sub


Function Numberformat( oFormats as Object, aFormatStr as String, oLocale as Variant )
Dim nRetkey 
	nRetKey = oFormats.queryKey( aFormatStr, oLocale, True )
	If nRetKey = -1 Then
		nRetKey = oFormats.addNew( aFormatStr, oLocale )
		If nRetKey = -1 Then nRetKey = 0
	End If
	Numberformat = nRetKey
End Function


Sub RepaintEuroPreview()
Dim Twip as integer
Dim Bitmap As Object
Dim CurStep as Integer
Dim PicturePath as String
	Twip = 425
&apos;	TODO: Einbinden der Twip-Konstanten
	CurStep = DialogModel.Step
	Picturepath = BitmapDir &amp; &quot;euro_&quot; &amp; CurStep &amp; &quot;.bmp&quot;	
&apos;	Msgbox PicturePath
	Set Bitmap = LoadPicture(PicturePath)
	DialogConvert.Preview1.DrawPicture(Bitmap,20,20,6820,760)
End Sub


&apos; Funktion findet den Formattyp einer Vorlage, Zelle oder eines Bereiches heraus und schreibt das Ergebnis
&apos; in die globale Variable nFormatType; Ist ein WÃ¤hrungssymbol gesetzt, wird dieses in den globalen String
&apos; sFormatCurrency geschrieben.
Function CheckFormatType( FormatObject as object)
Dim i as Integer
Dim LocCurrIndex as Integer
Dim nFormatFormatString as String
Dim FormatLangID as Integer
Dim sFormatCurrExt as String
Dim oFormatofObject() as Object

	&apos; Retrieve the Format of the Object
	On Local Error GoTo NOKEY
	oFormatofObject = oFormats.getByKey(FormatObject.NumberFormat)
	On Local Error GoTo 0			
	&apos; Typ und WÃ¤hrungssymbol des Numberformats heraussuchen
  	If NOT INT(oFormatofObject.Type) AND com.sun.star.util.NumberFormat.CURRENCY Then
		CheckFormatType = False
		Exit Function
	End If

	If FieldinArray(CurrSymbolList(),2,oFormatofObject.CurrencySymbol) Then
		&apos; If the Currencysymbol of the object ist the one needed, then check the Currency extension
		sFormatCurrExt = oFormatofObject.CurrencyExtension

		If FieldInList(CurExtension(),1,sFormatCurrExt) Then
			&apos; The Currency - extension also fits
			CheckFormatType = True
		Else
			&apos; The Currency - symbol is Euro-conforming (like &apos;DEM&apos;), so there is no Currency-Extension
			CheckFormatType = oFormatofObject.CurrencySymbol = CurrsymbolList(2)
		End If
	Else
		&apos; The Currency Symbol of the object is not the desired one
		If oFormatofObject.CurrencySymbol = &quot;&quot; Then
			&apos; Format is &quot;automatic&quot;
			CheckFormatType = CheckLocale(oFormatofObject.Locale)
		Else
			CheckFormatType = False
		End If
	End If

	NOKEY:
	If Err &lt;&gt; 0 Then
		CheckFormatType = False
		Resume CLERROR
	End If
	CLERROR:
End Function


Sub StartConversion()
	GoOn = True
&apos;	ToggleWindow(False)
	If DialogModel.Step = 2 Then
		ConvertDocuments()
	Else
		If DialogModel.chkComplete.State = 1Then
			ConvertWholeDocument()
		Else
			ConvertRangesorStylesofDocument()
		End If
	End If
&apos;	ToggleWindow(True)
End Sub


Sub IncreaseStatusValue(AddStatusValue as Integer)
	StatusValue = Int(StatusValue + AddStatusValue)
	oStatusline.SetValue(StatusValue)
End Sub</script:module>