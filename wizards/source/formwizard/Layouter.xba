<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Layouter" script:language="StarBasic">Option Explicit

&apos; Todo: Testplan: ImageControl an erster Stelle im Array der Feldnamen
&apos; Todo: Durchtesten mit allen möglichen Datentypen in allen möglichen Konstellationen
&apos; 		Was passiert, wenn Felder jenseits der Ränder positioniert werden?
&apos; Todo: Die ObjektArrays oDBShapeList() und oTCShaplist könnten 3-Dimensional sein mit dem Model und dem Control 
&apos; in den anderen beiden Dimensionen
Public oProgressbar as Object
Public ProgressValue as Integer
Public oDocument as Object
Public oController as Object
Public oForm as Object
Public oDrawPage as Object
Public nMaxColRightX as Long
Public nMaxTCWidth as Long
Public nMaxRowRightX as Long
Public nMaxRowY as Long
Public MaxIndex as Integer
Public Const cVertDistance = 200
Public Const cHoriDistance = 300

Public nPageWidth as Long
Public nPageHeight as Long
Public nFormWidth as Long
Public nFormHeight as Long
Public nMaxHoriPos as Long
Public nMaxVertPos as Long

Public CONST SBALIGNLEFT = 0
Public CONST SBALIGNRIGHT = 2

Public Const SBNOBORDER = 0
Public Const SB3DBORDER = 1
Public Const SBSIMPLEBORDER = 2

Public CurArrangement as Integer
Public CurBorderType as Integer
Public CurAlignmode as Integer

Public OldArrangement as Integer
Public Const cColumnarLeft = 1
Public Const cColumnarTop = 2
Public Const cTabled = 3
Public Const cLeftJustified = 4
Public Const cTopJustified = 5

Public Const cXOffset = 1000
Public Const cYOffset = 700
&apos; This is the viewed space that we lose because of the symbol bars
Public Const cSymbolMargin = 2000
Public Const MaxFieldIndex% = 200
   
Public Const cControlCollectionCount = 9
Public Const cLabel 		= 1
Public Const cTextBox 		= 2
Public Const cCheckBox	 	= 3
Public Const cDateBox 		= 4
Public Const cTimeBox 		= 5
Public Const cNumericBox 	= 6
Public Const cCurrencyBox 	= 7
Public Const cGridControl	= 8
Public Const cImageControl	= 9

Public Styles(8, 50) as String
Public FieldMetaValues(MaxFieldIndex,2) as String
&apos; Description of this List:
&apos; FieldMetaValues(0-MaxFieldIndex,0) (Datafieldtype)
&apos; FieldMetaValues(0-MaxFieldIndex,1) (Datafieldlength)
&apos; FieldMetaValues(0-MaxFieldIndex,2) (ControlType eg. cLabel, cTextbox usw.)

Public FieldNames(MaxFieldIndex) as string
Public oModelService(cControlCollectionCount) as String
Public oGridModel as Object

&apos; field label postfix (the label ist the data source followed by a postfix)
Public nFieldPostfixes (MaxFieldIndex%) as string


Function InsertControl (oControlObject as object, aPoint as Object, aSize as Object)
Dim oShape as object
	oShape = oDocument.CreateInstance (&quot;com.sun.star.drawing.ControlShape&quot;)
	oShape.Size = aSize
	oShape.Position = aPoint
	oShape.AnchorType = com.sun.star.text.TextContentAnchorType.AT_PARAGRAPH
	oShape.control = oControlObject
	oDrawPage.Add (oShape)
	InsertControl = oShape
End Function


Function ArrangeControls()
Dim oShape as Object
Dim i as Integer
&apos; Todo: Was haben diese Postfixes zu bedeuten?
&apos;	nFieldPostfixes() = nFldLabelPostfixes$()
	oProgressbar = oDocument.GetCurrentController.GetFrame.CreateStatusIndicator
	oProgressbar.Start(&quot;&quot;, MaxIndex)
	If OldArrangement = cTabled Then
		oGridshape.Dispose
	End If
	ToggleLayoutPage(False)
&apos;	oDocument.LockControllers
	Select Case CurArrangement
		Case cTabled
			PositionGridControl(MaxIndex)
		Case Else
			PositionControls(MaxIndex)
	End Select
&apos;	oDocument.UnlockControllers
	ToggleLayoutPage(True)
	oProgressbar.End
	Exit Function

ErrorAndCloseForm:
	ToggleWindow(True)
	MsgBox(Form_gErrMsg$, 16, Form_gWizardName$)
	oDocument.Dispose()
	Stop
	exit Function
End Function


Sub OpenBaseDocument()
Dim NoArgs() as new com.sun.star.beans.PropertyValue
Dim aPageSize As New com.sun.star.awt.Size
Dim aSize As New com.sun.star.awt.Size
Dim oViewSettings as Object
Dim oPageStyle as Object

	oDocument = StarDesktop.LoadComponentFromURL(&quot;private:factory/swriter&quot;, &quot;_blank&quot;, 0, NoArgs())
	oController = oDocument.GetCurrentController
	oViewSettings = oDocument.CurrentController.ViewSettings
&apos;	oDocument.LockControllers
	oViewSettings.ShowTableBoundaries = False
	oViewSettings.ShowTextBoundaries = False
	oViewSettings.ShowOnlineLayout = True
	oViewSettings.ShowHoriRuler = True
&apos;	oCursor = oDocument.Text.CreateTextCursor
&apos;	oCursor.InsertDocumentfromURL(FileStr, NoArgs())
	oDrawPage = oDocument.DrawPage
	oPageStyle = oDocument.StyleFamilies.GetByName(&quot;PageStyles&quot;).GetByName(&quot;Standard&quot;)
	oPageStyle.IsLandscape = True
&apos; Todo: Prozedur schreiben um Seite auf Landscape/Portrait zu setzen
	aPageSize = oPageStyle.Size
	nPageWidth = aPageSize.Width
	nPageHeight = aPageSize.Height
	aSize.Width = nPageHeight
	aSize.Height = nPageWidth
	oPageStyle.Size = aSize
	nPageWidth = nPageHeight
	nPageHeight = oPageStyle.Size.Height
	&apos; Todo: Es könnte der unterste Grenze in Abhängigkeit von der Anzahl der DB-Felder bestimmt werden.
	nFormWidth = nPageWidth - oPageStyle.RightMargin - oPageStyle.LeftMargin - 2 * cXOffset
	nFormHeight = nPageHeight - oPageStyle.TopMargin - oPageStyle.BottomMargin - 2 * cYOffset - cSymbolMargin
End Sub


&apos; Modify the Borders of the Controls
Sub ChangeBorderLayouts(oEvent as Object)
Dim oModel as Object
Dim OldBorderType as Integer
Dim i as Integer
Dim oCurModel as Object
	ToggleLayoutPage(False)
	oDocument.LockControllers
	OldBorderType = CurBorderType
	oModel = oEvent.Source.Model
	CurBorderType = Val(Right(oModel.Name,1))	
&apos; Todo: Die Grafikurl des Controls umsetzen, ebenso wie die Grafikurl des 
&apos; alten Controls
&apos; Todo: Auch unsichtbare Controls müssen eine neue Border bekommen
&apos; Am besten wird hierbei das dynamische Array oDBShapeList() abgegriffen
	If CurArrangement = cTabled Then
		oGridModel.Border = CurBorderType
	Else
		&apos; 
		If OldBorderType &lt;&gt; CurBorderType Then
			For i = 0 To MaxIndex
				oCurModel = oDBShapeList(i).GetControl
				If oCurModel.PropertySetInfo.HasPropertyByName(&quot;Border&quot;)Then
					oCurModel.Border = CurBorderType
				End If
			Next i
		End If
	End If
	oDocument.UnLockControllers
	ToggleLayoutPage(True)
End Sub


Sub ChangeLabelAlignments(oEvent as Object)
Dim i as Integer
Dim oCurModel as Object
Dim OldAlignMode as Integer
Dim oModel as Object
	ToggleLayoutPage(False)
	oDocument.LockControllers()
	OldAlignMode = CurAlignMode
	oModel = oEvent.Source.Model
	CurAlignMode = Val(Right(oModel.Name,1))
	&apos; Todo: Es muss festgestellt werden, welches Imagecontrol vorher selectiert war
	&apos; und die GrafikUrls müssen entsprechend angepasst werden.	
	If OldAlignMode &lt;&gt; CurAlignMode Then
		For i = 0 To MaxIndex
			oCurModel = oTCShapeList(i).GetControl
			oCurModel.Align = CurAlignmode
		Next i
	End If
	oDocument.UnlockControllers()
	ToggleLayoutPage(True)
End Sub


Sub ChangeArrangemode(oEvent as Object)
Dim oModel as Object
	OldArrangement = CurArrangement
	oModel = oEvent.Source.Model
	CurArrangement = Val(Right(oModel.Name,1))	
	If CurArrangement &lt;&gt; OldArrangement Then
		ArrangeControls()
		Select Case CurArrangement
			Case cTabled
				ToggleBorderGroup(False)
				ToggleAlignGroup(False)
			Case Else &apos; cColumnarTop,cLeftJustified, cTopJustified
				ToggleAlignGroup(CurArrangement = cColumnarLeft)
				ControlCaptionstoStandardLayout()
&apos; Todo: geht das nicht eleganter?
				ToggleDesignmode(oDocument)
				ToggleDesignmode(oDocument)
				oDBForm.Load
		End Select
		
	End If
End Sub


Sub	ToggleBorderGroup(bDoEnable as Boolean)
	With oDialogModel
		.hlnBorderLayout.Enabled = bDoEnable
		.cmdBorder0.Enabled = bDoEnable	 	&apos; 0: No border
		.cmdBorder1.Enabled = bDoEnable		&apos; 1: 3D border
		.cmdBorder2.Enabled = bDoEnable		&apos; 2: simple border
	End With
End Sub


Sub	ToggleAlignGroup(ByVal bDoEnable as Boolean)
	With oDialogModel
		If bDoEnable Then
			bDoEnable = CurArrangement &lt;&gt; cTabled
		End If
		.hlnAlign.Enabled = bDoEnable
		.cmdAlign0.Enabled = bDoEnable
		.cmdAlign2.Enabled = bDoEnable			&apos;
	End With
End Sub


Sub ToggleLayoutPage(bDoEnable as Boolean)
	With oDialogModel
		.hlnArrangements.Enabled = bDoEnable
		.cmdArrange1.Enabled = bDoEnable
		.cmdArrange2.Enabled = bDoEnable
		.cmdArrange3.Enabled = bDoEnable
		.cmdArrange4.Enabled = bDoEnable
		.cmdArrange5.Enabled = bDoEnable
		.lstStyles.Enabled = bDoEnable
		.lblStyles.Enabled = bDoEnable
		.hlnBackground.Enabled = bDoEnable
		.optTiled.Enabled = bDoEnable
		.optArea.Enabled = bDoEnable
		.cmdHelp.Enabled = bDoEnable
		.cmdBack.Enabled = bDoEnable
		.cmdGoOn.Enabled = bDoEnable
&apos;		If DlgFormDB.GetControl(&quot;imgTheme&quot;).Visible Then
			.imgTheme.Enabled = bDoEnable
&apos;		End If
	End With
	ToggleAlignGroup(bDoEnable)
	ToggleBorderGroup(bDoEnable)
End Sub


Sub DestroyControlShapes(oDrawPage as Object)
Dim i as Integer
Dim oShape as Object
	For i = oDrawPage.Count-1 To 0 Step -1
		oShape = oDrawPage.GetByIndex(i)
		If oShape.ShapeType = &quot;com.sun.star.drawing.ControlShape&quot; Then
			oShape.Dispose
		End If
	Next i
End Sub
</script:module>