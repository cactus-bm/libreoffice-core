<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="OwnEvents" script:language="StarBasic">Option Explicit

Dim CurOwnMonth as Integer

Sub Main
	Call CalAutopilotTable()
End Sub



Sub CalSaveOwnData()
Dim FileName as String
Dim FileChannel as Integer
Dim i as Integer
	If bCalOwnDataChanged Then
		FileName = GetPathSettings(&quot;UserConfig&quot;, False) &amp; &quot;/&quot; &amp; &quot;DATE.DAT&quot;
		SaveDataToFile(FileName, DlgCalModel.lstOwnData.StringItemList())
	End If
End Sub


Sub CalLoadOwnData()
Dim FileName as String
Dim LocList() as String
	FileName = GetPathSettings(&quot;UserConfig&quot;, False) &amp; &quot;/DATE.DAT&quot;
	If LoadDataFromFile(FileName, LocList()) Then
		DlgCalModel.lstOwnData.StringItemList() = LocList()
	End If
End Sub


Function CalCreateDateFromInput() as Date
Dim newDate as Date
Dim EvDay as Integer
Dim EvYear as Integer
	EvDay = DlgCalModel.txtOwnEventDay.Value
	If DlgCalModel.chkEventOnce.State = 1 Then
		EvYear = DlgCalModel.txtOwnEventYear.Value
		newDate = DateSerial(EvYear, CurOwnMonth, EvDay)
	Else
		newDate = DateSerial(0, CurOwnMonth, EvDay)
	End If
	CalCreateDateFromInput = newDate
End Function



Function CalCreateDateStrOfInput() as String
Dim DateStr as String
Dim EvMonth as Integer
Dim EvDay as Integer
Dim CurMonthStr as String
	EvDay = DlgCalModel.txtOwnEventDay.Value
	If EvDay &lt; 10 Then
		DateStr = &quot;0&quot; &amp; EvDay &amp; &quot;. &quot;
	Else
		DateStr = Cstr(EvDay) &amp; &quot;. &quot;
	End If
	CurMonthStr = DlgCalModel.lstOwnEventMonth.StringItemList(CurOwnMonth-1)
	If Len(CurMonthStr) = 2 Then
		CurMonthStr = CurMonthStr &amp; &quot; &quot;
	End If
	DateStr = DateStr &amp; CurMonthStr
	
	If DlgCalModel.chkEventOnce.State = 1 And DlgCalModel.txtOwnEventYear.Value &lt;&gt; 0 Then
		DateStr = DateStr &amp; &quot;  &quot; + DlgCalModel.txtOwnEventYear.Value
	Else
		DateStr = DateStr + &quot;      &quot;
	End If
	DateStr = DateStr  + &quot;  &quot; + Trim(DlgCalModel.txtEvent.Text)
	CalCreateDateStrOfInput = DateStr
End Function


Function CalGetDateWithoutYear&amp;(ByVal i as Integer)
	CalGetDateWithoutYear&amp; = DateSerial(0, CalGetMonthOfEvent(i), CalGetDayOfEvent(i))
End Function


Sub CalcmdInsertData()
Dim DateStr as String
Dim LastIndex as Integer
Dim bGetYear as Boolean
Dim NewDate as Date
Dim bInserted as Boolean
Dim bDateDoubled as Boolean
Dim EvYear as Integer
Dim i as Integer
Dim CurDate as Date
Dim CurEvYear as Integer
Dim CurEvMonth as Integer
Dim CurEvDay as Integer

	bGetYear = DlgCalModel.chkEventOnce.State = 1
	LastIndex = Ubound(DlgCalModel.lstOwnData.StringItemList())			
	If bGetYear Then
		EvYear = DlgCalModel.txtOwnEventYear.Value
	End If

	newDate = CalCreateDateFromInput()
	DateStr = CalCreateDateStrOfInput()
	If DateStr = &quot;&quot; Then Exit Sub

	If Ubound(DlgCalModel.lstOwnData.StringItemList()) = -1 Then
		DlgCalendar.GetControl(&quot;lstOwnData&quot;).AddItem(DateStr, 0 + 1)
		bInserted = True
	Else
		&apos;	same Years(&quot;no years&quot; are treated like same years) -&gt; delete old entry and insert new one
		i = 0
		Do
			CurEvYear = CalGetYearOfEvent(i)
			CurEvMonth = CalGetMonthOfEvent(i)
			CurEvDay = CalGetDayOfEvent(i)
			If DateSerial(CurEvYear, CurEvMonth, CurEvDay) = NewDate Then
				DlgCalendar.GetControl(&quot;lstOwnData&quot;).RemoveItems(i,1)
				DlgCalendar.GetControl(&quot;lstOwnData&quot;).AddItem(DateStr, i)
				bInserted = True
			End If
			i = i + 1
		Loop Until bInserted Or i &gt; LastIndex
		
		&apos;  There exists a date with a certain year number.
		If Not bInserted And Not bGetYear Then
			i = 0
			Do
				bInserted = CalGetDateWithoutYear(i) = newDate
				i = i + 1
				If bInserted Then
					If CalGetYearOfEvent(i) &lt;&gt; 0 Then
						DlgCalendar.GetControl(&quot;lstOwnData&quot;).AddItem(DateStr, i)
					End If
				End If	
			Loop Until bInserted Or i &gt; LastIndex
		End If
	
		&apos;	the date to be inserted owns a year number. It exists already such a date in the list but without date
		If Not bInserted And bGetYear Then
			i = 0
			Do
				bInserted = CalGetDateWithoutYear(i) = newDate
				i = i + 1
				If bInserted Then
					DlgCalendar.GetControl(&quot;lstOwnData&quot;).AddItem(DateStr, i)
				End If
			Loop Until bInserted Or i &gt; LastIndex
		End If
	
		&apos; The date is not yet existing and will will be sorted in accordingly
		If Not bInserted And Not bDateDoubled Then
			i = 0
			Do 
				CurDate = CalGetDateWithoutYear(i)
				bInserted = newDate &lt; CurDate
				If bInserted Then
					Exit Do
				End If
				i = i + 1
			Loop Until bInserted Or i &gt; LastIndex
			DlgCalendar.GetControl(&quot;lstOwnData&quot;).AddItem(DateStr, i)
		End If
	End If
	
	bCalOwnDataChanged = True
	
	Call CalClearInputMask()
End Sub


Function CalGetYearOfEvent(ByVal ListIndex as Integer) as Integer
Dim YearStr as String
	YearStr = DlgCalModel.lstOwnData.StringItemList(ListIndex)
	CalGetYearOfEvent = Val(Mid(YearStr, 10, 4))
End Function


Function CalGetDayOfEvent(ByVal ListIndex as Integer) as Integer
Dim DayStr as String
	DayStr = DlgCalModel.lstOwnData.StringItemList(ListIndex)
	CalGetDayOfEvent = Val(Left(DayStr,2))
End Function


Function CalGetNameOfEvent(ByVal ListIndex as Integer) as String
Dim NameStr as String
	NameStr = DlgCalModel.lstOwnData.StringItemList(ListIndex)
	NameStr = Trim (Mid(NameStr, 16))
	CalGetNameOfEvent = NameStr
End Function


Function CalGetMonthOfEvent(ByVal ListIndex as Integer) as Integer
Dim MonthStr as String
	MonthStr = DlgCalModel.lstOwnData.StringItemList(ListIndex)
	MonthStr = Mid(MonthStr, 5, 3)
	&apos; In chinese Short Monthnames may be only 2 characters long. 
	&apos; In this case the third character is filled up with an empty space
	MonthStr = RTrim(MonthStr)
	CalGetMonthOfEvent = CalGetIntOfShortMonthName(MonthStr)
End Function


Function GetOwnYear()	
	If DlgCalModel.chkEventOnce.State = 1 Then
		GetOwnYear() = DlgCalModel.txtOwnEventYear.Value
	Else
		GetOwnYear() = Year(Now())
	End If
End Function


Sub CheckInsertedDates()
Dim EvYear as Long
Dim EvDay as Long
Dim sEvMonth as String
Dim bDoEnable as Boolean	
	EvYear = GetOwnYear()
	bDoEnable = (EvYear &lt;&gt; 0) And (CurOwnMonth &lt;&gt; -1)
	If bDoEnable Then
		DlgCalModel.txtOwnEventDay.ValueMax = CalMaxDayInMonth(EvYear, CurOwnMonth)
		bDoEnable = DlgCalModel.txtOwnEventDay.Value &lt;&gt; 0
		If bDoEnable Then
			bDoEnable = Ubound(DlgCalModel.lstOwnEventMonth.SelectedItems()) &gt; -1
			If bDoEnable Then
				bDoEnable = LTrim(DlgCalModel.txtEvent.Text) &lt;&gt; &quot;&quot;
			End If
		End If
	End If
	DlgCalModel.cmdInsert.Enabled = bDoEnable
End Sub


Sub GetOwnMonth()
Dim EvYear as Integer
	EvYear = GetOwnYear()
	CurOwnMonth = DlgCalModel.lstOwnEventMonth.SelectedItems(0) + 1
	DlgCalModel.txtOwnEventDay.ValueMax = CalMaxDayInMonth(EvYear, CurOwnMonth)
	CheckInsertedDates()
End Sub</script:module>