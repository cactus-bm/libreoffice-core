<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="OwnEvents" script:language="StarBasic">Option Explicit

Sub Main
	Call CalAutopilotTable()
End Sub

Sub CalSaveOwnData()
	&apos;	Sichert die Daten, die im lbOwnData Control eingegeben wurden.
	&apos;	Die Datei heißt Date.Dat und wird ins Unterverzeichnis Konfiguration
	&apos;	des Office3 Verzeichnis geschrieben.
Dim FileName$
Dim FileChannel%
	Dim i as Integer
	FileName$ = GetPathSettings(&quot;Config&quot;, False)+ GetPathSeparator() + &quot;DATE.DAT&quot;
	&apos;	Falls die Datei neu geschrieben wird, muß sie vorher gelöscht werden
	If Dir$(FileName$) = &quot;DATE.DAT&quot; Then
		kill(FileName$)
	End If

	FileChannel% = FreeFile()
	Open FileName$ For OUTPUT Access WRITE LOCK WRITE As FileChannel%
	
	Write #FileChannel%, &quot;==========================================================&quot;
	Write #FileChannel%, &quot;Don&apos;t edit this file,&quot;
	Write #FileChannel%, &quot;Don&apos;t edit this file!&quot;
	Write #FileChannel%, &quot;----------------------------------------------------------&quot;
	Write #FileChannel%, &quot;It is not allowed to edit this file! Don&apos;t edit this file!&quot;
	Write #FileChannel%, &quot;==========================================================&quot;
	
	For i = 0 To Ubound(DlgCalModel.lstOwnData.StringItemList())
		Write #FileChannel%, DlgCalModel.lstOwnData.StringItemList(i)
	Next
	
	Close #FileChannel%
End Sub


&apos;	Lädt die Daten der persönlichen Ereignisse und
&apos;	schreibt diese dann in das Control lbOwnData.
Sub CalLoadOwnData()
Dim FileName$, tempStr$
Dim FileChannel%, Count%
Dim i as Integer
	FileName$ = GetPathSettings(&quot;Config&quot;, False)+ GetPathSeparator() + &quot;DATE.DAT&quot;

	If Dir(FileName$) = &quot;DATE.DAT&quot; Then 
		FileChannel% = FreeFile()
		Open FileName$ For INPUT Access READ LOCK READ As FileChannel%
		
		&apos;	Kommentare werden eingelesen
		For Count% = 1 To 6
			Line Input #FileChannel%, tempStr$
		Next
		i = 0
		&apos;	Einfügen nach Reihenfolge sortiert.
		While (not eof(#FileChannel%))
			Input #FileChannel%, tempStr$
			DlgCalModel.lstOwnData.AddItem(tempStr$, i)
			i = i + 1
		Wend		

		Close #FileChannel%
	End If	
End Sub


Function SetFocusToControl(oTextControl as Object)
	If oTextControl.Text = &quot;&quot; Then
		Beep
		oTextControl.DefaultButton = True
		SetFocusToControl = True
	Else
		SetFocusToControl = False	
	End If
End Function


Function CalCreateDateFromInput() as Date
&apos;	Generiert aus den Eingabedaten der Ereignisseite 
&apos;	ein Datum im Dateserial Format, 
Dim newDate as Date
Dim EvMonth as Integer
Dim EvDay as Integer
Dim EvYear as Integer
	EvMonth = DlgCalModel.lstOwnEventMonth.SelectedItems(0)	
	EvDay = Val(DlgCalModel.txtOwnEventDay.Text)	
	If DlgCalModel.chkEventOnce.State = 1 Then
		EvYear = Val(DlgCalModel.txtOwnEventYear.Text)
		newDate = DateSerial(EvYear, EvMonth, EvDay)
	Else
		newDate = DateSerial(0, EvMonth, EvDay)
	End If
	CalCreateDateFromInput = newDate
End Function


Function CalCreateDateStrOfInput() as String
Dim DateStr as String
Dim EvMonth as Integer
Dim EvDay as Integer
	EvDay = Val(Trim(DlgCalModel.txtOwnEventDay.Text))
	If EvDay &lt; 10 Then
		DateStr = &quot;0&quot; &amp; EvDay &amp; &quot;. &quot;
	Else
		DateStr = Cstr(EvDay) &amp; &quot;. &quot;
	End If
	DateStr = DateStr &amp; DlgCalendar.GetControl(&quot;lstOwnEventMonth&quot;).GetSelectedItem()
	
	If DlgCalModel.chkEventOnce.State = 1 And DlgCalModel.txtOwnEventYear.Text &lt;&gt; &quot;&quot; Then
		DateStr = DateStr &amp; &quot;  &quot; + Trim(DlgCalModel.txtOwnEventYear.Text)
	Else
		DateStr = DateStr + &quot;      &quot;
	End If
	DateStr = DateStr  + &quot;  &quot; + Trim(DlgCalModel.txtEvent.Text)
	CalCreateDateStrOfInput = DateStr
End Function


Function CalGetDateWithoutYear&amp;(ByVal i as Integer)
	CalGetDateWithoutYear&amp; = DateSerial(0, CalGetMonthOfEvent(i), CalGetDayOfEvent(i))
End Function


Sub CalcmdInsertData()
Dim DateStr as String
Dim LastIndex as Integer
Dim bGetYear as Boolean
Dim NewDate as Date
Dim bInserted as Boolean
Dim bDateDoubled as Boolean
Dim EvYear as Integer
Dim i as Integer
Dim CurEvYear as Integer
Dim CurEvMonth as Integer
Dim CurEvDay as Integer

	bGetYear = DlgCalModel.chkEventOnce.State = 1
	LastIndex = Ubound(DlgCalModel.lstOwnData.StringItemList())			
	If bGetYear Then
		EvYear = Val(DlgCalModel.txtOwnEventYear.Text)
		If (EvYear &lt;= 1582) OR (EvYear &gt;= 9957)	Then
			SetFocusToControl(txtOwnEventMonth)
			Exit Sub
		End If
	End If

	If DlgCalModel.chkEventOnce.State = 1 Then
		EvYear = Val(DlgCalModel.txtOwnEventYear.Text)
	End If			
	newDate = CalCreateDateFromInput()
	DateStr = CalCreateDateStrOfInput()
	If DateStr = &quot;&quot; Then Exit Sub

	&apos;	Es ist noch garnichts vorhanden
	If Ubound(DlgCalModel.lstOwnData.StringItemList()) = -1 Then
		DlgCalendar.GetControl(&quot;lstOwnData&quot;).AddItem(DateStr, 0 + 1)
		bInserted = True
	Else
		&apos;	gleiche jahre(auch keine Jahre sind gleiche jahre)-&gt;alt löschen neu rein
		i = 0
		Do
			CurEvYear = CalGetYearOfEvent(i)
			CurEvMonth = CalGetMonthOfEvent(i)
			CurEvDay = CalGetDayOfEvent(i)
			If DateSerial(CurEvYear, CurEvMonth, CurEvDay) = NewDate Then
				&apos; Todo: Abchecken wie das ist mit &apos;Ereignis einmalig&apos; oder nicht
				DlgCalModel.GetControl(&quot;lstOwnData&quot;).RemoveItem(DateStr, i)
				DlgCalModel.GetControl(&quot;lstOwnData&quot;).AddItem(DateStr, i)
				bInserted = True
			End If
			i = i + 1
		Loop Until bInserted Or i &gt; LastIndex
		
		&apos;	Es existiert ein Datum mit Jahreszahl. Es wird dasselbe Datum
		&apos;	ohne Angabe der Jahreszahl angegeben.
		If Not bInserted And Not bGetYear Then
			i = 0
			Do
				bInserted = CalGetDateWithoutYear(i) = newDate
				i = i + 1
				If bInserted Then
					If CalGetYearOfEvent(i) &lt;&gt; 0 Then
						DlgCalModel.GetControl(&quot;lstOwnData&quot;).AddItem(DateStr, i)
					End If
				End If	
			Loop Until bInserted Or i &gt; LastIndex
		End If
	
		&apos;	Das einzufügende Datum besitzt eine Jahreszahl, es gibt bereits
		&apos;	das Datum in der Liste, jedoch ohne Datum.
		If Not bInserted And bGetYear Then
			i = 0
			Do
				bInserted = CalGetDateWithoutYear(i) = newDate
				i = i + 1
				If bInserted Then
					DlgCalModel.GetControl(&quot;lstOwnData&quot;).AddItem(DateStr, i)
				End If
			Loop Until bInserted Or i &gt; LastIndex
		End If
	
		&apos;	Das Datum ist noch nicht vorhanden und wir richtig einsortiert
		If Not bInserted And Not bDateDoubled Then
			i = 0
			Do 
				bInserted = newDate &gt; CalGetDateWithoutYear(i)
				i = i + 1
				If bInserted Then
					DlgCalendar.GetControl(&quot;lstOwnData&quot;).AddItem(DateStr, i)
				End If
			Loop Until bInserted Or i &gt; LastIndex
		End If
	End If
	
	&apos;	Flag zum Speichern der neuen Daten.
	If bInserted = True Then
		bCalOwnDataChanged = True
	End If
	
	Call CalClearInputMask()
End Sub


Function CalGetYearOfEvent(ByVal ListIndex as Integer) as Integer
Dim YearStr as String
	YearStr = DlgCalModel.lstOwnData.StringItemList(ListIndex)
	CalGetYearOfEvent% = Val(Mid(YearStr, 10, 4))
End Function


Function CalGetDayOfEvent(ByVal ListIndex as Integer) as Integer
Dim DayStr as String
	DayStr = DlgCalModel.lstOwnData.StringItemList(ListIndex)
	CalGetDayOfEvent = Val(Left(DayStr,2)) &apos;Mid(DayStr, 1, 2))
End Function


Function CalGetNameOfEvent(ByVal ListIndex as Integer) as Integer
Dim NameStr as String
	NameStr = DlgCalModel.lstOwnData.StringItemList(ListIndex)
	NameStr = Trim (Mid(NameStr, 16))
&apos;	If Val(NameStr) = 0 Then
&apos;		NameStr = &quot;&quot;
&apos;	End If
	CalGetNameOfEvent = NameStr
End Function


Function CalGetMonthOfEvent(ByVal ListIndex as Integer) as Integer
Dim MonthStr as String
	MonthStr = DlgCalModel.lstOwnData.StringItemList(ListIndex)
	MonthStr = Mid(MonthStr, 5, 3)
	CalGetMonthOfEvent = CalGetIntOfShortMonthName(MonthStr)
End Function


Sub CheckInsertedDates()
Dim EvYear as Long
Dim EvMonth as Long
Dim EvDay as Long
Dim sEvMonth as String
Dim bDoEnable as Boolean
	bDoEnable = True
	If DlgCalModel.chkEventOnce.State = 1 Then
		EvYear = Val(DlgCalModel.txtOwnEventYear.Text)
			&apos;(EvYear &gt;= 1582) AND (EvYear &lt;= 9957)
		bDoEnable = EvYear &lt;&gt; 0
	Else
		EvYear = Year(Now())
	End If
	If bDoEnable Then
		EvDay = Val(DlgCalModel.txtOwnEventDay.Text)
		bDoEnable = Ubound(DlgCalModel.lstOwnEventMonth.SelectedItems()) &gt; -1
		If bDoEnable Then
			EvMonth = DlgCalModel.lstOwnEventMonth.SelectedItems(0)
			bDoEnable = (EvDay &gt; 1) AND (EvDay &lt; CalMaxDayInMonth(EvYear, EvMonth))
			If bDoEnable Then
				bDoEnable = LTrim(DlgCalModel.txtEvent.Text) &lt;&gt; &quot;&quot;	
			End If
		End If
	End If
	DlgCalModel.cmdInsert.Enabled = bDoEnable
End Sub
</script:module>