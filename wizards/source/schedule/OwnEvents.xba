<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="OwnEvents" script:language="StarBasic">Option Explicit

Public Const SBYEARUNDEFINED as Integer = -400
Public Const SBDATEUNDEFINED as Double = -98765432.1

Sub Main
	Call CalAutopilotTable()
End Sub


Sub CalSaveOwnData()
Dim FileName as String
Dim FileChannel as Integer
Dim i as Integer
	If bCalOwnDataChanged Then
		FileName = GetPathSettings(&quot;UserConfig&quot;, False) &amp; &quot;/&quot; &amp; &quot;DATE.DAT&quot;
		SaveDataToFile(FileName, DlgCalModel.lstOwnData.StringItemList())
	End If
End Sub


Sub CalLoadOwnData()
Dim FileName as String
Dim LocList() as String
	FileName = GetPathSettings(&quot;UserConfig&quot;, False) &amp; &quot;/DATE.DAT&quot;
	If LoadDataFromFile(FileName, LocList()) Then
		DlgCalModel.lstOwnData.StringItemList() = LocList()
	End If
End Sub


Function CalCreateDateStrOfInput() as String
Dim DateStr as String
Dim CurOwnYear as Integer
Dim CurOwnMonth as Integer
Dim CurOwnDay as Integer
Dim FormatDateStr as String
Dim dblDate as Double
Dim iLen as Integer
Dim iDiff as Integer
Dim i as Integer
	CurOwnYear  = DlgCalModel.txtOwnEventYear.Value
	CurOwnDay = DlgCalModel.txtOwnEventDay.Value
	CurOwnMonth = DlgCalendar.GetControl(&quot;lstOwnEventMonth&quot;).getselectedItemPos() + 1
	if DlgCalModel.chkEventOnce.State = 1 Then
		DateStr = DateSerial(CurOwnYear, CurOwnMonth, CurOwnDay)
		dblDate = CDbl(DateValue(DateStr))
		FormatDateStr = oNumberFormatter.convertNumberToString(lDateStandardFormat, dblDate)
	else
		DateStr = DateSerial(0, CurOwnMonth, CurOwnDay)
		dblDate = CDbl(DateValue(DateStr))
		FormatDateStr = oNumberFormatter.convertNumberToString(lDateFormat, dblDate)
	End If
	iLen = Len(FormatDateStr)
	iDiff = 16 - iLen
	If iDiff &gt; 0 Then
		For i = 0 To iDiff
			FormatDateStr = FormatDateStr + &quot; &quot;
		Next i
	Else
    	MsgBox(&quot;Invalid DateFormat: &apos;FormatDateStr&apos;&quot;, 16, sWizardTitle)
		CalCreateDateStrOfInput = &quot;&quot;
    	Exit Function
    End If
	DateStr = FormatDateStr  &amp; Trim(DlgCalModel.txtEvent.Text)
	CalCreateDateStrOfInput = DateStr
End Function



Sub CalcmdInsertData()
Dim MaxIndex as Integer
Dim UIDateStr as String
Dim DateStr as String
Dim bGetYear as Boolean
Dim NewDate as Double
Dim bInserted as Boolean
Dim i as Integer
Dim CurOwnDay as Integer
Dim CurOwnMonth as Integer
Dim CurOwnYear as Integer
	CurOwnDay = DlgCalModel.txtOwnEventDay.Value
	CurOwnMonth = DlgCalendar.GetControl(&quot;lstOwnEventMonth&quot;).getSelectedItemPos() + 1
	bGetYear = DlgCalModel.chkEventOnce.State = 1
	If bGetYear Then
		CurOwnYear = DlgCalModel.txtOwnEventYear.Value
	Else
		CurOwnYear = SBYEARUNDEFINED
	End If
	UIDateStr = CalCreateDateStrOfInput()
	NewDate = GetDateUnits(CurOwnDay, CurOwnMonth, CurOwnYear, UIDateStr)
	If UIDateStr = &quot;&quot; Then Exit Sub
	MaxIndex = Ubound(DlgCalModel.lstOwnData.StringItemList())
	If MaxIndex = -1 Then
		DlgCalendar.GetControl(&quot;lstOwnData&quot;).AddItem(UIDateStr, 0 + 1)
		bInserted = True
	Else
		Dim CurEvYear(MaxIndex) as Integer
		Dim CurEvMonth(MaxIndex) as Integer
		Dim CurEvDay(MaxIndex) as Integer
		Dim CurDate(MaxIndex) as Double
		
		&apos; same Years(&quot;no years&quot; are treated like same years) -&gt; delete old entry and insert new one
		i = 0
		Do
			CurDate(i) = GetSelectedDateUnits(CurEvDay(i), CurEvMonth(i), CurEvYear(i), i)
&apos;			If  CurEvYear(i) &lt;&gt; SBYEARUNDEFINED Then
				If CurDate(i) = NewDate Then
					DlgCalendar.GetControl(&quot;lstOwnData&quot;).RemoveItems(i,1)
					DlgCalendar.GetControl(&quot;lstOwnData&quot;).AddItem(UIDateStr, i)
					bInserted = True
				End If
&apos;			End If
			i = i + 1
		Loop Until bInserted Or i &gt; MaxIndex
		
		&apos;  There exists a date with a certain year number.
		If Not bInserted And Not bGetYear Then
			i = 0
			Do
				If CurEvYear(i) &lt;&gt; SBYEARUNDEFINED Then
					If (CurEvMonth(i) = CurOwnMonth) And (CurEvDay(i) = CurOwnDay) Then
						bInserted = True
						DlgCalendar.GetControl(&quot;lstOwnData&quot;).AddItem(UIDateStr, i)
					End If
				End If
				i = i + 1
			Loop Until bInserted Or i &gt; MaxIndex
		End If
	
		&apos; the date to be inserted owns a year number. It exists already such a date in the list but without year number
		If Not bInserted And bGetYear Then
			i = 0
			Do
				If CurEvYear(i) = SBYEARUNDEFINED Then
					If (CurEvMonth(i) = CurOwnMonth) And (CurEvDay(i) = CurOwnDay) Then
						bInserted = true
						DlgCalendar.GetControl(&quot;lstOwnData&quot;).AddItem(UIDateStr, i)
					End If
				End If
				i = i + 1
			Loop Until bInserted Or i &gt; MaxIndex
		End If
	
		&apos; The date is not yet existing and will will be sorted in accordingly
		If Not bInserted Then
			i = 0
			Do 
				bInserted = NewDate &lt; CurDate(i)
				If bInserted Then
					DlgCalendar.GetControl(&quot;lstOwnData&quot;).AddItem(UIDateStr, i)
				End If
				i = i + 1
			Loop Until bInserted Or i &gt; MaxIndex
			If Not bInserted  Then
				DlgCalendar.GetControl(&quot;lstOwnData&quot;).AddItem(UIDateStr, MaxIndex+1)
			End If
		End If
	End If
	bCalOwnDataChanged = True
	Call CalClearInputMask()
End Sub


Function GetSelectedDateUnits(CurEvDay as Integer, CurEvMonth as Integer, CurEvYear as Integer, i as Integer) as Double
Dim dblDate as Double
Dim DateStr as String
	dblDate = SBDATEUNDEFINED
	DateStr = DlgCalModel.lstOwnData.StringItemList(i)
	If DateStr &lt;&gt; &quot;&quot; Then
		dblDate = GetDateUnits(CurEvDay, CurEvMonth, CurEvYear, DateStr)
	End If
	GetSelectedDateUnits() = dblDate
End Function


Function GetDateUnits(CurEvDay as Integer, CurEvMonth as Integer, CurEvYear as Integer, DateStr) as Double
Dim bEventOnce as String
Dim LocDateStr as String
Dim dblDate as Double
Dim lDate as Long
	LocDateStr = Mid(DateStr, 1, 15)
	LocDateStr = Trim(LocDateStr)

	bEventOnce = True
	On Local Error GoTo NOSTANDARDDATEFORMAT
	dblDate = oNumberFormatter.convertStringToNumber(lDateStandardFormat, LocDateStr)
NOSTANDARDDATEFORMAT:
	If Err &lt;&gt; 0 Then
		bEventOnce = False
		Resume GETDATEFORMAT
GETDATEFORMAT:
		On Local Error Goto NODATEFORMAT
		dblDate = oNumberFormatter.convertStringToNumber(lDateFormat, LocDateStr)
	End If
	lDate = Clng(dblDate)
	CurEvMonth = Month(lDate) 
	CurEvDay = Day(lDate)
	If bEventOnce Then
		CurEvYear = Year(lDate)
	Else 
		CurEvYear = SBYEARUNDEFINED
	End If
	GetDateUnits() = dblDate
	Exit Function
	GetDateUnits() =SBDATEUNDEFINED
NODATEFORMAT:
	If Err &lt;&gt; 0 Then
	    MsgBox(&quot;Error: Date : &apos; &quot; &amp;  LocDateStr &amp; &quot;&apos; is not a valid Format&quot;, 16, sWizardTitle)
		Resume GETRETURNVALUE
GETRETURNVALUE:
		GetDateUnits() = SBDATEUNDEFINED
	End If
End Function


Function CalGetNameOfEvent(ByVal ListIndex as Integer) as String
Dim NameStr as String
	NameStr = DlgCalModel.lstOwnData.StringItemList(ListIndex)
	NameStr = Trim (Mid(NameStr, 16))
	CalGetNameOfEvent = NameStr
End Function


Function GetOwnYear()	
	If DlgCalModel.chkEventOnce.State = 1 Then
		GetOwnYear() = DlgCalModel.txtOwnEventYear.Value
	Else
		GetOwnYear() = Year(Now())
	End If
End Function


Sub CheckInsertedDates(Optional ControlEnvironment, Optional CurOwnMonth as Integer)
Dim EvYear as Long
Dim EvDay as Long
Dim sEvMonth as String
Dim bDoEnable as Boolean
Dim ListboxName as String
	If Not IsMissing(ControlEnvironment) Then
		CurOwnMonth = DlgCalendar.GetControl(&quot;lstOwnEventMonth&quot;).getSelectedItemPos()+1
	End If
	EvYear = GetOwnYear()
	bDoEnable = (EvYear &lt;&gt; 0) And (CurOwnMonth &lt;&gt; 0)
	If bDoEnable Then
		DlgCalModel.txtOwnEventDay.ValueMax = CalMaxDayInMonth(EvYear, CurOwnMonth)
		bDoEnable = DlgCalModel.txtOwnEventDay.Value &lt;&gt; 0
		If bDoEnable Then
			bDoEnable = Ubound(DlgCalModel.lstOwnEventMonth.SelectedItems()) &gt; -1
			If bDoEnable Then
				bDoEnable = LTrim(DlgCalModel.txtEvent.Text) &lt;&gt; &quot;&quot;
			End If
		End If
	End If
	DlgCalModel.cmdInsert.Enabled = bDoEnable
End Sub


Sub GetOwnMonth()
Dim EvYear as Integer
Dim CurOwnMonth as Integer
	EvYear = GetOwnYear()
	CurOwnMonth = DlgCalModel.lstOwnEventMonth.SelectedItems(0) + 1
	DlgCalModel.txtOwnEventDay.ValueMax = CalMaxDayInMonth(EvYear, CurOwnMonth)
	CheckInsertedDates(,CurOwnMonth)
End Sub</script:module>