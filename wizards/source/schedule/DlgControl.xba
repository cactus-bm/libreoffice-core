<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="DlgControl" script:language="StarBasic">Option Explicit

Dim CalBitmap As Object
Public bDoSelect as Boolean

&apos; Todo: Adjustmentlistener an der Scrollbar anmelden

Sub Main()
	Call CalAutopilotTable()
End Sub


Sub CalSaveTextValues()
	txtYear.Tag = txtYear.Text
	txtMonth.Tag = txtMonth.Text
End Sub


Sub CalRestoreOldValues()
	Beep
	&apos; Start of the Gregorian Calendar
	If int(Val(txtyear.Text)) &lt; 1583 then
		txtYear.Text = &quot;1583&quot;
	Else
		&apos; last year where the easter Routin works
		txtYear.Text = &quot;9956&quot;
	End If
	txtMonth.Text = txtMonth.Tag
End Sub



Sub CalChangeYear()
	Dim ValNewYear&amp;
	ValNewYear&amp; = Val(txtYear.Text)
	If ((1583 &gt; ValNewYear&amp;) Or (9956 &lt; ValNewYear&amp;)) Then
		Call CalRestoreOldValues()
	End If          
End Sub



Sub CalcmdDeleteSelect()
Dim MsgBoxResult as Integer
	If Ubound(DlgCalModel.lstOwnData.SelectedItems()) &gt; -1 Then
		MsgBoxResult = MsgBox(cCalSubcmdDeleteSelect_DeleteSelEntry$, 4+32, cCalSubcmdDeleteSelect_DeleteSelEntryTitle$)
		If MsgBoxResult = 6 Then
			DlgCalModel.lstOwnData.StringItemList() = RemoveSelected(DlgCalModel.lstOwnData)
			&apos; Flag zum Speichern der neuen Daten.
			bCalOwnDataChanged = True
			DlgCalModel.cmdDelete.Enabled = Ubound(DlgCalModel.lstOwnData.StringItemList()) &gt; -1
			Call CalClearInputMask()
		End If
	End If
End Sub


Sub CalSaveOwnEventControls()
	With DlgCalModel
		.txtOwnEventDay.Tag = .txtOwnEventDay.Text
		.txtOwnEventMonth.Tag = .txtOwnEventMonth.Text
		.DlgCalModel.txtOwnEventYear.Tag = .DlgCalModel.txtOwnEventYear.Text
	End With
End Sub



Sub ModIntTextBox (txtYear As Object, ByVal nMax%, ByVal nMin%, ByVal sDefault$, IncFactor as Integer)
	Dim nActVal&amp;
	nActVal&amp; = Val(txtYear.Text)
	If ((0 = nActVal&amp;) Or (nMax% &lt; nActVal&amp;) Or (nMin% &gt; nActVal&amp;)) Then 
		Beep
		txtYear.Text = sDefault$
		Exit Sub
	End If
	If IncFactor = 1 Then
		If nMax% &gt; nActVal&amp; Then
			txtYear.Text = Trim(Str(nActVal&amp; + 1))
		Else
			Beep
			txtYear.Text = nMax%
		End if
	ElseIf IncFactor = -1 Then
		If nMin% &lt; nActVal&amp; Then
			txtYear.Text = Trim(Str(nActVal&amp; - 1))
		Else
			Beep
			txtYear.Text = nMin%
		End if
	End If
End Sub



Sub ToggleYearBox()
&apos; Falls der RadioButton für einen Jahreskalender angeklickt
&apos; worden ist, müssen die Controls für den Monat Disabled
&apos; werden, da ihre Werte in einer Jahrestabelle aufgehen.
	With DlgCalModel
		.txtOwnEventYear.Enabled  = .chkEventOnce.State = 1
		.lblEventYear.Enabled  = .chkEventOnce.State = 1
		If .txtOwnEventYear.Text = &quot;&quot; And .lblEventYear.Enabled Then
			.txtOwnEventYear.Text = Trim$(Str$(Year(Now())))
		End If
	End With
End Sub


Sub CalMouseMoved(aEvent as object)
Dim ListIndex as Integer
	oStatusline.SetText(aEvent.ClickCount)
&apos;	If aEvent.ClickCount = 2 Then
&apos;		oStatusLine.SetText(&quot;Click&quot;)
&apos;		bDoSelect = False
&apos;	Else
&apos;		oStatusLine.SetText(&quot;&quot;)
&apos;	End If
	&apos;       Nimmt Mousemoves ueber dem Bitmap entgegen, und wertet sie je nach
	&apos;       Land aus.
	Select Case sCurLangLocale
		Case  cLANGUAGE_GERMAN
		&apos; Ermittelt das Land auf dem sich der MausCursor befindet, und aktualisiert
		&apos; die Textbox mit der Bundeslandbezeichnung, falls ein Mausklick stattfandt.
&apos;			If bDoSelect Then 
				ListIndex = CalGetGermanLandAtMousePos(aEvent.X, aEvent.Y, Land$)
				DlgCalendar.GetControl(&quot;lstHolidays&quot;).SelectItemPos(ListIndex, True)
				If aEvent.ClickCount = 2 Then
					bDoSelect = False
				End If
&apos;			End If
	End Select
	
	LastMousePosX = aEvent.X
	LastMousePosY = aEvent.Y
End Sub


Sub CalChangeGeneralMonth()

	Dim MonthToCheck$
	Dim ValMonthToCheck%

	MonthToCheck$ = DlgCalModel.txtMonth.Text
	ValMonthToCheck% = Val(MonthToCheck$)

	If (ValMonthToCheck% &gt;= 1) And (ValMonthToCheck% &lt;=12) Then
		DlgCalModel.txtMonth.Text = cCalShortMonthNames$(ValMonthToCheck%)
		Exit Sub
	End If

	If CalGetIntOfShortMonthName%(Trim(Left(MonthToCheck$, 3))) = 0 Then
		Beep
		DlgCalModel.txtMonth.Text = DlgCalModel.txtMonth.Tag
	Else
		DlgCalModel.txtMonth.Text = Trim(Left(MonthToCheck, 3))
	End If

End Sub



Sub CalChkForChangeInsertAccept
	&apos;       Aktualisiert die Label des Insert/Accept Buttons
	If (DataSelectedFromList=True) And (ButtonLabelIsInsert) Then
		DlgCalModel.cmdInsert.Label = cSubChkForChangeInsertAccept_Accpet$
	End If
End Sub



Sub CalClearInputMask()
Dim NullList() as String
&apos;  Löscht die Werte der Eingabe Controls für ein neues Ereignis.
	With DlgCalModel
		.chkEventOnce.State = 0
		.lblEventYear.Enabled = False
		.txtOwnEventYear.Enabled = False
&apos;		SpinOwnEventYear.Enabled = False
		.txtOwnEventYear.Text = &quot;&quot;
		.txtEvent.Text = &quot;&quot;
		.txtOwnEventDay.Text = &quot;&quot;
&apos; Todo: Wie kriegt man den Focus auf dieses  verdammte Control?		
&apos;		.txtEvent.DefaultButton = True
	End With
	DlgCalModel.lstOwnEventMonth.SelectedItems() = Nulllist()
End Sub


Sub CalmdSwitchOwnDataOrGeneral()
	&apos;Ändert den Titel der Dialogbox beim Seitenwechsel und die 
	&apos;Beschriftungen der Knöpfe
	If DlgCalModel.Step = 1 Then
		DlgCalModel.Step = 2
		DlgCalModel.cmdOwnData.Label = cCalSubcmdSwitchOwnDataOrGeneral_Back$
		DlgCalModel.cmdInsert.Enabled = DlgCalModel.txtEvent.Text &lt;&gt; &quot;&quot;
		ToggleYearBox()
	Else
		DlgCalModel.Step = 1
		DlgCalModel.cmdOwnData.Label = cCalSubcmdSwitchOwnDataOrGeneral_OwnData$
	End If
End Sub


Sub ToggleInsertButton()
	DlgCalModel.cmdInsert.Enabled = LTrim(DlgCalModel.txtEvent.Text) &lt;&gt; &quot;&quot;	
End Sub


Sub CalModMonthTextBox(txtMonth As Object,IncFactor as Integer)
	Dim nActVal&amp;
	nActVal&amp; = Val(txtMonth.Text)
	If (1 &lt;= nActVal&amp; And 12 &gt;= nActVal) Then
		txtMonth.Text = cCalShortMonthNames$(nActVal&amp;)
	End If
	nActVal&amp; = CalGetIntOfShortMonthName%(txtMonth.Text)
	If 0 = nActVal&amp; Then
		Beep
		txtMonth.Text = cCalShortMonthNames$(1)
	ElseIf (1 &lt; nActVal&amp;) AND (IncFactor = -1) Then
		txtMonth.Text = cCalShortMonthNames$(nActVal&amp; + IncFactor)
	ElseIf (12 &gt; nActVal&amp;)AND (IncFactor = 1) Then
		txtMonth.Text = cCalShortMonthNames$(nActVal&amp; + IncFactor)
	End If
End Sub


Sub CalUpdateNewEventFrame()
Dim bDoEnable as Boolean
Dim sSelectedItem
Dim ListIndex as Integer
Dim MaxSelIndex as Integer
	bDoEnable = False
	With DlgCalModel
		MaxSelIndex = Ubound(DlgCalModel.lstOwnData.SelectedItems())
		If MaxSelIndex &gt; -1 Then
			ListIndex = .lstOwnData.SelectedItems(MaxSelIndex)
			.txtEvent.Text = CalGetNameofEvent(ListIndex)
			.txtOwnEventDay.Text = CalGetDayOfEvent(ListIndex)
			DlgCalendar.GetControl(&quot;lstOwnEventMonth&quot;).SelectItem(CalGetMonthOfEvent(ListIndex), True)
			.txtOwnEventYear.Text = CalGetYearofEvent(ListIndex)
			bDoEnable = DlgCalModel.txtOwnEventYear.Text = &quot;&quot;
			.chkEventOnce.State = Abs(bDoEnable)
			.lblEventYear.Enabled = bDoEnable
			.txtOwnEventYear.Enabled = bDoEnable
			.cmdDelete.Enabled = True
		Else
			Call CalClearInputMask()
			.cmdDelete.Enabled = False
		End If
	End With
End Sub

</script:module>