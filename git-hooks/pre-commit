#!/usr/bin/env perl

# A hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message
# if it wants to stop the commit.

use strict;
use File::Temp qw/ :mktemp  /;
use File::Copy;
use Cwd;

$ENV{LC_ALL} = "C";

sub check_whitespaces($$)
{
    my ($h, $src_exts) = @_;

    my $found_bad = 0;
    my $filename;
    my $reported_filename = "";
    my $lineno;
    sub bad_line {
	my ($why, $line) = @_;
        if ($filename =~ /\.($src_exts)$/) {
	if (!$found_bad) {
	    print STDERR "*\n";
	    print STDERR "* You have some suspicious patch lines:\n";
	    print STDERR "*\n";
	    $found_bad = 1;
	}
	if ($reported_filename ne $filename) {
	    print STDERR "* In $filename\n";
	    $reported_filename = $filename;
	}
	print STDERR "* $why (line $lineno)\n";
	print STDERR "$filename:$lineno:$line\n";
        }
    }
    open( FILES, "git-diff-index -p -M --cached $h |" ) ||  die "Cannot run git diff-index.";
    while (<FILES>) {
	if (m|^diff --git a/(.*) b/\1$|) {
	    $filename = $1;
	    next;
	}
	if (/^@@ -\S+ \+(\d+)/) {
	    $lineno = $1 - 1;
	    next;
	}
	if (/^ /) {
	    $lineno++;
	    next;
	}
	if (s/^\+//) {
	    $lineno++;
	    chomp;
	    if (/\s$/) {
		bad_line("trailing whitespace", $_);
	    }
	    if (/^\s* 	/) {
		bad_line("indent SP followed by a TAB", $_);
	    }
	    if (/^(?:[<>=]){7}/) {
		bad_line("unresolved merge conflict", $_);
	    }
	}
    }
    if ( $found_bad)
    {
	exit($found_bad);
    }
}

# Do the work :-)

# Initial commit: diff against an empty tree object
my $against="4b825dc642cb6eb9a060e54bf8d69288fbee4904";
if ( system( "git rev-parse --verify HEAD >/dev/null 2>&1" ) == 0 ) {
    $against="HEAD"
}

# If you want to allow non-ascii filenames set this variable to true.
my $allownonascii=`git config hooks.allownonascii`;

# Cross platform projects tend to avoid non-ascii filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if ( $allownonascii ne "true" &&
    # Note that the use of brackets around a tr range is ok here, (it's
    # even required, for portability to Solaris 10's /usr/bin/tr), since
    # the square bracket bytes happen to fall in the designated range.
    `git diff --cached --name-only --diff-filter=A -z $against | \
     LC_ALL=C tr -d '[ -~]\\0'` ne "" )
{
    print <<EOM;
Error: Attempt to add a non-ascii file name."

This can cause problems if you want to work"
with people on other platforms."

To be portable it is advisable to rename the file ..."

If you know what you are doing you can disable this"
check using:"

  git config hooks.allownonascii true"

EOM
    exit( 1 );
}

# check for missing doxygen comments in new files
my $doxycheck = "../../bin/find-undocumented-classes";
if (! -e $doxycheck) {
    # bootstrap repo
    $doxycheck =~ s|../../||;
}
open(FILES, "git diff-index --cached --name-only --diff-filter=A $against |") || die "Cannot run git diff-index.";
while (my $file = <FILES>) {
    chomp($file);
    if ($file =~ /\.hxx$/) {
        system("$doxycheck -q $file | sed 's|".getcwd()."/||;'");
    }
}

# run 'msgcat --nowrap' when committing *.po files
open(FILES, "git diff-index --cached --name-only $against |") || die "Cannot run git diff-index.";
while (my $file = <FILES>) {
    chomp($file);
    if ($file =~ /\.po$/ && -e $file) {
        system("msgcat --no-wrap $file > $file.KQnBbK6wQE;mv $file.KQnBbK6wQE $file;");
        system("git add $file");
    }
}

# be strict about tabs - we don't want them at all, setup your editor
# correctly ;-)
my $err_ext = "";
my $src_exts = "c|cpp|cxx|h|hrc|hxx|idl|inl|java|map|MK|pmk|pl|pm|sdi|sh|src|tab|xcu|xml";

open( FILES, "git diff-index --cached --name-only $against |" ) || die "Cannot run git diff-index.";
while ( my $file = <FILES> ) {
    chomp( $file );
    if ( $file ne "GNUmakefile" &&
         $file =~ /\.($src_exts)$/) {
        open( F, "git diff-index -p --cached $against -- '$file' |" );
        while ( my $line = <F> ) {
            if ( $line =~ /^\+ *\t/ ) {
                $err_ext .= "$file\n";
                last;
            }
        }
    }
    close( F );
}
close( FILES );

if ( $err_ext ne "" ) {
    print <<EOM;
Error: Your change in the following files introduces tabs in indentation:

$err_ext
Please setup your editor not to use tabs, fix the files, and try again.
We have had enough trouble with tabs in the past :-(

EOM
    exit( 1 );
}

# check for old licenses
my $check_licenses='^+.*\(Sun Industry Standards Source License Version\|GNU Lesser General Public License Version 2.1\)';
my $err_licenses=`git diff-index --cached --name-only $against | while read FILE ; do \
                      if git diff-index -p --cached $against -- "\$FILE" | grep -qs "$check_licenses" ; then \
                          echo "\$FILE" \
                      fi \
                  done`;
chomp( $err_licenses );
if ( $err_licenses ne "" && $err_licenses ne "git-hooks/pre-commit" ) {
    print <<EOM;
Error: Your change in the following files introduces old licenses:

$err_licenses

Please check with the author(s) that they agree with upgrading the
license to LGPL3, and change the license accondingly.

EOM
    exit( 1 );
}

# fix whitespace in code
check_whitespaces( $against, $src_exts );

# check the rest of the files
my $filter_patches=`git diff-index --check --cached $against -- | sed '/\.\(diff\|patch\):/,/.*/d'`;
chomp( $filter_patches );
if ( $filter_patches ne "" ) {
    print "WARNING:\n\n$filter_patches\n";
}

# all OK
exit( 0 );
# vi:set shiftwidth=4 expandtab:
