--- misc/boost_1_44_0/boost/math/tools/fraction.hpp
+++ misc/build/boost_1_44_0/boost/math/tools/fraction.hpp
@@ -33,7 +33,7 @@
        typedef typename Gen::result_type result_type;
        typedef typename Gen::result_type value_type;
 
-       static result_type a(const value_type& v)
+       static result_type a(const value_type&)
        {
           return 1;
        }
--- misc/boost_1_44_0/boost/token_functions.hpp	2010-06-12 14:06:28.000000000 +0200
+++ misc/build/boost_1_44_0/boost/token_functions.hpp	2012-06-06 23:12:27.000000000 +0200
@@ -285,7 +285,7 @@
   template <>
   struct assign_or_plus_equal<std::input_iterator_tag> {
     template<class Iterator, class Token>
-    static void assign(Iterator b, Iterator e, Token &t) { }
+    static void assign(Iterator, Iterator, Token &) { }
     template<class Token, class Value> 
     static void plus_equal(Token &t, const Value &v) {
       t += v;
--- misc/boost_1_44_0/boost/random/lagged_fibonacci.hpp
+++ misc/build/boost_1_44_0/boost/random/lagged_fibonacci.hpp
@@ -16,6 +16,10 @@
 #ifndef BOOST_RANDOM_LAGGED_FIBONACCI_HPP
 #define BOOST_RANDOM_LAGGED_FIBONACCI_HPP
 
+#if defined __GNUC__
+#pragma GCC system_header
+#endif
+
 #include <istream>
 #include <iosfwd>
 #include <algorithm>     // std::max
--- misc/boost_1_44_0/boost/random/shuffle_output.hpp
+++ misc/build/boost_1_44_0/boost/random/shuffle_output.hpp
@@ -16,6 +16,10 @@
 #ifndef BOOST_RANDOM_SHUFFLE_OUTPUT_HPP
 #define BOOST_RANDOM_SHUFFLE_OUTPUT_HPP
 
+#if defined __GNUC__
+#pragma GCC system_header
+#endif
+
 #include <boost/random/shuffle_order.hpp>
 
 namespace boost {
--- misc/boost_1_44_0/boost/random/subtract_with_carry.hpp
+++ misc/build/boost_1_44_0/boost/random/subtract_with_carry.hpp
@@ -16,6 +16,10 @@
 #ifndef BOOST_RANDOM_SUBTRACT_WITH_CARRY_HPP
 #define BOOST_RANDOM_SUBTRACT_WITH_CARRY_HPP
 
+#if defined __GNUC__
+#pragma GCC system_header
+#endif
+
 #include <boost/config/no_tr1/cmath.hpp>         // std::pow
 #include <iostream>
 #include <algorithm>     // std::equal
--- misc/boost_1_44_0/boost/smart_ptr/detail/make_array_helper.hpp
+++ misc/build/boost_1_44_0/boost/smart_ptr/detail/make_array_helper.hpp
@@ -72,7 +72,7 @@
                 memory->~Y();
             }
             template<typename U>
-            bool operator==(const make_array_helper<T[], U>& other) const {
+            bool operator==(const make_array_helper<T[], U>&) const {
                 return true;
             }
             template<typename U>
@@ -138,7 +138,7 @@
                 memory->~Y();
             }
             template<typename U>
-            bool operator==(const make_array_helper<T[N], U>& other) const {
+            bool operator==(const make_array_helper<T[N], U>&) const {
                 return true;
             }
             template<typename U>
