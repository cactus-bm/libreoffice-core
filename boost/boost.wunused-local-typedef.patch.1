diff -ur boost.org/boost/date_time/gregorian/greg_facet.hpp boost/boost/date_time/gregorian/greg_facet.hpp
--- boost.org/boost/date_time/gregorian/greg_facet.hpp	2013-05-31 21:56:34.677809902 +0200
+++ boost/boost/date_time/gregorian/greg_facet.hpp	2013-05-31 22:57:29.671660310 +0200
@@ -215,7 +215,6 @@
   {
     std::istream_iterator<std::basic_string<charT>, charT> beg(is), eos;
     
-    typedef boost::date_time::all_date_names_put<greg_facet_config, charT> facet_def;
     d = from_stream(beg, eos);
     return is;
   }
diff -ur boost.org/boost/lexical_cast.hpp boost/boost/lexical_cast.hpp
--- boost.org/boost/lexical_cast.hpp	2013-05-31 21:56:34.685809901 +0200
+++ boost/boost/lexical_cast.hpp	2013-05-31 21:58:15.899805759 +0200
@@ -865,7 +865,6 @@
 #ifndef BOOST_NO_LIMITS_COMPILE_TIME_CONSTANTS
             BOOST_STATIC_ASSERT(!std::numeric_limits<T>::is_signed);
 #endif
-            typedef typename Traits::int_type int_type;
             CharT const czero = lcast_char_constants<CharT>::zero;
             --end;
             value = 0;
diff -ur boost.org/boost/math/special_functions/fpclassify.hpp boost/boost/math/special_functions/fpclassify.hpp
--- boost.org/boost/math/special_functions/fpclassify.hpp	2013-05-31 21:56:34.756809898 +0200
+++ boost/boost/math/special_functions/fpclassify.hpp	2013-05-31 22:56:08.456663634 +0200
@@ -327,7 +327,6 @@
 { //!< \brief return true if floating-point type t is finite.
    typedef typename detail::fp_traits<T>::type traits;
    typedef typename traits::method method;
-   typedef typename boost::is_floating_point<T>::type fp_tag;
    typedef typename tools::promote_args<T>::type value_type;
    return detail::isfinite_impl(static_cast<value_type>(x), method());
 }
@@ -487,7 +486,6 @@
 {
    typedef typename detail::fp_traits<T>::type traits;
    typedef typename traits::method method;
-   typedef typename boost::is_floating_point<T>::type fp_tag;
    typedef typename tools::promote_args<T>::type value_type;
    return detail::isinf_impl(static_cast<value_type>(x), method());
 }
@@ -570,7 +568,6 @@
 { //!< \brief return true if floating-point type t is NaN (Not A Number).
    typedef typename detail::fp_traits<T>::type traits;
    typedef typename traits::method method;
-   typedef typename boost::is_floating_point<T>::type fp_tag;
    return detail::isnan_impl(x, method());
 }
 
diff -ur boost.org/boost/math/special_functions/sign.hpp boost/boost/math/special_functions/sign.hpp
--- boost.org/boost/math/special_functions/sign.hpp	2013-05-31 21:56:34.756809898 +0200
+++ boost/boost/math/special_functions/sign.hpp	2013-05-31 22:56:53.787661778 +0200
@@ -110,7 +110,6 @@
 { 
    typedef typename detail::fp_traits<T>::type traits;
    typedef typename traits::method method;
-   typedef typename boost::is_floating_point<T>::type fp_tag;
    return detail::signbit_impl(x, method());
 }
 
@@ -124,7 +123,6 @@
 { //!< \brief return unchanged binary pattern of x, except for change of sign bit. 
    typedef typename detail::fp_traits<T>::sign_change_type traits;
    typedef typename traits::method method;
-   typedef typename boost::is_floating_point<T>::type fp_tag;
 
    return detail::changesign_impl(x, method());
 }
diff -ur boost.org/boost/tuple/detail/tuple_basic.hpp boost/boost/tuple/detail/tuple_basic.hpp
--- boost.org/boost/tuple/detail/tuple_basic.hpp	2013-05-31 21:56:34.846809895 +0200
+++ boost/boost/tuple/detail/tuple_basic.hpp	2013-05-31 22:58:11.116658614 +0200
@@ -225,7 +225,6 @@
 get(const cons<HT, TT>& c BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(int, N)) {
   typedef BOOST_DEDUCED_TYPENAME detail::drop_front<N>::BOOST_NESTED_TEMPLATE
       apply<cons<HT, TT> > impl;
-  typedef BOOST_DEDUCED_TYPENAME impl::type cons_element;
   return impl::call(c).head;
 }
 
diff -ur boost.org/boost/unordered/detail/unique.hpp boost/boost/unordered/detail/unique.hpp
--- boost.org/boost/unordered/detail/unique.hpp	2013-05-31 21:56:34.721809901 +0200
+++ boost/boost/unordered/detail/unique.hpp	2013-05-31 22:59:03.466656471 +0200
@@ -334,8 +334,6 @@
 
         value_type& operator[](key_type const& k)
         {
-            typedef typename value_type::second_type mapped_type;
-    
             std::size_t key_hash = this->hash(k);
             iterator pos = this->find_node(key_hash, k);
     
