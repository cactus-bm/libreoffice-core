<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="text_XText" script:language="StarBasic">


'*************************************************************************
'*
'*  $RCSfile: text_XText.xba,v $ 
'*
'*  $Revision: 1.2 $ 
'*
'*  last change:$Date: 2003-08-07 15:05:36 $ 
'*
'*  The Contents of this file are made available subject to the terms of
'*  either of the following licenses
'*
'*         - GNU Lesser General Public License Version 2.1
'*         - Sun Industry Standards Source License Version 1.1
'*
'*  Sun Microsystems Inc., October, 2000
'*
'*  GNU Lesser General Public License Version 2.1
'*  =============================================
'*  Copyright 2000 by Sun Microsystems, Inc.
'*  901 San Antonio Road, Palo Alto, CA 94303, USA
'*
'*  This library is free software; you can redistribute it and/or
'*  modify it under the terms of the GNU Lesser General Public
'*  License version 2.1, as published by the Free Software Foundation.
'*
'*  This library is distributed in the hope that it will be useful,
'*  but WITHOUT ANY WARRANTY; without even the implied warranty of
'*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
'*  Lesser General Public License for more details.
'*
'*  You should have received a copy of the GNU Lesser General Public
'*  License along with this library; if not, write to the Free Software
'*  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
'*  MA  02111-1307  USA
'*
'*
'*  Sun Industry Standards Source License Version 1.1
'*  =================================================
'*  The contents of this file are subject to the Sun Industry Standards
'*  Source License Version 1.1 (the "License"); You may not use this file
'*  except in compliance with the License. You may obtain a copy of the
'*  License at http://www.openoffice.org/license.html.
'*
'*  Software provided under this License is provided on an "AS IS" basis,
'*  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
'*  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
'*  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
'*  See the License for the specific provisions governing your rights and
'*  obligations concerning the Software.
'*
'*  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
'*
'*  Copyright: 2000 by Sun Microsystems, Inc.
'*
'*  All Rights Reserved.
'*
'*  Contributor(s): _______________________________________
'*
'*
'*************************************************************************
'*************************************************************************



' Be sure that all variables are dimensioned:
option explicit

'*************************************************************************
' This Interface/Service test depends on the following GLOBAL variables,
' which must be specified in the object creation:

'     - Global oCollection As Object [optional]
'       if this relation exists then the method "count" is called for check insert/remove
'     - Global oInstance As Object
'       Global aAddons() As Variant [optional]
'       if this relation exists, then additional methods are called before and after insert/removeTextContent() methods

'*************************************************************************






Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.text.XText
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim cText As String
    Dim oCursor As Object
    Dim i1 As Integer
    Dim i2 As Integer

    Test.StartMethod("insertTextContent()")
    bOK = true
    cText = ". Zeile : test_XText"

    If IsObject(oCollection) and IsObject(oInstance) Then
        oCursor = oObj.createTextCursor()
        oCursor.gotoEnd(false)
        i1 = count(oCollection)
        Out.Log("Before inserting we have " + i1 + " elements.")
    
'        if isArray(aAddons) then                                    
'            Out.Log("Calling beforeInsertTextContent() ...")
'            beforeInsertTextContent()
'        endif

        oObj.insertTextContent(oCursor, oInstance, false)

'        if isArray(aAddons) then 
'            Out.Log("Calling afterInsertTextContent() ...")
'            afterInsertTextContent()
'        endif

        i2 = count(oCollection)
        Out.Log("After inserting we have " + i2 + " elements.")
        bOK = bOK AND i1 = i2 - 1
        Test.MethodTested("insertTextContent()", bOK)

        Test.StartMethod("removeTextContent()")
        bOK = true
        i1 = count(oCollection)
        Out.Log("Before removing we have " + i1 + " elements.")

'        if (isArray(aAddons)) then 
'           Out.Log("Calling beforeRemoveTextContent() ...")
'            beforeRemoveTextContent()
'        endif

        oObj.removeTextContent(oInstance)

'        if (isArray(aAddons)) then 
'            Out.Log("Calling afterRemoveTextContent() ...")
'            afterRemoveTextContent()
'        endif

        i2 = count(oCollection)
        Out.Log("After removing we have " + i2 + " elements.")
        bOK = bOK AND i1 = i2 + 1
        Test.MethodTested("removeTextContent()", bOK)
    Else
        oCursor = oObj.createTextCursor()
        oCursor.gotoEnd(false)
        oObj.insertTextContent(oCursor, oInstance, false)
        Test.MethodTested("insertTextContent()", True)
        Test.StartMethod("removeTextContent()")
        oObj.removeTextContent(oInstance)
        Test.MethodTested("removeTextContent()", True)
    End If

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub

Function count(container As Variant) As Integer
    Dim iAmount As Integer
    Dim oEnumeration As Object

    if hasUnoInterfaces(container, "com.sun.star.container.XIndexAccess") then
        iAmount = container.getCount()
    elseif hasUnoInterfaces(container, "com.sun.star.container.XNameAccess") then
        iAmount = ubound(container.getElementNames()) + 1
    elseif hasUnoInterfaces(container, "com.sun.star.container.XEnumerationAccess") then
        oEnumeration = container.createEnumeration()
        iAmount = 0
        while oEnumeration.hasMoreElements()
            iAmount = iAmount + 1
            oEnumeration.nextElement()
        wend
    end if

    count() = iAmount
End Function
</script:module>
