<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="io_XInputStream" script:language="StarBasic">


'*************************************************************************
'*
'*  $RCSfile: io_XInputStream.xba,v $ 
'*
'*  $Revision: 1.1 $ 
'*
'*  last change:$Date: 2003-01-27 17:50:46 $ 
'*
'*  The Contents of this file are made available subject to the terms of
'*  either of the following licenses
'*
'*         - GNU Lesser General Public License Version 2.1
'*         - Sun Industry Standards Source License Version 1.1
'*
'*  Sun Microsystems Inc., October, 2000
'*
'*  GNU Lesser General Public License Version 2.1
'*  =============================================
'*  Copyright 2000 by Sun Microsystems, Inc.
'*  901 San Antonio Road, Palo Alto, CA 94303, USA
'*
'*  This library is free software; you can redistribute it and/or
'*  modify it under the terms of the GNU Lesser General Public
'*  License version 2.1, as published by the Free Software Foundation.
'*
'*  This library is distributed in the hope that it will be useful,
'*  but WITHOUT ANY WARRANTY; without even the implied warranty of
'*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
'*  Lesser General Public License for more details.
'*
'*  You should have received a copy of the GNU Lesser General Public
'*  License along with this library; if not, write to the Free Software
'*  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
'*  MA  02111-1307  USA
'*
'*
'*  Sun Industry Standards Source License Version 1.1
'*  =================================================
'*  The contents of this file are subject to the Sun Industry Standards
'*  Source License Version 1.1 (the "License"); You may not use this file
'*  except in compliance with the License. You may obtain a copy of the
'*  License at http://www.openoffice.org/license.html.
'*
'*  Software provided under this License is provided on an "AS IS" basis,
'*  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
'*  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
'*  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
'*  See the License for the specific provisions governing your rights and
'*  obligations concerning the Software.
'*
'*  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
'*
'*  Copyright: 2000 by Sun Microsystems, Inc.
'*
'*  All Rights Reserved.
'*
'*  Contributor(s): _______________________________________
'*
'*
'*************************************************************************
'*************************************************************************





Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.io.XInputStream
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim Bytes(10) As Integer
    Dim rBytes(10) As Integer
    Dim oOutputStream As Object
    Dim i As Integer
    Dim nRead As Integer

    Out.Log("First writeBytes()...")
    bOK = true

    for i = 0 to ubound(Bytes())
        Bytes(i) = i
    next i

    oOutputStream = getOutStream()
    oOutputStream.writeBytes(Bytes())

    if (cObjectName &lt;&gt; "stm.Pipe") then ResetStreams()

    Test.StartMethod("readBytes()")
    bOK = true
    nRead = oObj.readBytes(Bytes(), 5)
    bOK = bOK AND nRead = 5
    for i = 0 to 4
        Out.Log("Expected " &amp; i &amp; ", actual is " &amp; int(Bytes(i)))
        bOK = bOK AND Bytes(i) = i
    next i
    Test.MethodTested("readBytes()", bOK)

    Test.StartMethod("skipBytes()")
    bOK = true
    oObj.skipBytes(2)
    nRead = oObj.readBytes(Bytes(), 2)
    Out.Log("Expected " &amp; 7 &amp; ", actual is " &amp; int(Bytes(0)))
    bOK = bOK AND Bytes(0) = 7
    Test.MethodTested("skipBytes()", bOK)

    Test.StartMethod("available()")
    bOK = true
    iAvail = oObj.available()
    Out.Log("bytes available without blocking: " &amp; iAvail)
    bOK = bOK AND iAvail &gt;= 0
    Test.MethodTested("available()", bOK)

    Test.StartMethod("readSomeBytes()")
    bOK = true
    nRead = oObj.readSomeBytes(Bytes(), 10)
    Out.Log("Can read " &amp; nRead &amp; " bytes.")
    for i = 0 to ubound(Bytes())
        Out.Log(int(Bytes(i)))
    next i
    bOK = bOK AND ubound(Bytes()) = 1
    bOK = bOK AND nRead = 2
    bOK = bOK AND Bytes(0) = 9
    bOK = bOK AND Bytes(1) = 10
    Test.MethodTested("readSomeBytes()", bOK)

    Test.StartMethod("closeInput()")
    bOK = true
    Out.Log("This method is called in main module.")
    Test.MethodTested("closeInput()", bOK)

    ResetStreams()

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
