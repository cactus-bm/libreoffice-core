<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="awt_XNumericField" script:language="StarBasic">


'*************************************************************************
'
'   OpenOffice.org - a multi-platform office productivity suite
'
'   $RCSfile: awt_XNumericField.xba,v $
'
'   $Revision: 1.2 $
'
'   last change: $Author: rt $ $Date: 2005-09-08 17:58:04 $
'
'   The Contents of this file are made available subject to
'   the terms of GNU Lesser General Public License Version 2.1.
'
'
'     GNU Lesser General Public License Version 2.1
'     =============================================
'     Copyright 2005 by Sun Microsystems, Inc.
'     901 San Antonio Road, Palo Alto, CA 94303, USA
'
'     This library is free software; you can redistribute it and/or
'     modify it under the terms of the GNU Lesser General Public
'     License version 2.1, as published by the Free Software Foundation.
'
'     This library is distributed in the hope that it will be useful,
'     but WITHOUT ANY WARRANTY; without even the implied warranty of
'     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
'     Lesser General Public License for more details.
'
'     You should have received a copy of the GNU Lesser General Public
'     License along with this library; if not, write to the Free Software
'     Foundation, Inc., 59 Temple Place, Suite 330, Boston,
'     MA  02111-1307  USA
'
'*************************************************************************
'*************************************************************************



' Be sure that all variables are dimensioned:
option explicit



Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.awt.XNumericField
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim oldVal, newVal As Variant

    Test.StartMethod("getValue()")
    Test.StartMethod("setValue()")
    bOK = true
    oldVal = oObj.getValue()
    Out.Log("value before: "+oldVal)
    oObj.setValue(oldVal+20)
    newVal = oObj.getValue()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setValue()", bOK)
    Test.MethodTested("getValue()", bOK)

    Test.StartMethod("getMin()")
    Test.StartMethod("setMin()")
    bOK = true
    oldVal = oObj.getMin()
    Out.Log("value before: "+oldVal)
    oObj.setMin(oldVal+20)
    newVal = oObj.getMin()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setMin()", bOK)
    Test.MethodTested("getMin()", bOK)

    Test.StartMethod("getMax()")
    Test.StartMethod("setMax()")
    bOK = true
    oldVal = oObj.getMax()
    Out.Log("value before: "+oldVal)
    oObj.setMax(oldVal+20)
    newVal = oObj.getMax()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setMax()", bOK)
    Test.MethodTested("getMax()", bOK)

    Test.StartMethod("getFirst()")
    Test.StartMethod("setFirst()")
    bOK = true
    oldVal = oObj.getFirst()
    Out.Log("value before: "+oldVal)
    oObj.setFirst(oldVal+20)
    newVal = oObj.getFirst()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setFirst()", bOK)
    Test.MethodTested("getFirst()", bOK)

    Test.StartMethod("getLast()")
    Test.StartMethod("setLast()")
    bOK = true
    oldVal = oObj.getLast()
    Out.Log("value before: "+oldVal)
    oObj.setLast(oldVal+20)
    newVal = oObj.getLast()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setLast()", bOK)
    Test.MethodTested("getLast()", bOK)

    Test.StartMethod("getSpinSize()")
    Test.StartMethod("setSpinSize()")
    bOK = true
    oldVal = oObj.getSpinSize()
    Out.Log("value before: "+oldVal)
    oObj.setSpinSize(oldVal+20)
    newVal = oObj.getSpinSize()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setSpinSize()", bOK)
    Test.MethodTested("getSpinSize()", bOK)

    Test.StartMethod("getDecimalDigits()")
    Test.StartMethod("setDecimalDigits()")
    bOK = true
    oldVal = oObj.getDecimalDigits()
    Out.Log("value before: "+oldVal)
    oObj.setDecimalDigits(oldVal+20)
    newVal = oObj.getDecimalDigits()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setDecimalDigits()", bOK)
    Test.MethodTested("getDecimalDigits()", bOK)

    Test.StartMethod("isStrictFormat()")
    Test.StartMethod("setStrictFormat()")
    bOK = true
    oldVal = oObj.isStrictFormat()
    Out.Log("value before: "+oldVal)
    if (oldVal) then 
        oObj.setStrictFormat(false)
    else
        oObj.setStrictFormat(true)
    endif
    newVal = oObj.isStrictFormat()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setStrictFormat()", bOK)
    Test.MethodTested("isStrictFormat()", bOK)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
