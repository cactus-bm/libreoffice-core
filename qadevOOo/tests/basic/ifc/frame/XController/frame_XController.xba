<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="frame_XController" script:language="StarBasic">


'*************************************************************************
'
'   OpenOffice.org - a multi-platform office productivity suite
'
'   $RCSfile: frame_XController.xba,v $
'
'   $Revision: 1.2 $
'
'   last change: $Author: rt $ $Date: 2005-09-08 18:48:12 $
'
'   The Contents of this file are made available subject to
'   the terms of GNU Lesser General Public License Version 2.1.
'
'
'     GNU Lesser General Public License Version 2.1
'     =============================================
'     Copyright 2005 by Sun Microsystems, Inc.
'     901 San Antonio Road, Palo Alto, CA 94303, USA
'
'     This library is free software; you can redistribute it and/or
'     modify it under the terms of the GNU Lesser General Public
'     License version 2.1, as published by the Free Software Foundation.
'
'     This library is distributed in the hope that it will be useful,
'     but WITHOUT ANY WARRANTY; without even the implied warranty of
'     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
'     Lesser General Public License for more details.
'
'     You should have received a copy of the GNU Lesser General Public
'     License along with this library; if not, write to the Free Software
'     Foundation, Inc., 59 Temple Place, Suite 330, Boston,
'     MA  02111-1307  USA
'
'*************************************************************************
'*************************************************************************



'*************************************************************************
' This Interface/Service test depends on the following GLOBAL variables,
' which must be specified in the object creation:

'     - Global oFrameToAttach As Object
'     - Global oModelToAttach As Object
'     - Global bHasNoViewData As Boolean
'     - Global oObjToSuspend As Object
'     - Global bHasNoModel As Boolean

'*************************************************************************





Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.frame.XController
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean

    Test.StartMethod("getViewData()")
    bOK = true
    if (bHasNoViewData) then
    	Out.Log("This object has no ViewData - nothing to test")
    else
    	oViewData = oObj.getViewData()
    	bOK = bOK AND NOT isNULL(oViewData)
    end if
    Test.MethodTested("getViewData()", bOK)

    Test.StartMethod("restoreViewData()")
    bOK = true
    if (bHasNoViewData) then
    	Out.Log("This object has no ViewData - nothing to test")
    else
	    oObj.restoreViewData(oViewData)
    end if
    Test.MethodTested("restoreViewData()", bOK)

    Test.StartMethod("getFrame()")
    bOK = true
    oFrame = oObj.getFrame()
    bOK = bOK AND hasUnoInterfaces(oFrame, "com.sun.star.frame.XFrame")
    Test.MethodTested("getFrame()", bOK)

    Test.StartMethod("getModel()")
    bOK = true
    oModel = oObj.getModel()
    if (bHasNoModel) then
        bOK = bOK AND isNull(oModel)
        Out.Log("The object has no Model. Retunrned value must be NULL") 
    else
        bOK = bOK AND NOT isNull(oModel) AND hasUnoInterfaces(oModel, "com.sun.star.frame.XModel")
    end if
    Test.MethodTested("getModel()", bOK)

    Test.StartMethod("attachFrame()")
    bOK = true
    Dim attachedFrame As Object
    attachedFrame = oObj.getFrame()
    oFrameToAttach.Name = "XController"
    oObj.attachFrame(oFrameToAttach)
    bOK = bOK AND oObj.getFrame.Name = oFrameToAttach.Name
    ' return previous frame.
    oObj.attachFrame(attachedFrame)
    Test.MethodTested("attachFrame()", bOK)

    Test.StartMethod("attachModel()")
    bOK = true
    if bHasNoModel then
        Out.Log("The object has no Model. Nothing to test.") 
    else    
        oObj.attachModel(oModelToAttach)
        if isNull(oObj.getModel()) then
           Out.Log("The model is NULL after setModel() call")
           bOK = false
        else
            bOK = bOK AND oModelToAttach.location = oObj.getModel.location
        end if
    end if
    Test.MethodTested("attachModel()", bOK)

    Test.StartMethod("suspend()")
    bOK = true
    bOK = bOK AND oObjToSuspend.suspend(true)
    Test.MethodTested("suspend()", bOK)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
