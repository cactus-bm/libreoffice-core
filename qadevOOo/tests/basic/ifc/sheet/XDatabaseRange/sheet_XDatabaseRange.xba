<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="sheet_XDatabaseRange" script:language="StarBasic">


'*************************************************************************
'
'   OpenOffice.org - a multi-platform office productivity suite
'
'   $RCSfile: sheet_XDatabaseRange.xba,v $
'
'   $Revision: 1.2 $
'
'   last change: $Author: rt $ $Date: 2005-09-08 19:25:58 $
'
'   The Contents of this file are made available subject to
'   the terms of GNU Lesser General Public License Version 2.1.
'
'
'     GNU Lesser General Public License Version 2.1
'     =============================================
'     Copyright 2005 by Sun Microsystems, Inc.
'     901 San Antonio Road, Palo Alto, CA 94303, USA
'
'     This library is free software; you can redistribute it and/or
'     modify it under the terms of the GNU Lesser General Public
'     License version 2.1, as published by the Free Software Foundation.
'
'     This library is distributed in the hope that it will be useful,
'     but WITHOUT ANY WARRANTY; without even the implied warranty of
'     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
'     Lesser General Public License for more details.
'
'     You should have received a copy of the GNU Lesser General Public
'     License along with this library; if not, write to the Free Software
'     Foundation, Inc., 59 Temple Place, Suite 330, Boston,
'     MA  02111-1307  USA
'
'*************************************************************************
'*************************************************************************



' Be sure that all variables are dimensioned:
option explicit



Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.sheet.XDatabaseRange
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim oldDA, oSD, oFD, oID, oSTD As Object
    Dim newDA As New com.sun.star.table.CellRangeAddress

    Test.StartMethod("getDataArea()")
    Test.StartMethod("setDataArea()")
    bOK = true
    oldDA = oObj.getDataArea()
    newDA.Sheet = 0
    newDA.StartColumn = 5
    newDA.StartRow = 6
    newDA.EndColumn = 10
    newDA.EndRow = 8
    oObj.setDataArea(newDA)
    bOK = bOK AND oObj.getDataArea().Sheet = newDA.Sheet
    bOK = bOK AND oObj.getDataArea().StartColumn = newDA.StartColumn
    bOK = bOK AND oObj.getDataArea().StartRow = newDA.StartRow
    bOK = bOK AND oObj.getDataArea().EndColumn = newDA.EndColumn
    bOK = bOK AND oObj.getDataArea().EndRow = newDA.EndRow
    oObj.setDataArea(oldDA)
    Test.MethodTested("getDataArea()", bOK)
    Test.MethodTested("setDataArea()", bOK)

    Test.StartMethod("getSortDescriptor()")
    bOK = true
    oSD = oObj.getSortDescriptor()
    bOK = bOK AND isArray(oSD)
    Test.MethodTested("getSortDescriptor()", bOK)

    Test.StartMethod("getFilterDescriptor()")
    bOK = true
    oFD = oObj.getFilterDescriptor()
    bOK = bOK AND hasUnoInterfaces(oFD, "com.sun.star.sheet.XSheetFilterDescriptor")
    Test.MethodTested("getFilterDescriptor()", bOK)

    Test.StartMethod("getSubTotalDescriptor()")
    bOK = true
    oSTD = oObj.getSubTotalDescriptor()
    bOK = bOK AND hasUnoInterfaces(oSTD, "com.sun.star.sheet.XSubTotalDescriptor")
    Test.MethodTested("getSubTotalDescriptor()", bOK)

    Test.StartMethod("getImportDescriptor()")
    bOK = true
    oID = oObj.getImportDescriptor()
    bOK = bOK AND isArray(oID)
    Test.MethodTested("getImportDescriptor()", bOK)

    Test.StartMethod("refresh()")
    bOK = true
    oObj.refresh()
    Test.MethodTested("refresh()", bOK)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
