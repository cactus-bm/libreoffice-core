<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="sheet_XDataPilotDescriptor" script:language="StarBasic">


'*************************************************************************
'
'   OpenOffice.org - a multi-platform office productivity suite
'
'   $RCSfile: sheet_XDataPilotDescriptor.xba,v $
'
'   $Revision: 1.2 $
'
'   last change: $Author: rt $ $Date: 2005-09-08 19:24:49 $
'
'   The Contents of this file are made available subject to
'   the terms of GNU Lesser General Public License Version 2.1.
'
'
'     GNU Lesser General Public License Version 2.1
'     =============================================
'     Copyright 2005 by Sun Microsystems, Inc.
'     901 San Antonio Road, Palo Alto, CA 94303, USA
'
'     This library is free software; you can redistribute it and/or
'     modify it under the terms of the GNU Lesser General Public
'     License version 2.1, as published by the Free Software Foundation.
'
'     This library is distributed in the hope that it will be useful,
'     but WITHOUT ANY WARRANTY; without even the implied warranty of
'     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
'     Lesser General Public License for more details.
'
'     You should have received a copy of the GNU Lesser General Public
'     License along with this library; if not, write to the Free Software
'     Foundation, Inc., 59 Temple Place, Suite 330, Boston,
'     MA  02111-1307  USA
'
'*************************************************************************
'*************************************************************************



' Be sure that all variables are dimensioned:
option explicit



Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.sheet.XDataPilotDescriptor
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK, bOK1 As Boolean
    Dim Tag, oldTag As String
    Dim oldRange, newRange, FD As Object
    Dim Range As New com.sun.star.table.CellRangeAddress
    Dim Fields() As Object

    Test.StartMethod("getTag()")
    bOK = true
    bOK = bOK AND NOT isNULL(oObj.getTag())
    Test.MethodTested("getTag()", bOK)

    Test.StartMethod("setTag()")
    bOK = true
    Tag = cIfcShortName
    oldTag = oObj.getTag()
    oObj.SetTag(Tag)
    bOK = bOK AND (oldTag &lt;&gt; oObj.getTag())
    oObj.setTag(oldTag)
    Test.MethodTested("setTag()", bOK)

    Test.StartMethod("getSourceRange()")
    bOK = true
    bOK = bOK AND NOT isNULL(oObj.getSourceRange())
    Test.MethodTested("getSourceRange()", bOK)

    Test.StartMethod("setSourceRange()")
    bOK = true
    Range.Sheet = 0
    Range.StartColumn = 1
    Range.StartRow = 1
    Range.EndColumn = 4
    Range.EndRow = 4

    oldRange = oObj.getSourceRange
    oObj.setSourceRange(Range)
    newRange = oObj.getSourceRange
    bOK1 = false
    bOK1 = bOK1 OR newRange.Sheet &lt;&gt; oldRange.Sheet
    bOK1 = bOK1 OR newRange.StartColumn &lt;&gt; oldRange.StartColumn
    bOK1 = bOK1 OR newRange.EndColumn &lt;&gt; oldRange.EndColumn
    bOK1 = bOK1 OR newRange.StartRow &lt;&gt; oldRange.StartRow
    bOK1 = bOK1 OR newRange.EndRow &lt;&gt; oldRange.EndRow
    bOK = bOK AND bOK1

    oObj.setSourceRange(oldRange)
    Test.MethodTested("setSourceRange()", bOK)

    Test.StartMethod("getFilterDescriptor()")
    bOK = true
    FD = oObj.getFilterDescriptor
    bOK = (NOT isNULL(FD)) AND (ubound(FD.getFilterFields) &gt; 0)
    Test.MethodTested("getFilterDescriptor()", bOK)
    
    Test.StartMethod("getDataPilotFields()")
    bOK = true
    Fields = oObj.getDataPilotFields
    bOK = NOT isNULL(Fields)
    Test.MethodTested("getDataPilotFields()", bOK)

    Test.StartMethod("getColumnFields()")
    bOK = true
    Fields = oObj.getColumnFields
    bOK = NOT isNULL(Fields)
    Test.MethodTested("getColumnFields()", bOK)

    Test.StartMethod("getRowFields()")
    bOK = true
    Fields = oObj.getRowFields
    bOK = NOT isNULL(Fields)
    Test.MethodTested("getRowFields()", bOK)

    Test.StartMethod("getPageFields()")
    bOK = true
    Fields = oObj.getPageFields()
    bOK = NOT isNULL(Fields)
    Test.MethodTested("getPageFields()", bOK)

    Test.StartMethod("getDataFields()")
    bOK = true
    Fields = oObj.getDataFields
    bOK = bOK AND NOT isNULL(Fields)
    Test.MethodTested("getDataFields()", bOK)

    Test.StartMethod("getHiddenFields()")
    bOK = true
    Fields = oObj.getHiddenFields()
    bOK = NOT isNULL(Fields)
    Test.MethodTested("getHiddenFields()", bOK)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
