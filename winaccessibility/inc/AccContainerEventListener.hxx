/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __ACCCONTAINEREVENTLISTENERHXX
#define __ACCCONTAINEREVENTLISTENERHXX

#include <stdio.h>
#include "AccEventListener.hxx"
#include <com/sun/star/accessibility/XAccessibleEventListener.hpp>
#include <com/sun/star/accessibility/XAccessible.hpp>


/**
 * AccContainerEventListener is inherited from AccEventListener. It handles the evnets
 * generated by container controls. The accessible roles are: CANVAS, COMBO_BOX, DOCUMENT,
 * EMBEDDED_OBJECT, END_NOTE, FILLER, FOOTNOTE, FOOTER, GRAPHIC, HEADER, LAYERED_PANE,
 * MENU_BAR, POPUP_MENU, OPTION_PANE, PAGE_TAB, PAGE_TAB_LIST, PANEL, SCROLL_PANE, SPLIT_PANE,
 * STATUS_BAR, TABLE_CELL, TEXT_FRAME, TOOL_BAR, VIEW_PORT.
 * It defines the procedure of specific event handling related with containsers and provides
 * the detailed support for some related methods.
 */
class AccContainerEventListener: public AccEventListener
{
public:
    AccContainerEventListener(com::sun::star::accessibility::XAccessible* pAcc, AccObjectManagerAgent* Agent);
    virtual ~AccContainerEventListener();

    //AccessibleEventListener
    virtual void SAL_CALL notifyEvent( const ::com::sun::star::accessibility::AccessibleEventObject& aEvent ) throw (::com::sun::star::uno::RuntimeException);

    //for child changed event
    virtual void SAL_CALL handleChildChangedEvent(
            css::uno::Any oldValue, css::uno::Any newValue);

    //for selection changed event
    virtual void SAL_CALL handleSelectionChangedEvent(
            const css::uno::Any &oldValue, const css::uno::Any &newValue);

    //for all children changed event
    virtual void SAL_CALL handleAllChildrenChangedEvent();

    //for text changed event
    virtual void SAL_CALL handleTextChangedEvent(
            css::uno::Any oldValue, css::uno::Any newValue);
    virtual void SAL_CALL handleStateChangedEvent(
            css::uno::Any oldValue, css::uno::Any newValue);

    //for visible data changed event
    virtual void SAL_CALL handleVisibleDataChangedEvent();

    //for bound rect changed event
    virtual void SAL_CALL handleBoundrectChangedEvent();

    //for value changed event
    virtual void SAL_CALL handleValueChangedEvent(
            css::uno::Any oldValue, css::uno::Any newValue);

    //state changed
    virtual void SAL_CALL setComponentState(short state, bool enable);
    virtual void SAL_CALL fireStatePropertyChange(short state, bool set
                                                     );
    virtual void SAL_CALL fireStateFocusdChange(bool enable);
    virtual bool SAL_CALL IsEditable(
        css::uno::Reference<css::accessibility::XAccessibleContext> xContext);

    // update all children's state
    void SAL_CALL UpdateAllChildrenState( com::sun::star::accessibility::XAccessible* pXAccessible );

    bool NotifyChildEvent(short nWinEvent, const css::uno::Any &Value);

    virtual void handleSelectionChangedAddEvent(
            const css::uno::Any &oldValue, const css::uno::Any &newValue);
    virtual void handleSelectionChangedRemoveEvent(
            const css::uno::Any &oldValue, const css::uno::Any &newValue);
    virtual void handleSelectionChangedWithinEvent(
            const css::uno::Any &oldValue, const css::uno::Any &newValue);

    virtual void handlePageChangedEvent(
            const css::uno::Any &oldValue, const css::uno::Any &newValue);

    virtual void handleSectionChangedEvent(
            const css::uno::Any &oldValue, const css::uno::Any &newValue);
    virtual void handleColumnChangedEvent(
            const css::uno::Any &oldValue, const css::uno::Any &newValue);
    //IAccessibility2 Implementation 2009-----
    //for name changed event
    virtual void SAL_CALL handleNameChangedEvent(css::uno::Any name);
    //-----IAccessibility2 Implementation 2009
};

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
