/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __ACCCOMPONENTEVENTLISTENER_HXX
#define __ACCCOMPONENTEVENTLISTENER_HXX

#include <stdio.h>
#include "AccEventListener.hxx"
#include <com/sun/star/accessibility/XAccessibleEventListener.hpp>
#include <com/sun/star/accessibility/XAccessible.hpp>


/**
 * AccComponentEventListener is inherited from AccEventListener. It handles the evnets
 * generated by component controls. The accessible roles are: CHECK_BOX, ICON, LABEL,
 * MENU_ITEM, PUSH_BUTTON, RADIO_BUTTON, SCROLL_BAR, SEPARATOR, TOGGLE_BUTTON, TOOL_TIP, SPIN_BOX.
 * It defines the procedure of specific event handling related with components and provides
 * the detailed support for some related methods.
 */
class AccComponentEventListener: public AccEventListener
{
private:
    static FILE *output, *output2, *output3, *outacc;//used for debugging
public:
    AccComponentEventListener(com::sun::star::accessibility::XAccessible* pAcc, AccObjectManagerAgent* Agent);
    virtual ~AccComponentEventListener();

    //AccessibleEventListener
    virtual void SAL_CALL notifyEvent( const ::com::sun::star::accessibility::AccessibleEventObject& aEvent ) throw (::com::sun::star::uno::RuntimeException);

    //for value changed event
    virtual void SAL_CALL handleValueChangedEvent(
            css::uno::Any oldValue, css::uno::Any newValue);

    //for action changed event
    virtual void SAL_CALL handleActionChangedEvent();

    //for text changed event
    virtual void SAL_CALL handleTextChangedEvent(
            css::uno::Any oldValue, css::uno::Any newValue);

    //for caret changed event
    virtual void SAL_CALL handleCaretChangedEvent(
            css::uno::Any oldValue, css::uno::Any newValue);

    //for visible data changed event
    virtual void SAL_CALL handleVisibleDataChangedEvent();

    //for bound rect changed event
    virtual void SAL_CALL handleBoundrectChangedEvent();

    virtual void SAL_CALL setComponentState(short state, bool enable);
    virtual void SAL_CALL fireStatePropertyChange(short state, bool set
                                                     );
    virtual void SAL_CALL fireStateFocusdChange(bool enable);

    void handleSelectionChangedEvent();

    //add TEXT_SELECTION_CHANGED event
    void handleTextSelectionChangedEvent();
};

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
