# @configure_input@

SHELL=/usr/bin/env bash

ifeq (@CROSS_COMPILING@,YES)
CROSS_TOOLSET_RULE:=cross-build-toolset
else
CROSS_TOOLSET_RULE:=
endif

ifeq ($(filter all check unitcheck,$(MAKECMDGOALS)),)
gb_MAKETARGET=build
else
# fail early
gb_MAKETARGET=all
endif

.PHONY : build dev-install all cross-build-toolset install distro-pack-install clean distclean findunusedcode

build: Makefile dmake/dmake@EXEEXT_FOR_BUILD@ src.downloaded $(CROSS_TOOLSET_RULE)
	@. ./Env.Host.sh && \
		cd instsetoo_native && \
		gb_MAKETARGET=$(gb_MAKETARGET) build.pl -P@BUILD_NCPUS@ --all -- -P@BUILD_MAX_JOBS@

dev-install: build
	@. ./Env.Host.sh && \
	cd smoketestoo_native && \
		build.pl -P@BUILD_NCPUS@ --all:instsetoo_native -- -P@BUILD_MAX_JOBS@ && \
		cd @abs_builddir@ && ln -s $$SOLARVER/$$INPATH/installation/opt/ install && \
		echo "" && \
	$$SOLARENV/bin/linkoo $$SRC_ROOT/install $$SRC_ROOT && \
	install-gdb-printers -a "$$SOLARVER/$$INPATH/installation/opt" -L && \
	echo && echo "Developer installation finished, you can now execute:" && echo && \
	if test `uname -s` = Darwin; then \
		echo open install/LibreOffice.app; \
	else \
		echo "cd @abs_builddir@/install/program" && \
		echo ". ./ooenv" && \
		echo "./soffice.bin"; \
	fi

check : allcheck
	@true

%check:
	@. ./Env.Host.sh && $$GNUMAKE -f "$$SRC_ROOT"/GNUmakefile.mk -r \
			$(if @VERBOSE@,,-s) --jobs="$(if \
			   $(CHECK_PARALLELISM),$(CHECK_PARALLELISM),@GMAKE_PARALLELISM@)" \
			$(patsubst allcheck,check,$@)

all: build unitcheck

cross-build-toolset:
	@. ./Env.Build.sh && \
	cd cross_toolset && \
	build.pl -P@BUILD_NCPUS@ --all -- -P@BUILD_MAX_JOBS@

install: build
	@. ./Env.Host.sh && \
	echo "Installing in @PREFIXDIR@..." && \
	ooinstall "@PREFIXDIR@" && \
	echo "" && \
	echo "Installation finished, you can now execute:" && \
	echo "@PREFIXDIR@/program/soffice" && \
	install-gdb-printers -a "@PREFIXDIR@"

distro-pack-install: install
	./bin/distro-install-clean-up
	./bin/distro-install-desktop-integration
	./bin/distro-install-sdk
	./bin/distro-install-file-lists

distclean:
	-rm config.cache
	-rm config.log
ifeq (@BUILD_DMAKE@,YES)
	-$(GNUMAKE) -C dmake distclean
endif

clean:
	. ./Env.Host.sh && \
	rm -rf */$$INPATH && \
	rm -rf solver/$$INPATH && \
	rm -rf workdir && \
	rm -rf install
ifeq (@BUILD_DMAKE@,YES)
	. ./Env.Host.sh && \
	(if [ -f dmake/Makefile ] ; then $$GNUMAKE -C dmake clean; fi) && \
	rm -f solenv/*/bin/dmake*
endif
ifeq (@CROSS_COMPILING@,YES)
	. ./Env.Host.sh && \
	rm -rf */$$INPATH_FOR_BUILD && \
	rm -rf solver/$$INPATH_FOR_BUILD
endif

dmake/dmake@EXEEXT_FOR_BUILD@:
	./bootstrap

src.downloaded: ooo.lst download
ifeq (@DO_FETCH_TARBALLS@,YES)
	@. ./Env.Host.sh && \
	$$SRC_ROOT/download $$SRC_ROOT/ooo.lst && touch $@
else
	@echo "Automatic fetching of external tarballs is disabled."
endif

fetch: src.downloaded

Makefile: autogen.lastrun configure.in ooo.lst.in set_soenv.in Makefile.in
	./autogen.sh

id:
	@. ./Env.Host.sh && \
		create-ids

tags:
	@. ./Env.Host.sh && \
		create-tags

docs:
	@. ./Env.Host.sh && \
		mkdocs.sh $$SRC_ROOT/docs $$SOLARENV/inc/doxygen.cfg

findunusedcode:
# experimental callcatcher target
# http://www.skynet.ie/~caolan/Packages/callcatcher.html
	@which callcatcher > /dev/null 2>&1 || \
	 (echo "callcatcher not installed" && false)
	@. ./Env.Host.sh && \
	   source <(sed -e s,$$INPATH,callcatcher,g ./Env.Host.sh) && \
	   . ./solenv/bin/callcatchEnv.Set.sh && \
	   cd instsetoo_native && \
	   build.pl -P@BUILD_NCPUS@ --all -- -P@BUILD_MAX_JOBS@
	@. ./Env.Host.sh && \
	   source <(sed -e s,$$INPATH,callcatcher,g ./Env.Host.sh) && \
	   callanalyse \
		   $$WORKDIR/LinkTarget/*/* \
		   */$$OUTPATH/bin/* \
		   */$$OUTPATH/lib/* > unusedcode.all
#because non-c++ symbols could be dlsymed lets make a list of class level
#unused methods which don't require much effort to determine if they need
#to be just removed, or put behind appropiate platform or debug level ifdefs
	@grep ::.*\( unusedcode.all | grep -v ^cppu:: > unusedcode.easy

#as long as we are not completely gbuildified we need to explicitly depend on the build/install
unitcheck: build
subsequentcheck: dev-install
