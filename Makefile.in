# @configure_input@

SHELL=/usr/bin/env bash

ifeq (@CROSS_COMPILING@,YES)
CROSS_TOOLSET_RULE:=cross-build-toolset
else
CROSS_TOOLSET_RULE:=
endif

.PHONY : build dev-install all cross-build-toolset install distro-pack-install clean clean-host clean-build distclean findunusedcode bootstrap

define forward_to_gbuild
@GNUMAKE@ -f $(dir $(realpath $(firstword $(MAKEFILE_LIST))))/GNUmakefile.mk \
	$(if @VERBOSE@,,-s) \
	--jobs="@GMAKE_PARALLELISM@" \
	$(patsubst allcheck,check,$(1))
endef

all: build unitcheck

check : allcheck
	@true

install: build
	@. ./Env.Host.sh && \
	echo "Installing in @INSTALLDIR@..." && \
	ooinstall "@INSTALLDIR@" && \
	echo "" && \
	echo "Installation finished, you can now execute:" && \
	echo "@INSTALLDIR@/program/soffice"

distclean: clean
ifeq (@BUILD_DMAKE@,YES)
	-test -f dmake/Makefile && $(MAKE) -C dmake distclean
endif
	rm -rf Env.Host.sh Makefile aclocal.m4 autogen.lastrun autom4te.cache \
	bin/repo-list build_env config.log config.status configure \
	desktop/scripts/soffice.sh ooo.lst post_download post_download.log \
	set_soenv set_soenv.last set_soenv.stamp src.downloaded warn

clean: clean-host clean-build

clean-host:
	. ./Env.Host.sh && \
	rm -rf */$$INPATH && \
	rm -rf install

clean-build:
ifeq (@BUILD_DMAKE@,YES)
	. ./Env.Host.sh && \
	(if [ -f dmake/Makefile ] ; then $$GNUMAKE -C dmake clean; fi) && \
	rm -f solenv/*/bin/dmake*
endif
ifeq (@CROSS_COMPILING@,YES)
	. ./Env.Host.sh && \
	rm -rf */$$INPATH_FOR_BUILD
endif

ifeq (@DO_FETCH_TARBALLS@,YES)
fetch: src.downloaded
	$(call forward_to_gbuild,$@)
else
fetch:
	@echo "Automatic fetching of external tarballs is disabled."
endif

ifeq ($(filter clean distclean,$(MAKECMDGOALS)),)
Makefile: autogen.lastrun configure.in ooo.lst.in set_soenv.in Makefile.in
	./autogen.sh
endif

bootstrap:
	$(call forward_to_gbuild,$@)

debugrun:
	@$(call forward_to_gbuild,$@)

%check:
	@$(call forward_to_gbuild,$@)

distro-pack-install: install
	@$(call forward_to_gbuild,$@)

id:
	@$(call forward_to_gbuild,$@)

tags:
	@$(call forward_to_gbuild,$@)

docs:
	@$(call forward_to_gbuild,$@)

build: Makefile bootstrap src.downloaded $(CROSS_TOOLSET_RULE)
	@$(call forward_to_gbuild,$@)

dev-install: Makefile bootstrap src.downloaded $(CROSS_TOOLSET_RULE)
	$(call forward_to_gbuild,$@)

cross-build-toolset:
	$(call forward_to_gbuild,$@)

findunusedcode:
# experimental callcatcher target
# http://www.skynet.ie/~caolan/Packages/callcatcher.html
	@which callcatcher > /dev/null 2>&1 || \
	 (echo "callcatcher not installed" && false)
	@. ./Env.Host.sh && \
           mkdir -p $$SRC_ROOT/solenv/callcatcher/bin && \
	   ln -sf $$SRC_ROOT/solenv/$$INPATH/bin/dmake \
                  $$SRC_ROOT/solenv/callcatcher/bin/dmake && \
	   source <(sed -e s,$$INPATH,callcatcher,g ./Env.Host.sh) && \
	   . ./solenv/bin/callcatchEnv.Set.sh && \
	   cd instsetoo_native && \
	   build.pl -P@BUILD_NCPUS@ --all -- -P@BUILD_MAX_JOBS@
	@. ./Env.Host.sh && \
	   source <(sed -e s,$$INPATH,callcatcher,g ./Env.Host.sh) && \
	   callanalyse \
		   $$WORKDIR/LinkTarget/*/* \
		   */$$OUTPATH/bin/* \
		   */$$OUTPATH/lib/* > unusedcode.all
#because non-c++ symbols could be dlsymed lets make a list of class level
#unused methods which don't require much effort to determine if they need
#to be just removed, or put behind appropiate platform or debug level ifdefs
	@grep ::.*\( unusedcode.all | grep -v ^cppu:: > unusedcode.easy

#as long as we are not completely gbuildified we need to explicitly depend on the build/install
unitcheck: build
subsequentcheck: dev-install
allcheck : dev-install
#debugrun : dev-install # disabled for now, this dep seems to poison the debugrun !?
