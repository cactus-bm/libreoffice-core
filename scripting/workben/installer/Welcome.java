package installer;

/*
 * Welcome.java
 *
 * Created on 04 July 2002, 15:43
 */

/**
 *
 * @author  mike
 */
import java.awt.event.*;
import javax.swing.*;
import java.io.*;
import java.net.*;
import java.util.Properties;

public class Welcome extends javax.swing.JPanel implements ActionListener {

    /** Creates new form Welcome */
    public Welcome(InstallWizard wizard) {
    this.wizard = wizard;
    setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        welcomePanel = new javax.swing.JPanel();
        area = new javax.swing.JTextArea();
    nextButtonEnable = true;
        
        setLayout(new java.awt.BorderLayout());
        
        welcomePanel.setLayout(new java.awt.BorderLayout());
        //area.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        area.setEditable(false);
        area.setLineWrap(true);
        //area.setText("\n \t Please ensure that you have exited from Office");
    
    String message = "\n \t Please ensure that you have exited from Office";
    String userDir = (String) System.getProperty( "user.dir" );
    boolean isValid = validateCurrentUserDir(userDir);
    if( !isValid ) {
        nextButtonEnable = false;
        message = "Please run Installer from the program directory in a valid Office installation";
        setUpWelcomePanel(message);
        return;
    }

    int programPosition = userDir.lastIndexOf("program");
    String offInstallPth = null;
    offInstallPth = userDir.substring( 0, programPosition );
    
    try {
        LogStream log = new LogStream( "SFrameworkInstall.log" );
                System.setErr(log);
        
                System.setOut(log);
    }
    catch( FileNotFoundException fnfe ) {
        String stackTrace = ExceptionTraceHelper.getTrace( fnfe );
        nextButtonEnable = false;
        message = "Error creating log file, please ensure you have write access to update office installation.\n";
        message += "Error Detail:\n" + stackTrace;
        setUpWelcomePanel(message);
        return;
        //fnfe.printStackTrace();   
    }
        wizard.storeLocation(offInstallPth);
    setUpWelcomePanel(message);
        
    }//GEN-END:initComponents

    private void setUpWelcomePanel(String message){
    area.setText( message );
        welcomePanel.add(area, java.awt.BorderLayout.CENTER);
        add(welcomePanel, java.awt.BorderLayout.CENTER);
    NavPanel nav = new NavPanel(wizard, false, nextButtonEnable, true, "", InstallWizard.FINAL);
    nav.setNextListener(this);
    add(nav, java.awt.BorderLayout.SOUTH);
        
    //Banner br = new Banner();
    //add(br, java.awt.BorderLayout.WEST);
    }
    
    
    private boolean validateCurrentUserDir(String userDir){

    
    
    Properties props = null;
    
        File fileVersions = null;
    try
    {
            fileVersions = InstUtil.buildSversionLocation();
    }
    catch(IOException eFnF)
    {
            System.err.println("Cannot find sversion.ini/.sversionrc");
            JOptionPane.showMessageDialog(this, eFnF.getMessage(), "File not Found", JOptionPane.ERROR_MESSAGE);
            wizard.exitForm(null);
    }
        
        try {
            props = InstUtil.getOfficeVersions(fileVersions);
        }
        catch (IOException eIO) {
            //Message about no installed versions found
            System.err.println("Failed to parse SVERSION");
            JOptionPane.showMessageDialog(this, "There was a problem reading from the Office settings file.", "Parse Error", JOptionPane.ERROR_MESSAGE);            
            wizard.exitForm(null);
        }


    boolean versionMatch = false;
    for( int i = 0; i < versions.length; i++ ) {
        String key = versions[i];
        String progPath = ( String )props.getProperty( key );
        if ( progPath != null ){
            String os = System.getProperty("os.name");
    
            if (os.indexOf("Windows") != -1) {
                progPath = progPath  +  System.getProperty("file.separator") + "program";
            }
            else
            {
                progPath = progPath  +  "program";              
            }
            
            File tmpFile = new File(progPath+ "oostubversion.txt");
            try{
            tmpFile.createNewFile();
            
            //System.out.println(new File(userDir).toURL().toString());
            //System.out.println("versionMatch: progPath " + progPath + " userDir " + userDir + " iMatch " + iMatch);
            if( new File(userDir+ "oostubversion.txt").exists())
            {
                versionMatch = true;
                break;
            }
            }
            catch( IOException e)
            {
                // Fail silently
            }
            tmpFile.delete();
            
            /*
                        URL url = new URL("file://" + parts[1].trim());
            String opSys =System.getProperty("os.name");
            if (opSys.indexOf("Windows")!=-1){
                System.out.println( "InstUtil URLDecoder path: " + URLDecoder.decode( url.getPath() ) );            
            */
        }
    }   
    return versionMatch;
    }
    
    
    
    public java.awt.Dimension getPreferredSize() {
        return new java.awt.Dimension(InstallWizard.DEFWIDTH, InstallWizard.DEFHEIGHT);
    }    

    public void actionPerformed(ActionEvent ev)
    {
        //Perform next actions here...
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel welcomePanel;
    private javax.swing.JTextArea area;
    private InstallWizard wizard;
    private static final String [] versions = {"OpenOffice.org 643", "StarOffice 6.1"}; 
    private boolean nextButtonEnable = true;

    // End of variables declaration//GEN-END:variables
}
