<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module-description PUBLIC "-//StarOffice//DTD ComponentDescription 1.0//EN" "module-description.dtd">

<module-description xmlns:xlink="http://www.w3.org/1999/xlink">

    <module-name> fwk </module-name>

    <component-description>
        <author> Andreas Schluens </author>
        <name> com.sun.star.comp.framework.Frame </name>
        <description>
            A frame support influencing of his subtree, find of subframes, activate- and deactivate-mechanism as well as
            set/get of a frame window, component or controller.
        </description>
        <loader-name> com.sun.star.loader.SharedLibrary </loader-name>
        <language> c++ </language>
        <status value="final"/>
        <supported-service> com.sun.star.frame.Frame </supported-service>
    </component-description>

    <component-description>
        <author> Andreas Schluens </author>
        <name> com.sun.star.comp.framework.Desktop </name>
        <description>
            A desktop environment contains tasks with one or more frames in which components can be loaded.
            The desktop himself is the root of the frame hierarchy.
        </description>
        <loader-name> com.sun.star.loader.SharedLibrary </loader-name>
        <language> c++ </language>
        <status value="final"/>
        <supported-service> com.sun.star.frame.Desktop </supported-service>
    </component-description>

    <component-description>
        <author> Andreas Schluens </author>
        <name> com.sun.star.comp.framework.DocumentProperties </name>
        <description>
            This service grants access to document-specific information, like
            the author, creation date and user fields, directly from document
            files without loading the whole document.
        </description>
        <loader-name> com.sun.star.loader.SharedLibrary </loader-name>
        <language> c++ </language>
        <status value="final"/>
        <supported-service> com.sun.star.document.StandaloneDocumentInfo </supported-service>
    </component-description>

    <component-description>
        <author> Andreas Schluens </author>
        <name> com.sun.star.comp.framework.URLTransformer </name>
        <description>
            Helps to split up a string containing a URL into its
            structural parts and assembles the parts into a single string.
        </description>
        <loader-name> com.sun.star.loader.SharedLibrary </loader-name>
        <language> c++ </language>
        <status value="final"/>
        <supported-service> com.sun.star.util.URLTransformer </supported-service>
    </component-description>

    <component-description>
        <author> Andreas Schluens </author>
        <name> com.sun.star.comp.framework.JobExecutor </name>
        <description>
            It implements a generic job execution service, which can start
            registered uno services on triggered events, control her lifetime
            and handle there own configuration.
        </description>
        <loader-name> com.sun.star.loader.SharedLibrary </loader-name>
        <language> c++ </language>
        <status value="final"/>
        <supported-service> com.sun.star.task.JobExecutor </supported-service>
    </component-description>

    <component-description>
        <author> Andreas Schluens </author>
        <name> com.sun.star.comp.framework.SoundHandler </name>
        <description>
            Implements a handler service to detect and/or play audio files.
            supported formats: wav/au
        </description>
        <loader-name> com.sun.star.loader.SharedLibrary </loader-name>
        <language> c++ </language>
        <status value="final"/>
        <supported-service> com.sun.star.document.Handler </supported-service>
    </component-description>

    <component-description>
        <author> Andreas Schluens </author>
        <name> com.sun.star.comp.framework.DispatchRecorderSupplier </name>
        <description>
            This supplier is available on the servcice Frame as property "DispatchRecorderSupplier".
            It provides access on the currently set DispatchRecorder of this Frame
            and some additional functionality to make macro recording easy.
        </description>
        <loader-name> com.sun.star.loader.SharedLibrary </loader-name>
        <language> c++ </language>
        <status value="final"/>
        <supported-service> com.sun.star.frame.DispatchRecorderSupplier </supported-service>
    </component-description>

    <component-description>
        <author> Andreas Schluens </author>
        <name> com.sun.star.comp.framework.DispatchRecorder </name>
        <description>
            Implements a recorder object which can record XDIspatch::dispatch() calls
            and generate basic script code from that.
        </description>
        <loader-name> com.sun.star.loader.SharedLibrary </loader-name>
        <language> c++ </language>
        <status value="final"/>
        <supported-service> com.sun.star.frame.DispatchRecorder </supported-service>
    </component-description>

    <component-description>
        <author> Andreas Schluens </author>
        <name> com.sun.star.comp.framework.MailToDispatcher </name>
        <description>
            It's a dispatch object which can handle "mailto:" URLs.
            This service is registered in configuration for this protocol
            and wil be used automaticly by the generic dispatch implementation
            of a Frame. It should start an external mail application and forward
            this request to it.
        </description>
        <loader-name> com.sun.star.loader.SharedLibrary </loader-name>
        <language> c++ </language>
        <status value="final"/>
        <supported-service> com.sun.star.frame.ProtocolHandler </supported-service>
    </component-description>

    <component-description>
        <author> Andreas Schluens </author>
        <name> com.sun.star.comp.framework.ServiceHandler </name>
        <description>
            It's a special dispatch object which is registered for "service:*" URL pattern
            and will be automaticly used by the framework dispatch mechanism if such URL occured.
            His job is to create any registered uno components which must be coded inside
            dispatched URL (may with some optional given parameters). After that such created
            service must be hold his self alive. Such mechanism can be usefull for UI components
            (e.g. Dialogs, Wizards) only.
        </description>
        <loader-name> com.sun.star.loader.SharedLibrary </loader-name>
        <language> c++ </language>
        <status value="final"/>
        <supported-service> com.sun.star.frame.ProtocolHandler </supported-service>
    </component-description>

    <project-build-dependency>  cppu        </project-build-dependency>
    <project-build-dependency>  cppuhelper  </project-build-dependency>
    <project-build-dependency>  vos         </project-build-dependency>
    <project-build-dependency>  sal         </project-build-dependency>
    <project-build-dependency>  tools       </project-build-dependency>
    <project-build-dependency>  svtools     </project-build-dependency>
    <project-build-dependency>  toolkit     </project-build-dependency>
    <project-build-dependency>  sv          </project-build-dependency>
    <project-build-dependency>  comphelper  </project-build-dependency>
    <project-build-dependency>  unotools    </project-build-dependency>
    <project-build-dependency>  ucbhelper   </project-build-dependency>
    <project-build-dependency>  svl         </project-build-dependency>
    <project-build-dependency>  sot         </project-build-dependency>

    <runtime-module-dependency> cppu2       </runtime-module-dependency>
    <runtime-module-dependency> cppuhelper  </runtime-module-dependency>
    <runtime-module-dependency> vos2$(COM)  </runtime-module-dependency>
    <runtime-module-dependency> sal2        </runtime-module-dependency>
    <runtime-module-dependency> tl          </runtime-module-dependency>
    <runtime-module-dependency> svt         </runtime-module-dependency>
    <runtime-module-dependency> svl         </runtime-module-dependency>
    <runtime-module-dependency> tk          </runtime-module-dependency>
    <runtime-module-dependency> sv          </runtime-module-dependency>
    <runtime-module-dependency> comphelp2   </runtime-module-dependency>
    <runtime-module-dependency> utl         </runtime-module-dependency>
    <runtime-module-dependency> ucb         </runtime-module-dependency>
    <runtime-module-dependency> sot         </runtime-module-dependency>

</module-description>
