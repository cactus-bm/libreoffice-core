
// This file was generated by: ./generatePresetsCXX.pl

// Please, DO NOT EDIT.

// We mean it.

#include <oox/drawingml/customshapeproperties.hxx>
#include <oox/token/tokenmap.hxx>
#include <com/sun/star/awt/Rectangle.hpp>
#include <com/sun/star/awt/Size.hpp>
#include <com/sun/star/drawing/EnhancedCustomShapeAdjustmentValue.hpp>
#include <com/sun/star/drawing/EnhancedCustomShapeSegment.hpp>
#include <com/sun/star/drawing/EnhancedCustomShapeParameterPair.hpp>
#include <com/sun/star/drawing/EnhancedCustomShapeParameterType.hpp>

using namespace ::com::sun::star;
using namespace ::com::sun::star::beans;
using namespace ::com::sun::star::drawing;
using namespace ::com::sun::star::uno;

namespace oox { namespace drawingml {

namespace
{
class ShapeCtrapezoid : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (1);
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "50000*logwidth/?0 ",
            "if(0-$0 ,0,if(?1 -$0 ,$0 ,?1 ))",
            "?0 *?2 /200000",
            "?0 *?2 /100000",
            "logwidth+0-?4 ",
            "logwidth+0-?3 ",
            "logwidth/3",
            "?7 *?2 /?1 ",
            "logheight/3",
            "?9 *?2 /?1 ",
            "logwidth+0-?8 ",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 14
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 14
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        8, 10
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        11, 14
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-trapezoid"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCtriangle : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (1);
        {
            Any aAny ((sal_Int32) 50000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(100000-$0 ,$0 ,100000))",
            "logwidth*?0 /200000",
            "logwidth*?0 /100000",
            "logwidth/2",
            "?1 +?3 -0",
            "logheight/2",
            "logheight",
            "logwidth"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 100000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 6
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 6
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,2,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        1, 5
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        4, 6
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-triangle"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCupArrow : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 50000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 50000);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "100000*logheight/?0 ",
            "if(0-$0 ,0,if(100000-$0 ,$0 ,100000))",
            "if(0-$1 ,0,if(?1 -$1 ,$1 ,?1 ))",
            "?0 *?3 /100000",
            "0+?4 -0",
            "logwidth*?2 /200000",
            "logwidth/2",
            "?7 +0-?6 ",
            "?7 +?6 -0",
            "logwidth/2",
            "?8 *?4 /?10 ",
            "?5 +0-?11 ",
            "logheight",
            "logwidth"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 13
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 100000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 5
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 5
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    7, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 5
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 5
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 13
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 13
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 5
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,6,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        8, 12
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        9, 13
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-upArrow"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCupArrowCallout : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (4);
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [2].Value = aAny;
            aAdjSequence [2].Name = "adj3";
        }
        {
            Any aAny ((sal_Int32) 64977);
            aAdjSequence [3].Value = aAny;
            aAdjSequence [3].Name = "adj4";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "50000*logwidth/?0 ",
            "if(0-$1 ,0,if(?1 -$1 ,$1 ,?1 ))",
            "?2 *2/1",
            "if(0-$0 ,0,if(?3 -$0 ,$0 ,?3 ))",
            "100000*logheight/?0 ",
            "if(0-$2 ,0,if(?5 -$2 ,$2 ,?5 ))",
            "?6 *?0 /logheight",
            "100000+0-?7 ",
            "if(0-$3 ,0,if(?8 -$3 ,$3 ,?8 ))",
            "?0 *?2 /100000",
            "?0 *?4 /200000",
            "logwidth/2",
            "?12 +0-?10 ",
            "?12 +0-?11 ",
            "?12 +?11 -0",
            "?12 +?10 -0",
            "?0 *?6 /100000",
            "logheight*?9 /100000",
            "logheight+0-?18 ",
            "(?19 +logheight)/2",
            "logwidth",
            "logheight"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (4);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 17
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 3);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    13, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    21, 17
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 5);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 2);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [2] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 19
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 8);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 3);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [3] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    12, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    21, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    21, 22
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 22
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,10,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 19
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        21, 22
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-upArrowCallout"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCupDownArrow : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 50000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 50000);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "50000*logheight/?0 ",
            "if(0-$0 ,0,if(100000-$0 ,$0 ,100000))",
            "if(0-$1 ,0,if(?1 -$1 ,$1 ,?1 ))",
            "?0 *?3 /100000",
            "logheight+0-?4 ",
            "logwidth*?2 /200000",
            "logwidth/2",
            "?7 +0-?6 ",
            "?7 +?6 -0",
            "logwidth/2",
            "?8 *?4 /?10 ",
            "?4 +0-?11 ",
            "?5 +?11 -0",
            "logheight/2",
            "logheight",
            "logwidth"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 5
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 100000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 4
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    7, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 5
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 5
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 15
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 5
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 5
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 4
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,9,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        8, 12
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        9, 13
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-upDownArrow"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCupDownArrowCallout : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (4);
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [2].Value = aAny;
            aAdjSequence [2].Name = "adj3";
        }
        {
            Any aAny ((sal_Int32) 48123);
            aAdjSequence [3].Value = aAny;
            aAdjSequence [3].Name = "adj4";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "50000*logwidth/?0 ",
            "if(0-$1 ,0,if(?1 -$1 ,$1 ,?1 ))",
            "?2 *2/1",
            "if(0-$0 ,0,if(?3 -$0 ,$0 ,?3 ))",
            "50000*logheight/?0 ",
            "if(0-$2 ,0,if(?5 -$2 ,$2 ,?5 ))",
            "logheight/2",
            "?6 *?0 /?7 ",
            "100000+0-?8 ",
            "if(0-$3 ,0,if(?9 -$3 ,$3 ,?9 ))",
            "?0 *?2 /100000",
            "?0 *?4 /200000",
            "logwidth/2",
            "?13 +0-?11 ",
            "?13 +0-?12 ",
            "?13 +?12 -0",
            "?13 +?11 -0",
            "?0 *?6 /100000",
            "logheight+0-?18 ",
            "logheight*?10 /200000",
            "logheight/2",
            "?21 +0-?20 ",
            "?21 +?20 -0",
            "logwidth",
            "logheight"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (4);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 18
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 3);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    14, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 18
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 5);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 2);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [2] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 22
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 9);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 3);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [3] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    13, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    17, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 23
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 23
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    17, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 25
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 23
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 23
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,17,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 22
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        24, 23
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-upDownArrowCallout"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCuturnArrow : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (5);
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [2].Value = aAny;
            aAdjSequence [2].Name = "adj3";
        }
        {
            Any aAny ((sal_Int32) 43750);
            aAdjSequence [3].Value = aAny;
            aAdjSequence [3].Name = "adj4";
        }
        {
            Any aAny ((sal_Int32) 75000);
            aAdjSequence [4].Value = aAny;
            aAdjSequence [4].Name = "adj5";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "if(0-$1 ,0,if(25000-$1 ,$1 ,25000))",
            "?0 *2/1",
            "if(0-$0 ,0,if(?1 -$0 ,$0 ,?1 ))",
            "min(logwidth,logheight)",
            "?2 *?3 /logheight",
            "100000+0-?4 ",
            "?5 *logheight/?3 ",
            "if(0-$2 ,0,if(?6 -$2 ,$2 ,?6 ))",
            "?7 +?2 -0",
            "?8 *?3 /logheight",
            "if(?9 -$4 ,?9 ,if(100000-$4 ,$4 ,100000))",
            "?3 *?2 /100000",
            "?3 *?0 /100000",
            "?11 *1/2",
            "?12 +0-?13 ",
            "logheight*?10 /100000",
            "?3 *?7 /100000",
            "?15 +0-?16 ",
            "logwidth+0-?14 ",
            "?18 *1/2",
            "min(?19 ,?17 )",
            "?20 *100000/?3 ",
            "if(0-$3 ,0,if(?21 -$3 ,$3 ,?21 ))",
            "?3 *?22 /100000",
            "?23 +0-?11 ",
            "max(?24 ,0)",
            "?11 +?25 -0",
            "logwidth+0-?12 ",
            "?27 +0-?12 ",
            "?28 +?14 -0",
            "?18 +0-?23 ",
            "?29 +0-?25 ",
            "(?11 +?29 )/2",
            "logheight",
            "logwidth",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(-5400000)/60000.0",
            "(16200000)/60000.0",
            "(-5400000)/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (5);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 33
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 33
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 25000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 17
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 6);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 2);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [2] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    23, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 21);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 3);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [3] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    34, 15
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 100000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 9);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 4);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [4] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 33
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 23
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 23
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    30, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 23
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    37, 38
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    18, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    34, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 15
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    29, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    29, 26
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 25
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    39, 40
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 11
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 25
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    41, 42
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 33
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,1,
                17,1,
                2,1,
                17,1,
                2,6,
                17,1,
                2,1,
                17,1,
                2,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        34, 33
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-uturnArrow"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCverticalScroll : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (1);
        {
            Any aAny ((sal_Int32) 12500);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(25000-$0 ,$0 ,25000))",
            "min(logwidth,logheight)",
            "?1 *?0 /100000",
            "?2 *1/2",
            "?2 *1/4",
            "?2 +?3 -0",
            "?2 +?2 -0",
            "logwidth+0-?2 ",
            "logwidth+0-?3 ",
            "?7 +0-?3 ",
            "logheight+0-?2 ",
            "logheight+0-?3 ",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "(5400000)/60000.0",
            "(-5400000)/60000.0",
            "(5400000)/60000.0",
            "(-10800000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(10800000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(0)/60000.0",
            "(16200000)/60000.0",
            "(16200000)/60000.0",
            "(10800000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(10800000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(16200000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(16200000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(-5400000)/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 25000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 14
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 16
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 11
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    17, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 10
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    19, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    8, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    21, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 11
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 24
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 26
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 28
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    29, 30
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    31, 32
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 11
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 34
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 10
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    37, 38
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    8, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    39, 40
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 11
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    41, 42
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 14
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    43, 44
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    45, 46
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    47, 48
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 10
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    49, 50
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 11
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 14
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    51, 52
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 10
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,1,
                2,1,
                17,1,
                2,2,
                17,1,
                2,1,
                17,1,
                2,2,
                17,1,
                4,0,
                1,1,
                17,2,
                4,0,
                7,0,
                5,0,
                1,1,
                17,2,
                4,0,
                1,1,
                17,2,
                4,0,
                19,0,
                7,0,
                5,0,
                1,1,
                2,1,
                17,1,
                2,1,
                17,1,
                2,2,
                17,1,
                2,1,
                17,1,
                4,0,
                1,1,
                17,2,
                2,1,
                1,1,
                2,1,
                1,1,
                17,1,
                2,1,
                1,1,
                17,1,
                2,1,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        2, 2
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        7, 11
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-verticalScroll"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCwave : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 12500);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 0);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(20000-$0 ,$0 ,20000))",
            "if(-10000-$1 ,-10000,if(10000-$1 ,$1 ,10000))",
            "logheight*?0 /100000",
            "?2 *10/3",
            "?2 +0-?3 ",
            "?2 +?3 -0",
            "logheight+0-?2 ",
            "?6 +0-?3 ",
            "?6 +?3 -0",
            "logwidth*?1 /100000",
            "logwidth*?1 /50000",
            "abs(?9 )",
            "if(?10 ,0,?10 )",
            "0+0-?12 ",
            "if(?10 ,?10 ,0)",
            "logwidth+0-?14 ",
            "(?12 +?15 )/3",
            "?13 +?16 -0",
            "(?17 +?15 )/2",
            "0+?14 -0",
            "logwidth+?12 -0",
            "?19 +?16 -0",
            "(?21 +?20 )/2",
            "logwidth+0-?11 ",
            "logwidth/2",
            "?24 +?9 -0",
            "?24 +0-?9 ",
            "max(?13 ,?19 )",
            "min(?15 ,?20 )",
            "logheight*?0 /50000",
            "logheight+0-?29 ",
            "logheight",
            "logheight/2"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 20000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 31
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 10000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -10000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    17, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    18, 5
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    20, 6
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    22, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    21, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    19, 6
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                3,1,
                2,1,
                3,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        27, 29
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        28, 30
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-wave"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCwedgeEllipseCallout : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) -20833);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 62500);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "logwidth*$0 /100000",
            "logheight*$1 /100000",
            "logwidth/2",
            "?2 +?0 -0",
            "logheight/2",
            "?4 +?1 -0",
            "?0 *logheight/1",
            "?1 *logwidth/1",
            "(10800000*atan2(?7 ,?6 ))/pi",
            "?8 +660000-0",
            "?8 +0-660000",
            "logwidth/2",
            "?11 *cos(pi*(?9 )/10800000)",
            "logheight/2",
            "?13 *sin(pi*(?9 )/10800000)",
            "?2 +?12 -0",
            "?4 +?14 -0",
            "?11 *cos(pi*(?10 )/10800000)",
            "?13 *sin(pi*(?10 )/10800000)",
            "?2 +?17 -0",
            "?4 +?18 -0",
            "(10800000*atan2(?14 ,?12 ))/pi",
            "(10800000*atan2(?18 ,?17 ))/pi",
            "?22 +0-?21 ",
            "?23 +21600000-0",
            "if(?23 ,?23 ,?24 )",
            "?11 *cos(pi*(2700000)/10800000)",
            "?13 *sin(pi*(2700000)/10800000)",
            "?2 +0-?26 ",
            "?2 +?26 -0",
            "?4 +0-?27 ",
            "?4 +?27 -0",
            "logheight",
            "logwidth",
            "(?21 )/60000.0",
            "(?25 )/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (7);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 5
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [3].Value = makeAny (aParameter);
            }
            {
                aPropSequence [4].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [4].Value = makeAny (aParameter);
            }
            {
                aPropSequence [5].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [5].Value = makeAny (aAny);
            }
            {
                aPropSequence [6].Name = "RefY";
                Any aAny ((sal_Int32) 1);
                aPropSequence [6].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 5
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 16
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 13
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    34, 35
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,1,
                17,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        28, 30
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        29, 31
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-wedgeEllipseCallout"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCwedgeRectCallout : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) -20833);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 62500);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "logwidth*$0 /100000",
            "logheight*$1 /100000",
            "logwidth/2",
            "?2 +?0 -0",
            "logheight/2",
            "?4 +?1 -0",
            "?3 +0-?2 ",
            "?5 +0-?4 ",
            "?0 *logheight/logwidth",
            "abs(?1 )",
            "abs(?8 )",
            "?9 +0-?10 ",
            "if(?0 ,7,2)",
            "if(?0 ,10,5)",
            "logwidth*?12 /12",
            "logwidth*?13 /12",
            "if(?1 ,7,2)",
            "if(?1 ,10,5)",
            "logheight*?16 /12",
            "logheight*?17 /12",
            "if(?0 ,0,?3 )",
            "if(?11 ,0,?20 )",
            "if(?1 ,?14 ,?3 )",
            "if(?11 ,?22 ,?14 )",
            "if(?0 ,?3 ,logwidth)",
            "if(?11 ,logwidth,?24 )",
            "if(?1 ,?3 ,?14 )",
            "if(?11 ,?26 ,?14 )",
            "if(?0 ,?18 ,?5 )",
            "if(?11 ,?18 ,?28 )",
            "if(?1 ,0,?5 )",
            "if(?11 ,?30 ,0)",
            "if(?0 ,?5 ,?18 )",
            "if(?11 ,?18 ,?32 )",
            "if(?1 ,?5 ,logheight)",
            "if(?11 ,?34 ,logheight)",
            "logheight",
            "logwidth"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (7);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 5
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [3].Value = makeAny (aParameter);
            }
            {
                aPropSequence [4].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [4].Value = makeAny (aParameter);
            }
            {
                aPropSequence [5].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [5].Value = makeAny (aAny);
            }
            {
                aPropSequence [6].Name = "RefY";
                Any aAny ((sal_Int32) 1);
                aPropSequence [6].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    14, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 31
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    15, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    37, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    37, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 33
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    37, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    37, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 36
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 36
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    21, 29
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 18
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,15,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        37, 36
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-wedgeRectCallout"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCwedgeRoundRectCallout : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (3);
        {
            Any aAny ((sal_Int32) -20833);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 62500);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        {
            Any aAny ((sal_Int32) 16667);
            aAdjSequence [2].Value = aAny;
            aAdjSequence [2].Name = "adj3";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "logwidth*$0 /100000",
            "logheight*$1 /100000",
            "logwidth/2",
            "?2 +?0 -0",
            "logheight/2",
            "?4 +?1 -0",
            "?0 *logheight/logwidth",
            "abs(?1 )",
            "abs(?6 )",
            "?7 +0-?8 ",
            "if(?0 ,7,2)",
            "if(?0 ,10,5)",
            "logwidth*?10 /12",
            "logwidth*?11 /12",
            "if(?1 ,7,2)",
            "if(?1 ,10,5)",
            "logheight*?14 /12",
            "logheight*?15 /12",
            "if(?0 ,0,?3 )",
            "if(?9 ,0,?18 )",
            "if(?1 ,?12 ,?3 )",
            "if(?9 ,?20 ,?12 )",
            "if(?0 ,?3 ,logwidth)",
            "if(?9 ,logwidth,?22 )",
            "if(?1 ,?3 ,?12 )",
            "if(?9 ,?24 ,?12 )",
            "if(?0 ,?16 ,?5 )",
            "if(?9 ,?16 ,?26 )",
            "if(?1 ,0,?5 )",
            "if(?9 ,?28 ,0)",
            "if(?0 ,?5 ,?16 )",
            "if(?9 ,?16 ,?30 )",
            "if(?1 ,?5 ,logheight)",
            "if(?9 ,?32 ,logheight)",
            "min(logwidth,logheight)",
            "?34 *$2 /100000",
            "logwidth+0-?35 ",
            "logheight+0-?35 ",
            "?35 *29289/100000",
            "logwidth+0-?38 ",
            "logheight+0-?38 ",
            "logheight",
            "logwidth",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (7);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 5
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [3].Value = makeAny (aParameter);
            }
            {
                aPropSequence [4].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [4].Value = makeAny (aParameter);
            }
            {
                aPropSequence [5].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [5].Value = makeAny (aAny);
            }
            {
                aPropSequence [6].Name = "RefY";
                Any aAny ((sal_Int32) 1);
                aPropSequence [6].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    43, 44
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    12, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    21, 29
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    13, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    36, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    45, 46
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    42, 16
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 31
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    42, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    42, 37
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    47, 48
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 33
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    49, 50
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    19, 27
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 16
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,1,
                2,4,
                17,1,
                2,4,
                17,1,
                2,4,
                17,1,
                2,3,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        38, 38
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        39, 40
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-wedgeRoundRectCallout"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

} // anonymous namespace
void CustomShapeProperties::initializePresetsMap6()
{
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "trapezoid" ) ] = new ShapeCtrapezoid();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "triangle" ) ] = new ShapeCtriangle();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "upArrow" ) ] = new ShapeCupArrow();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "upArrowCallout" ) ] = new ShapeCupArrowCallout();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "upDownArrow" ) ] = new ShapeCupDownArrow();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "upDownArrowCallout" ) ] = new ShapeCupDownArrowCallout();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "uturnArrow" ) ] = new ShapeCuturnArrow();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "verticalScroll" ) ] = new ShapeCverticalScroll();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "wave" ) ] = new ShapeCwave();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "wedgeEllipseCallout" ) ] = new ShapeCwedgeEllipseCallout();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "wedgeRectCallout" ) ] = new ShapeCwedgeRectCallout();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "wedgeRoundRectCallout" ) ] = new ShapeCwedgeRoundRectCallout();
}

} } // oox // drawingml


void ::oox::drawingml::CustomShapeProperties::initializePresetsMap()
{
initializePresetsMap1();
initializePresetsMap2();
initializePresetsMap3();
initializePresetsMap4();
initializePresetsMap5();
initializePresetsMap6();
}
