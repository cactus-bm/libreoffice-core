
// This file was generated by: ./generatePresetsCXX.pl

// Please, DO NOT EDIT.

// We mean it.

#include <oox/drawingml/customshapeproperties.hxx>
#include <oox/token/tokenmap.hxx>
#include <com/sun/star/awt/Rectangle.hpp>
#include <com/sun/star/awt/Size.hpp>
#include <com/sun/star/drawing/EnhancedCustomShapeAdjustmentValue.hpp>
#include <com/sun/star/drawing/EnhancedCustomShapeSegment.hpp>
#include <com/sun/star/drawing/EnhancedCustomShapeParameterPair.hpp>
#include <com/sun/star/drawing/EnhancedCustomShapeParameterType.hpp>

using namespace ::com::sun::star;
using namespace ::com::sun::star::beans;
using namespace ::com::sun::star::drawing;
using namespace ::com::sun::star::uno;

namespace oox { namespace drawingml {

namespace
{
class ShapeCflowChartDelay : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth/2",
            "?0 *cos(pi*(2700000)/10800000)",
            "logheight/2",
            "?2 *sin(pi*(2700000)/10800000)",
            "logwidth/2",
            "?4 +?1 -0",
            "logheight/2",
            "?6 +0-?3 ",
            "?6 +?3 -0",
            "logheight",
            "logwidth",
            "(16200000)/60000.0",
            "(10800000)/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 12
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 9
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,1,
                17,1,
                2,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 7
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        5, 8
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartDelay"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartDisplay : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth*5/6",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth",
            "logwidth/6",
            "(16200000)/60000.0",
            "(10800000)/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 3
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 7
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 6
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,2,
                17,1,
                2,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 6;
                aSize.Height = 6;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::NORMAL,
                        5, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 3
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartDisplay"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartDocument : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logheight*17322/21600",
            "logheight*20172/21600",
            "logwidth/2",
            "logheight/2",
            "logwidth"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    21600, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    21600, 17322
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    10800, 17322
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    10800, 23922
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 20172
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,2,
                3,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 21600;
                aSize.Height = 21600;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        4, 0
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartDocument"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartExtract : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth*3/4",
            "logwidth/2",
            "logwidth/4",
            "logheight/2",
            "logheight"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 2
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,2,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 2;
                aSize.Height = 2;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        2, 3
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 4
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartExtract"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartInputOutput : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth*2/5",
            "logwidth*3/5",
            "logwidth*4/5",
            "logwidth*9/10",
            "logwidth/2",
            "logwidth/10",
            "logheight/2",
            "logheight",
            "logwidth/5"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 5
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 5
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 5;
                aSize.Height = 5;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::NORMAL,
                        8, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        2, 7
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartInputOutput"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartInternalStorage : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth",
            "logwidth/8",
            "logheight/8"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 8
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    8, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                7,0,
                5,0,
                1,1,
                2,1,
                1,1,
                2,1,
                6,0,
                5,0,
                1,1,
                2,3,
                4,0,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (3);
            {
                awt::Size aSize;
                aSize.Width = 1;
                aSize.Height = 1;
                aSizeSequence [0] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 8;
                aSize.Height = 8;
                aSizeSequence [1] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 1;
                aSize.Height = 1;
                aSizeSequence [2] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        4, 5
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        3, 2
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartInternalStorage"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartMagneticDisk : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logheight*5/6",
            "logwidth/2",
            "logheight/3",
            "logheight/2",
            "logheight",
            "logwidth",
            "(10800000)/60000.0",
            "(10800000)/60000.0",
            "(0)/60000.0",
            "(10800000)/60000.0",
            "(0)/60000.0",
            "(10800000)/60000.0",
            "(10800000)/60000.0",
            "(10800000)/60000.0",
            "(0)/60000.0",
            "(10800000)/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 1
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 7
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    6, 5
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 1
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 9
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    6, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 1
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 11
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 1
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 13
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    6, 5
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 1
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 15
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,1,
                2,1,
                17,1,
                4,0,
                7,0,
                5,0,
                1,1,
                17,1,
                6,0,
                5,0,
                1,1,
                17,1,
                2,1,
                17,1,
                4,0,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (3);
            {
                awt::Size aSize;
                aSize.Width = 6;
                aSize.Height = 6;
                aSizeSequence [0] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 6;
                aSize.Height = 6;
                aSizeSequence [1] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 6;
                aSize.Height = 6;
                aSizeSequence [2] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 2
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        5, 0
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartMagneticDisk"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartMagneticDrum : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth*2/3",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth",
            "logwidth/6",
            "(16200000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(16200000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 7
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 6
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 9
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 6
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 11
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 13
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 6
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 15
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,1,
                17,1,
                2,1,
                17,1,
                4,0,
                7,0,
                5,0,
                1,1,
                17,1,
                6,0,
                5,0,
                1,1,
                2,1,
                17,1,
                2,1,
                17,1,
                4,0,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (3);
            {
                awt::Size aSize;
                aSize.Width = 6;
                aSize.Height = 6;
                aSizeSequence [0] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 6;
                aSize.Height = 6;
                aSizeSequence [1] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 6;
                aSize.Height = 6;
                aSizeSequence [2] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::NORMAL,
                        5, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 3
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartMagneticDrum"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartMagneticTape : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth/2",
            "?0 *cos(pi*(2700000)/10800000)",
            "logheight/2",
            "?2 *sin(pi*(2700000)/10800000)",
            "logwidth/2",
            "?4 +0-?1 ",
            "?4 +?1 -0",
            "logheight/2",
            "?7 +0-?3 ",
            "?7 +?3 -0",
            "(10800000*atan2(logheight,logwidth))/pi",
            "logheight",
            "logwidth",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(?10 )/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 11
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 14
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 16
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    17, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    19, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 11
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,4,
                2,2,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        5, 8
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        6, 9
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartMagneticTape"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartManualInput : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth/2",
            "logheight/10",
            "logheight/2",
            "logheight",
            "logwidth",
            "logheight/5"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 5
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 5
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 5;
                aSize.Height = 5;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 5
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        4, 3
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartManualInput"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartManualOperation : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth*4/5",
            "logwidth*9/10",
            "logwidth/2",
            "logwidth/10",
            "logheight/2",
            "logheight",
            "logwidth/5"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 5
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 5
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 5;
                aSize.Height = 5;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::NORMAL,
                        6, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 5
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartManualOperation"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartMerge : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth*3/4",
            "logwidth/2",
            "logwidth/4",
            "logheight/2",
            "logheight"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 2
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,2,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 2;
                aSize.Height = 2;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::NORMAL,
                        2, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 3
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartMerge"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartMultidocument : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logheight*3675/21600",
            "logheight*20782/21600",
            "logwidth*9298/21600",
            "logwidth*12286/21600",
            "logwidth*18595/21600",
            "logheight/2",
            "logwidth"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 20782
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    9298, 23542
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    9298, 18022
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18595, 18022
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18595, 3675
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 3675
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1532, 3675
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1532, 1815
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20000, 1815
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20000, 16252
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    19298, 16252
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18595, 16352
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18595, 16352
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18595, 3675
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2972, 1815
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2972, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    21600, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    21600, 14392
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20800, 14392
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20000, 14467
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20000, 14467
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20000, 1815
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 3675
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18595, 3675
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18595, 18022
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    9298, 18022
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    9298, 23542
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 20782
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1532, 3675
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1532, 1815
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20000, 1815
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20000, 16252
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    19298, 16252
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18595, 16352
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18595, 16352
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2972, 1815
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2972, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    21600, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    21600, 14392
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20800, 14392
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20000, 14467
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20000, 14467
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 20782
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    9298, 23542
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    9298, 18022
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18595, 18022
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18595, 16352
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18595, 16352
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    19298, 16252
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20000, 16252
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20000, 14467
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20000, 14467
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20800, 14392
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    21600, 14392
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    21600, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2972, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2972, 1815
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1532, 1815
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1532, 3675
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 3675
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                3,1,
                2,2,
                4,0,
                1,1,
                2,3,
                3,1,
                2,1,
                4,0,
                1,1,
                2,3,
                3,1,
                2,1,
                4,0,
                7,0,
                5,0,
                1,1,
                2,2,
                3,1,
                4,0,
                1,1,
                2,3,
                3,1,
                1,1,
                2,3,
                3,1,
                6,0,
                5,0,
                1,1,
                3,1,
                2,1,
                3,1,
                2,1,
                3,1,
                2,6,
                4,0,
                6,0,
                7,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (3);
            {
                awt::Size aSize;
                aSize.Width = 21600;
                aSize.Height = 21600;
                aSizeSequence [0] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 21600;
                aSize.Height = 21600;
                aSizeSequence [1] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 21600;
                aSize.Height = 21600;
                aSizeSequence [2] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        4, 1
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartMultidocument"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartOfflineStorage : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth*3/4",
            "logheight/2",
            "logwidth/2",
            "logheight",
            "logwidth/4"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 2
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 4
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 4
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 2
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,2,
                4,0,
                7,0,
                5,0,
                1,1,
                2,1,
                6,0,
                5,0,
                1,1,
                2,2,
                4,0,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (3);
            {
                awt::Size aSize;
                aSize.Width = 2;
                aSize.Height = 2;
                aSizeSequence [0] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 5;
                aSize.Height = 5;
                aSizeSequence [1] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 2;
                aSize.Height = 2;
                aSizeSequence [2] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::NORMAL,
                        4, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 1
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartOfflineStorage"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartOffpageConnector : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logheight*4/5",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    10, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    10, 8
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 10
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 8
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,4,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 10;
                aSize.Height = 10;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        4, 0
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartOffpageConnector"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartOnlineStorage : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth*5/6",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth/6",
            "(16200000)/60000.0",
            "(-10800000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    6, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 6
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 6
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 8
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,1,
                17,1,
                2,1,
                17,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 6;
                aSize.Height = 6;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::NORMAL,
                        4, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 3
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartOnlineStorage"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartOr : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth/2",
            "?0 *cos(pi*(2700000)/10800000)",
            "logheight/2",
            "?2 *sin(pi*(2700000)/10800000)",
            "logwidth/2",
            "?4 +0-?1 ",
            "?4 +?1 -0",
            "logheight/2",
            "?7 +0-?3 ",
            "?7 +?3 -0",
            "logheight",
            "logwidth",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 13
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 15
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    18, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 10
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 7
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    20, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    22, 23
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 25
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 27
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,4,
                4,0,
                7,0,
                5,0,
                1,1,
                2,1,
                1,1,
                2,1,
                6,0,
                5,0,
                1,1,
                17,4,
                4,0,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        5, 8
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        6, 9
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartOr"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartPredefinedProcess : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth*7/8",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth",
            "logwidth/8"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 8
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    7, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    7, 8
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                7,0,
                5,0,
                1,1,
                2,1,
                1,1,
                2,1,
                6,0,
                5,0,
                1,1,
                2,3,
                4,0,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (3);
            {
                awt::Size aSize;
                aSize.Width = 1;
                aSize.Height = 1;
                aSizeSequence [0] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 8;
                aSize.Height = 8;
                aSizeSequence [1] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 1;
                aSize.Height = 1;
                aSizeSequence [2] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::NORMAL,
                        5, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 3
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartPredefinedProcess"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartPreparation : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth*4/5",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth",
            "logwidth/5"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 5
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    8, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    10, 5
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    8, 10
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 10
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,5,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 10;
                aSize.Height = 10;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::NORMAL,
                        5, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 3
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartPreparation"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartProcess : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 1;
                aSize.Height = 1;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        3, 2
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartProcess"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartPunchedCard : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth",
            "logheight/5"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 5
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 5
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,4,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 5;
                aSize.Height = 5;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 4
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        3, 2
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartPunchedCard"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartPunchedTape : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logheight*9/10",
            "logheight*4/5",
            "logwidth/2",
            "logheight/10",
            "logheight/2",
            "logwidth",
            "logheight/5",
            "(10800000)/60000.0",
            "(-10800000)/60000.0",
            "(10800000)/60000.0",
            "(10800000)/60000.0",
            "(0)/60000.0",
            "(-10800000)/60000.0",
            "(0)/60000.0",
            "(10800000)/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 8
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 10
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20, 18
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 12
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 14
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,2,
                2,1,
                17,2,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 20;
                aSize.Height = 20;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 6
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        5, 1
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartPunchedTape"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartSort : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth*3/4",
            "logheight*3/4",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth",
            "logwidth/4",
            "logheight/4"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 2
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 2
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                7,0,
                5,0,
                1,1,
                2,1,
                6,0,
                5,0,
                1,1,
                2,3,
                4,0,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (3);
            {
                awt::Size aSize;
                aSize.Width = 2;
                aSize.Height = 2;
                aSizeSequence [0] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 2;
                aSize.Height = 2;
                aSizeSequence [1] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 2;
                aSize.Height = 2;
                aSizeSequence [2] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        6, 7
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 1
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartSort"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartSummingJunction : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth/2",
            "?0 *cos(pi*(2700000)/10800000)",
            "logheight/2",
            "?2 *sin(pi*(2700000)/10800000)",
            "logwidth/2",
            "?4 +0-?1 ",
            "?4 +?1 -0",
            "logheight/2",
            "?7 +0-?3 ",
            "?7 +?3 -0",
            "logheight",
            "logwidth",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 13
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 15
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    18, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 9
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    20, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    22, 23
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 25
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 27
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,4,
                4,0,
                7,0,
                5,0,
                1,1,
                2,1,
                1,1,
                2,1,
                6,0,
                5,0,
                1,1,
                17,4,
                4,0,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        5, 8
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        6, 9
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartSummingJunction"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartTerminator : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth*1018/21600",
            "logwidth*20582/21600",
            "logheight*3163/21600",
            "logheight*18437/21600",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth",
            "(16200000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3475, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18125, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3475, 10800
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 9
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3475, 21600
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3475, 10800
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 11
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,1,
                17,1,
                2,1,
                17,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 21600;
                aSize.Height = 21600;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 2
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        1, 3
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-flowChartTerminator"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCfoldedCorner : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (1);
        {
            Any aAny ((sal_Int32) 16667);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(50000-$0 ,$0 ,50000))",
            "min(logwidth,logheight)",
            "?1 *?0 /100000",
            "?2 *1/5",
            "logwidth+0-?2 ",
            "?4 +?3 -0",
            "logheight+0-?2 ",
            "?6 +?3 -0",
            "logheight",
            "logwidth/2",
            "logheight/2",
            "logwidth"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 8
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 50000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    11, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 6
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 8
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 6
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 6
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 8
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 8
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    11, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 6
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,4,
                4,0,
                7,0,
                5,0,
                1,1,
                2,2,
                4,0,
                19,0,
                7,0,
                5,0,
                1,1,
                2,7,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        11, 6
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-foldedCorner"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCframe : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (1);
        {
            Any aAny ((sal_Int32) 12500);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(50000-$0 ,$0 ,50000))",
            "min(logwidth,logheight)",
            "?1 *?0 /100000",
            "logwidth+0-?2 ",
            "logheight+0-?2 ",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 50000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    8, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 7
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 2
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                1,1,
                2,3,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        2, 2
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        3, 4
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-frame"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCfunnel : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "?0 *1/20",
            "logwidth/2",
            "?2 +0-?1 ",
            "logheight/4",
            "?4 +0-?1 ",
            "?2 *cos(pi*(480000)/10800000)",
            "?4 *sin(pi*(480000)/10800000)",
            "(10800000*atan2(?7 ,?6 ))/pi",
            "?8 *2/1",
            "10800000+0-?8 ",
            "10800000+2-0",
            "10800000+0-2",
            "?2 *1/4",
            "?4 *1/4",
            "?4 *cos(pi*(?10 )/10800000)",
            "?2 *sin(pi*(?10 )/10800000)",
            "sqrt(?15 *?15 +?16 *?16 +0*0)",
            "?2 *?4 /?17 ",
            "?18 *cos(pi*(?10 )/10800000)",
            "?18 *sin(pi*(?10 )/10800000)",
            "logwidth/2",
            "?21 +?19 -0",
            "?4 +?20 -0",
            "?14 *cos(pi*(?8 )/10800000)",
            "?13 *sin(pi*(?8 )/10800000)",
            "sqrt(?24 *?24 +?25 *?25 +0*0)",
            "?13 *?14 /?26 ",
            "?27 *cos(pi*(?8 )/10800000)",
            "?27 *sin(pi*(?8 )/10800000)",
            "?21 +?28 -0",
            "logheight+0-?14 ",
            "?31 +?29 -0",
            "?2 +0-?3 ",
            "10800000*2/1",
            "logwidth",
            "logheight",
            "(?10 )/60000.0",
            "(?11 )/60000.0",
            "(?8 )/60000.0",
            "(?12 )/60000.0",
            "(10800000)/60000.0",
            "(-21600000)/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    22, 23
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    37, 38
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    30, 32
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 14
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    39, 40
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 5
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    41, 42
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,1,
                2,1,
                17,1,
                4,0,
                1,1,
                17,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        35, 36
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-funnel"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCgear6 : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 15000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 3526);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(20000-$0 ,$0 ,20000))",
            "if(0-$1 ,0,if(5358-$1 ,$1 ,5358))",
            "min(logwidth,logheight)",
            "?2 *?0 /100000",
            "?2 *?1 /100000",
            "?3 *1/2",
            "?4 *1/2",
            "?5 +?6 -0",
            "logheight/2",
            "?8 +0-?3 ",
            "logwidth/2",
            "?10 +0-?3 ",
            "?11 +0-?9 ",
            "if(?12 ,?9 ,?11 )",
            "(10800000*atan2(?7 ,?13 ))/pi",
            "19800000+0-?14 ",
            "19800000+?14 -0",
            "?11 *cos(pi*(?15 )/10800000)",
            "?9 *sin(pi*(?15 )/10800000)",
            "(10800000*atan2(?18 ,?17 ))/pi",
            "?9 *cos(pi*(?19 )/10800000)",
            "?11 *sin(pi*(?19 )/10800000)",
            "sqrt(?20 *?20 +?21 *?21 +0*0)",
            "?11 *?9 /?22 ",
            "?23 *cos(pi*(?19 )/10800000)",
            "?23 *sin(pi*(?19 )/10800000)",
            "logwidth/2",
            "?26 +?24 -0",
            "logheight/2",
            "?28 +?25 -0",
            "?11 *cos(pi*(?16 )/10800000)",
            "?9 *sin(pi*(?16 )/10800000)",
            "(10800000*atan2(?31 ,?30 ))/pi",
            "?9 *cos(pi*(?32 )/10800000)",
            "?11 *sin(pi*(?32 )/10800000)",
            "sqrt(?33 *?33 +?34 *?34 +0*0)",
            "?11 *?9 /?35 ",
            "?36 *cos(pi*(?32 )/10800000)",
            "?36 *sin(pi*(?32 )/10800000)",
            "?26 +?37 -0",
            "?28 +?38 -0",
            "?27 +0-?39 ",
            "?29 +0-?40 ",
            "sqrt(?41 *?41 +?42 *?42 +0*0)",
            "(10800000*atan2(?41 ,?42 ))/pi",
            "?4 *sin(pi*(?44 )/10800000)",
            "?4 *cos(pi*(?44 )/10800000)",
            "?39 +?45 -0",
            "?40 +?46 -0",
            "?27 +0-?45 ",
            "?29 +0-?46 ",
            "?3 *sin(pi*(?44 )/10800000)",
            "?3 *cos(pi*(?44 )/10800000)",
            "?48 +?51 -0",
            "?47 +0-?52 ",
            "?50 +?51 -0",
            "?49 +0-?52 ",
            "16200000+?14 -0",
            "?11 *cos(pi*(?57 )/10800000)",
            "?9 *sin(pi*(?57 )/10800000)",
            "(10800000*atan2(?59 ,?58 ))/pi",
            "?9 *cos(pi*(?60 )/10800000)",
            "?11 *sin(pi*(?60 )/10800000)",
            "sqrt(?61 *?61 +?62 *?62 +0*0)",
            "?11 *?9 /?63 ",
            "?64 *cos(pi*(?60 )/10800000)",
            "?64 *sin(pi*(?60 )/10800000)",
            "?26 +?65 -0",
            "?28 +?66 -0",
            "?26 +0-?65 ",
            "?67 +0-?4 ",
            "?69 +?4 -0",
            "?68 +0-?3 ",
            "?19 +0-?60 ",
            "1800000+0-?14 ",
            "1800000+?14 -0",
            "?11 *cos(pi*(?74 )/10800000)",
            "?9 *sin(pi*(?74 )/10800000)",
            "(10800000*atan2(?77 ,?76 ))/pi",
            "logheight+0-?40 ",
            "?11 *cos(pi*(?75 )/10800000)",
            "?9 *sin(pi*(?75 )/10800000)",
            "(10800000*atan2(?81 ,?80 ))/pi",
            "logheight+0-?29 ",
            "logheight+0-?55 ",
            "logheight+0-?53 ",
            "?54 ",
            "?78 +0-?32 ",
            "5400000+?14 -0",
            "?11 *cos(pi*(?88 )/10800000)",
            "?9 *sin(pi*(?88 )/10800000)",
            "(10800000*atan2(?90 ,?89 ))/pi",
            "logheight+0-?68 ",
            "logheight+0-?72 ",
            "9000000+?14 -0",
            "?11 *cos(pi*(?94 )/10800000)",
            "?9 *sin(pi*(?94 )/10800000)",
            "(10800000*atan2(?96 ,?95 ))/pi",
            "logwidth+0-?39 ",
            "logwidth+0-?54 ",
            "logwidth+0-?56 ",
            "12600000+?14 -0",
            "?11 *cos(pi*(?101 )/10800000)",
            "?9 *sin(pi*(?101 )/10800000)",
            "(10800000*atan2(?103 ,?102 ))/pi",
            "logwidth+0-?27 ",
            "logwidth+0-?56 ",
            "logwidth+0-?54 ",
            "(?56 +?54 )/2",
            "(?55 +?53 )/2",
            "logheight+0-?109 ",
            "(logwidth+0)/?108 ",
            "(?32 )/60000.0",
            "(?87 )/60000.0",
            "(?82 )/60000.0",
            "(?73 )/60000.0",
            "(?91 )/60000.0",
            "(?73 )/60000.0",
            "(?97 )/60000.0",
            "(?87 )/60000.0",
            "(?104 )/60000.0",
            "(?73 )/60000.0",
            "(?60 )/60000.0",
            "(?73 )/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    67, 68
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 20000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    69, 68
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 5358);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 29
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    56, 55
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    54, 53
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    39, 40
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    112, 113
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    54, 85
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    56, 84
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 83
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    114, 115
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    70, 93
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    71, 93
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    69, 92
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    116, 117
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    100, 84
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    99, 85
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    98, 79
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    118, 119
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    107, 53
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    106, 55
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    105, 29
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    120, 121
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    71, 72
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    70, 72
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    67, 68
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    122, 123
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        105, 29
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        27, 83
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-gear6"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCgear9 : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 10000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 1763);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(20000-$0 ,$0 ,20000))",
            "if(0-$1 ,0,if(2679-$1 ,$1 ,2679))",
            "min(logwidth,logheight)",
            "?2 *?0 /100000",
            "?2 *?1 /100000",
            "?3 *1/2",
            "?4 *1/2",
            "?5 +?6 -0",
            "logheight/2",
            "?8 +0-?3 ",
            "logwidth/2",
            "?10 +0-?3 ",
            "?11 +0-?9 ",
            "if(?12 ,?9 ,?11 )",
            "(10800000*atan2(?7 ,?13 ))/pi",
            "18600000+0-?14 ",
            "18600000+?14 -0",
            "?11 *cos(pi*(?15 )/10800000)",
            "?9 *sin(pi*(?15 )/10800000)",
            "(10800000*atan2(?18 ,?17 ))/pi",
            "?9 *cos(pi*(?19 )/10800000)",
            "?11 *sin(pi*(?19 )/10800000)",
            "sqrt(?20 *?20 +?21 *?21 +0*0)",
            "?11 *?9 /?22 ",
            "?23 *cos(pi*(?19 )/10800000)",
            "?23 *sin(pi*(?19 )/10800000)",
            "logwidth/2",
            "?26 +?24 -0",
            "logheight/2",
            "?28 +?25 -0",
            "?11 *cos(pi*(?16 )/10800000)",
            "?9 *sin(pi*(?16 )/10800000)",
            "(10800000*atan2(?31 ,?30 ))/pi",
            "?9 *cos(pi*(?32 )/10800000)",
            "?11 *sin(pi*(?32 )/10800000)",
            "sqrt(?33 *?33 +?34 *?34 +0*0)",
            "?11 *?9 /?35 ",
            "?36 *cos(pi*(?32 )/10800000)",
            "?36 *sin(pi*(?32 )/10800000)",
            "?26 +?37 -0",
            "?28 +?38 -0",
            "?27 +0-?39 ",
            "?29 +0-?40 ",
            "sqrt(?41 *?41 +?42 *?42 +0*0)",
            "(10800000*atan2(?41 ,?42 ))/pi",
            "?4 *sin(pi*(?44 )/10800000)",
            "?4 *cos(pi*(?44 )/10800000)",
            "?39 +?45 -0",
            "?40 +?46 -0",
            "?27 +0-?45 ",
            "?29 +0-?46 ",
            "?3 *sin(pi*(?44 )/10800000)",
            "?3 *cos(pi*(?44 )/10800000)",
            "?48 +?51 -0",
            "?47 +0-?52 ",
            "?50 +?51 -0",
            "?49 +0-?52 ",
            "21000000+0-?14 ",
            "21000000+?14 -0",
            "?11 *cos(pi*(?57 )/10800000)",
            "?9 *sin(pi*(?57 )/10800000)",
            "(10800000*atan2(?60 ,?59 ))/pi",
            "?9 *cos(pi*(?61 )/10800000)",
            "?11 *sin(pi*(?61 )/10800000)",
            "sqrt(?62 *?62 +?63 *?63 +0*0)",
            "?11 *?9 /?64 ",
            "?65 *cos(pi*(?61 )/10800000)",
            "?65 *sin(pi*(?61 )/10800000)",
            "?26 +?66 -0",
            "?28 +?67 -0",
            "?11 *cos(pi*(?58 )/10800000)",
            "?9 *sin(pi*(?58 )/10800000)",
            "(10800000*atan2(?71 ,?70 ))/pi",
            "?9 *cos(pi*(?72 )/10800000)",
            "?11 *sin(pi*(?72 )/10800000)",
            "sqrt(?73 *?73 +?74 *?74 +0*0)",
            "?11 *?9 /?75 ",
            "?76 *cos(pi*(?72 )/10800000)",
            "?76 *sin(pi*(?72 )/10800000)",
            "?26 +?77 -0",
            "?28 +?78 -0",
            "?68 +0-?79 ",
            "?69 +0-?80 ",
            "sqrt(?81 *?81 +?82 *?82 +0*0)",
            "(10800000*atan2(?81 ,?82 ))/pi",
            "?4 *sin(pi*(?84 )/10800000)",
            "?4 *cos(pi*(?84 )/10800000)",
            "?79 +?85 -0",
            "?80 +?86 -0",
            "?68 +0-?85 ",
            "?69 +0-?86 ",
            "?3 *sin(pi*(?84 )/10800000)",
            "?3 *cos(pi*(?84 )/10800000)",
            "?88 +?91 -0",
            "?87 +0-?92 ",
            "?90 +?91 -0",
            "?89 +0-?92 ",
            "?61 +0-?32 ",
            "1800000+0-?14 ",
            "1800000+?14 -0",
            "?11 *cos(pi*(?98 )/10800000)",
            "?9 *sin(pi*(?98 )/10800000)",
            "(10800000*atan2(?101 ,?100 ))/pi",
            "?9 *cos(pi*(?102 )/10800000)",
            "?11 *sin(pi*(?102 )/10800000)",
            "sqrt(?103 *?103 +?104 *?104 +0*0)",
            "?11 *?9 /?105 ",
            "?106 *cos(pi*(?102 )/10800000)",
            "?106 *sin(pi*(?102 )/10800000)",
            "?26 +?107 -0",
            "?28 +?108 -0",
            "?11 *cos(pi*(?99 )/10800000)",
            "?9 *sin(pi*(?99 )/10800000)",
            "(10800000*atan2(?112 ,?111 ))/pi",
            "?9 *cos(pi*(?113 )/10800000)",
            "?11 *sin(pi*(?113 )/10800000)",
            "sqrt(?114 *?114 +?115 *?115 +0*0)",
            "?11 *?9 /?116 ",
            "?117 *cos(pi*(?113 )/10800000)",
            "?117 *sin(pi*(?113 )/10800000)",
            "?26 +?118 -0",
            "?28 +?119 -0",
            "?109 +0-?120 ",
            "?110 +0-?121 ",
            "sqrt(?122 *?122 +?123 *?123 +0*0)",
            "(10800000*atan2(?122 ,?123 ))/pi",
            "?4 *sin(pi*(?125 )/10800000)",
            "?4 *cos(pi*(?125 )/10800000)",
            "?120 +?126 -0",
            "?121 +?127 -0",
            "?109 +0-?126 ",
            "?110 +0-?127 ",
            "?3 *sin(pi*(?125 )/10800000)",
            "?3 *cos(pi*(?125 )/10800000)",
            "?129 +?132 -0",
            "?128 +0-?133 ",
            "?131 +?132 -0",
            "?130 +0-?133 ",
            "?102 +0-?72 ",
            "4200000+0-?14 ",
            "4200000+?14 -0",
            "?11 *cos(pi*(?139 )/10800000)",
            "?9 *sin(pi*(?139 )/10800000)",
            "(10800000*atan2(?142 ,?141 ))/pi",
            "?9 *cos(pi*(?143 )/10800000)",
            "?11 *sin(pi*(?143 )/10800000)",
            "sqrt(?144 *?144 +?145 *?145 +0*0)",
            "?11 *?9 /?146 ",
            "?147 *cos(pi*(?143 )/10800000)",
            "?147 *sin(pi*(?143 )/10800000)",
            "?26 +?148 -0",
            "?28 +?149 -0",
            "?11 *cos(pi*(?140 )/10800000)",
            "?9 *sin(pi*(?140 )/10800000)",
            "(10800000*atan2(?153 ,?152 ))/pi",
            "?9 *cos(pi*(?154 )/10800000)",
            "?11 *sin(pi*(?154 )/10800000)",
            "sqrt(?155 *?155 +?156 *?156 +0*0)",
            "?11 *?9 /?157 ",
            "?158 *cos(pi*(?154 )/10800000)",
            "?158 *sin(pi*(?154 )/10800000)",
            "?26 +?159 -0",
            "?28 +?160 -0",
            "?150 +0-?161 ",
            "?151 +0-?162 ",
            "sqrt(?163 *?163 +?164 *?164 +0*0)",
            "(10800000*atan2(?163 ,?164 ))/pi",
            "?4 *sin(pi*(?166 )/10800000)",
            "?4 *cos(pi*(?166 )/10800000)",
            "?161 +?167 -0",
            "?162 +?168 -0",
            "?150 +0-?167 ",
            "?151 +0-?168 ",
            "?3 *sin(pi*(?166 )/10800000)",
            "?3 *cos(pi*(?166 )/10800000)",
            "?170 +?173 -0",
            "?169 +0-?174 ",
            "?172 +?173 -0",
            "?171 +0-?174 ",
            "?143 +0-?113 ",
            "6600000+0-?14 ",
            "6600000+?14 -0",
            "?11 *cos(pi*(?180 )/10800000)",
            "?9 *sin(pi*(?180 )/10800000)",
            "(10800000*atan2(?183 ,?182 ))/pi",
            "?11 *cos(pi*(?181 )/10800000)",
            "?9 *sin(pi*(?181 )/10800000)",
            "(10800000*atan2(?186 ,?185 ))/pi",
            "logwidth+0-?150 ",
            "logwidth+0-?178 ",
            "logwidth+0-?176 ",
            "?184 +0-?154 ",
            "9000000+?14 -0",
            "?11 *cos(pi*(?192 )/10800000)",
            "?9 *sin(pi*(?192 )/10800000)",
            "(10800000*atan2(?194 ,?193 ))/pi",
            "logwidth+0-?109 ",
            "logwidth+0-?137 ",
            "logwidth+0-?135 ",
            "11400000+?14 -0",
            "?11 *cos(pi*(?199 )/10800000)",
            "?9 *sin(pi*(?199 )/10800000)",
            "(10800000*atan2(?201 ,?200 ))/pi",
            "logwidth+0-?68 ",
            "logwidth+0-?96 ",
            "logwidth+0-?94 ",
            "13800000+?14 -0",
            "?11 *cos(pi*(?206 )/10800000)",
            "?9 *sin(pi*(?206 )/10800000)",
            "(10800000*atan2(?208 ,?207 ))/pi",
            "logwidth+0-?39 ",
            "logwidth+0-?27 ",
            "logwidth+0-?56 ",
            "logwidth+0-?54 ",
            "16200000+0-?14 ",
            "16200000+?14 -0",
            "?11 *cos(pi*(?215 )/10800000)",
            "?9 *sin(pi*(?215 )/10800000)",
            "(10800000*atan2(?217 ,?216 ))/pi",
            "?9 *cos(pi*(?218 )/10800000)",
            "?11 *sin(pi*(?218 )/10800000)",
            "sqrt(?219 *?219 +?220 *?220 +0*0)",
            "?11 *?9 /?221 ",
            "?222 *cos(pi*(?218 )/10800000)",
            "?222 *sin(pi*(?218 )/10800000)",
            "?26 +?223 -0",
            "?28 +?224 -0",
            "?11 *cos(pi*(?214 )/10800000)",
            "?9 *sin(pi*(?214 )/10800000)",
            "(10800000*atan2(?228 ,?227 ))/pi",
            "?26 +0-?223 ",
            "?225 +0-?4 ",
            "?230 +?4 -0",
            "?226 +0-?3 ",
            "?229 +0-?209 ",
            "(?56 +?54 )/2",
            "(?55 +?53 )/2",
            "(?96 +?94 )/2",
            "(?95 +?93 )/2",
            "(?137 +?135 )/2",
            "(?136 +?134 )/2",
            "(?178 +?176 )/2",
            "(?177 +?175 )/2",
            "(logwidth+0)/?241 ",
            "(logwidth+0)/?239 ",
            "(logwidth+0)/?237 ",
            "(logwidth+0)/?235 ",
            "(?32 )/60000.0",
            "(?97 )/60000.0",
            "(?72 )/60000.0",
            "(?138 )/60000.0",
            "(?113 )/60000.0",
            "(?179 )/60000.0",
            "(?154 )/60000.0",
            "(?191 )/60000.0",
            "(?187 )/60000.0",
            "(?179 )/60000.0",
            "(?195 )/60000.0",
            "(?138 )/60000.0",
            "(?202 )/60000.0",
            "(?97 )/60000.0",
            "(?209 )/60000.0",
            "(?234 )/60000.0",
            "(?218 )/60000.0",
            "(?234 )/60000.0"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    225, 226
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 20000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    230, 226
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2679);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 29
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    56, 55
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    54, 53
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    39, 40
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    247, 248
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    96, 95
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    94, 93
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    79, 80
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    249, 250
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    137, 136
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    135, 134
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    120, 121
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    251, 252
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    178, 177
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    176, 175
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    161, 162
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    253, 254
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    190, 175
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    189, 177
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    188, 151
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    255, 256
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    198, 134
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    197, 136
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    196, 110
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    257, 258
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    205, 93
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    204, 95
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    203, 69
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    259, 260
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    213, 53
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    212, 55
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    211, 29
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    261, 262
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    232, 233
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    231, 233
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    225, 226
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    263, 264
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        210, 40
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        39, 121
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-gear9"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeChalfFrame : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 33333);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 33333);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "100000*logwidth/?0 ",
            "if(0-$1 ,0,if(?1 -$1 ,$1 ,?1 ))",
            "?0 *?2 /100000",
            "logheight*?3 /logwidth",
            "logheight+0-?4 ",
            "100000*?5 /?0 ",
            "if(0-$0 ,0,if(?6 -$0 ,$0 ,?6 ))",
            "?0 *?7 /100000",
            "?8 *logwidth/logheight",
            "logwidth+0-?9 ",
            "?3 *logheight/logwidth",
            "logheight+0-?11 ",
            "?3 *1/2",
            "(?12 +logheight)/2",
            "(?10 +logwidth)/2",
            "?8 *1/2",
            "logheight/2",
            "logwidth/2",
            "logwidth",
            "logheight"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 8
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 6);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    19, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 12
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 20
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,5,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        19, 20
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-halfFrame"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCheart : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap.setProperty(PROP_AdjustmentValues, Sequence< OUString >(0));
    }
    {
        static const char *aStrings[] = {
            "logwidth*49/48",
            "logwidth*10/48",
            "logwidth/2",
            "?2 +0-?0 ",
            "?2 +0-?1 ",
            "?2 +?1 -0",
            "?2 +?0 -0",
            "logheight/3",
            "0+0-?7 ",
            "logwidth*1/6",
            "logwidth*5/6",
            "logheight*2/3",
            "logheight/4",
            "logheight"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 12
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 12
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 13
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 12
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 12
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                3,2,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        9, 12
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        10, 11
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-heart"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCheptagon : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 102572);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "hf";
        }
        {
            Any aAny ((sal_Int32) 105210);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "vf";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "logwidth/2",
            "?0 *$0 /100000",
            "logheight/2",
            "?2 *$1 /100000",
            "logheight/2",
            "?4 *$1 /100000",
            "?1 *97493/100000",
            "?1 *78183/100000",
            "?1 *43388/100000",
            "?3 *62349/100000",
            "?3 *22252/100000",
            "?3 *90097/100000",
            "logwidth/2",
            "?12 +0-?6 ",
            "?12 +0-?7 ",
            "?12 +0-?8 ",
            "?12 +?8 -0",
            "?12 +?7 -0",
            "?12 +?6 -0",
            "?5 +0-?9 ",
            "?5 +?10 -0",
            "?5 +?11 -0",
            "logheight+0-?19 "
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        aPropertyMap.setProperty(PROP_Handles, Sequence< OUString >(0));
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    12, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    17, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    18, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 21
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,6,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        14, 19
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        17, 22
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-heptagon"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeChexagon : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj";
        }
        {
            Any aAny ((sal_Int32) 115470);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "vf";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "50000*logwidth/?0 ",
            "if(0-$0 ,0,if(?1 -$0 ,$0 ,?1 ))",
            "logheight/2",
            "?3 *$1 /100000",
            "?0 *?2 /100000",
            "logwidth+0-?5 ",
            "?4 *sin(pi*(3600000)/10800000)",
            "logheight/2",
            "?8 +0-?7 ",
            "?8 +?7 -0",
            "?1 *-1/2",
            "?2 +?11 -0",
            "if(?12 ,4,2)",
            "if(?12 ,3,2)",
            "if(?12 ,?11 ,0)",
            "(?2 +?15 )/?11 ",
            "?16 *?14 /-1",
            "?13 +?17 -0",
            "logwidth*?18 /24",
            "logheight*?18 /24",
            "logwidth+0-?19 ",
            "logheight+0-?20 ",
            "logwidth"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 10
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 10
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,5,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        19, 20
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        21, 22
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-hexagon"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeChomePlate : public CustomShapeProvider
{
  virtual PropertyMap getProperties() SAL_OVERRIDE
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (1);
        {
            Any aAny ((sal_Int32) 50000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj";
        }
        aPropertyMap.setProperty(PROP_AdjustmentValues, aAdjSequence);
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "100000*logwidth/?0 ",
            "if(0-$0 ,0,if(?1 -$0 ,$0 ,?1 ))",
            "?0 *?2 /100000",
            "logwidth+0-?3 ",
            "(?4 +logwidth)/2",
            "?4 *1/2",
            "logheight/2",
            "logheight",
            "logwidth"
        };
        aPropertyMap.setProperty(PROP_Equations, createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings ));
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap.setProperty(PROP_Handles, aPropSequenceSequence);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredX, (sal_Bool) sal_False);
    }
    {
        aPropertyMap.setProperty(PROP_MirroredY, (sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 8
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 8
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,4,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        5, 8
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap.setProperty(PROP_Path, aPropSequence);
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap.setProperty(PROP_ViewBox, aRectangle);
    }
    aPropertyMap.setProperty( PROP_Type, OUString("ooxml-homePlate"));

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

} // anonymous namespace
void CustomShapeProperties::initializePresetsMap3()
{
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartDelay" ) ] = new ShapeCflowChartDelay();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartDisplay" ) ] = new ShapeCflowChartDisplay();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartDocument" ) ] = new ShapeCflowChartDocument();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartExtract" ) ] = new ShapeCflowChartExtract();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartInputOutput" ) ] = new ShapeCflowChartInputOutput();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartInternalStorage" ) ] = new ShapeCflowChartInternalStorage();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartMagneticDisk" ) ] = new ShapeCflowChartMagneticDisk();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartMagneticDrum" ) ] = new ShapeCflowChartMagneticDrum();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartMagneticTape" ) ] = new ShapeCflowChartMagneticTape();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartManualInput" ) ] = new ShapeCflowChartManualInput();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartManualOperation" ) ] = new ShapeCflowChartManualOperation();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartMerge" ) ] = new ShapeCflowChartMerge();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartMultidocument" ) ] = new ShapeCflowChartMultidocument();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartOfflineStorage" ) ] = new ShapeCflowChartOfflineStorage();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartOffpageConnector" ) ] = new ShapeCflowChartOffpageConnector();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartOnlineStorage" ) ] = new ShapeCflowChartOnlineStorage();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartOr" ) ] = new ShapeCflowChartOr();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartPredefinedProcess" ) ] = new ShapeCflowChartPredefinedProcess();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartPreparation" ) ] = new ShapeCflowChartPreparation();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartProcess" ) ] = new ShapeCflowChartProcess();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartPunchedCard" ) ] = new ShapeCflowChartPunchedCard();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartPunchedTape" ) ] = new ShapeCflowChartPunchedTape();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartSort" ) ] = new ShapeCflowChartSort();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartSummingJunction" ) ] = new ShapeCflowChartSummingJunction();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartTerminator" ) ] = new ShapeCflowChartTerminator();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "foldedCorner" ) ] = new ShapeCfoldedCorner();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "frame" ) ] = new ShapeCframe();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "funnel" ) ] = new ShapeCfunnel();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "gear6" ) ] = new ShapeCgear6();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "gear9" ) ] = new ShapeCgear9();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "halfFrame" ) ] = new ShapeChalfFrame();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "heart" ) ] = new ShapeCheart();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "heptagon" ) ] = new ShapeCheptagon();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "hexagon" ) ] = new ShapeChexagon();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "homePlate" ) ] = new ShapeChomePlate();
}

} } // oox // drawingml

