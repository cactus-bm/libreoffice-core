--- misc/glibc-2.1.3/posix/getopt.h	Sun Aug 27 16:11:33 2000
+++ misc/build/glibc-2.1.3/posix/getopt.h	Mon Mar 31 09:42:01 2008
@@ -131,7 +131,7 @@
 /* Many other libraries have conflicting prototypes for getopt, with
    differences in the consts, in stdlib.h.  To avoid compilation
    errors, only prototype getopt for the GNU C library.  */
-extern int getopt (int __argc, char *const *__argv, const char *__shortopts);
+extern int getopt (int argc, char *const *argv, const char *shortopts);
 # else /* not __GNU_LIBRARY__ */
 extern int getopt ();
 # endif /* __GNU_LIBRARY__ */
@@ -137,14 +137,14 @@
 # endif /* __GNU_LIBRARY__ */

 # ifndef __need_getopt
-extern int getopt_long (int __argc, char *const *__argv, const char *__shortopts,
+extern int getopt_long (int argc, char *const *argv, const char *shortopts,
		        const struct option *__longopts, int *__longind);
-extern int getopt_long_only (int __argc, char *const *__argv,
+extern int getopt_long_only (int argc, char *const *argv,
			     const char *__shortopts,
		             const struct option *__longopts, int *__longind);

 /* Internal only.  Users should not call this directly.  */
-extern int _getopt_internal (int __argc, char *const *__argv,
+extern int _getopt_internal (int argc, char *const *argv,
			     const char *__shortopts,
		             const struct option *__longopts, int *__longind,
			     int __long_only);
--- misc/glibc-2.1.3/posix/getopt1.c
+++ misc/build/glibc-2.1.3/posix/getopt1.c
@@ -62,6 +62,13 @@
 #ifndef	NULL
 #define NULL 0
 #endif
+
+#ifdef _MSC_VER
+// C4100: unreferenced formal parameter
+#pragma warning (disable: 4100)
+// C4131: uses old-style declarator
+#pragma warning (disable: 4131)
+#endif
 
 int
 getopt_long (argc, argv, options, long_options, opt_index)

--- misc/glibc-2.1.3/posix/getopt.c
+++ misc/build/glibc-2.1.3/posix/getopt.c
@@ -86,6 +86,13 @@
 #  define _(msgid)	(msgid)
 # endif
 #endif
+
+#ifdef _MSC_VER
+// C4100: unreferenced formal parameter
+#pragma warning (disable: 4100)
+// C4131: uses old-style declarator
+#pragma warning (disable: 4131)
+#endif
 
 /* This version of `getopt' appears to the caller like standard Unix `getopt'
    but it behaves differently for the user, since it allows the user

