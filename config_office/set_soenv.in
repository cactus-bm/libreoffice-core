#!@PERL@ -w
#
# Program:     set_soenv.in
# Version:     $Revision: 1.20 $
# Date:        $Date: 2004-09-08 12:26:43 $
# Author:      Willem van Dorp, Ross Nicholson, Oisin Boydell - Sun Microsystems, Ireland.
#
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
# Description:
# set_soenv generates a file that contains all necessary 
# environment variables for the build proces of OpenOffice
# on Linux, NetBSD, Solaris, Windows NT and Mac OS X/Darwin.
#
# Program steps.
#
# I.    Checking the command-line arguments.
# IIa.  Declaring variables for the system commands, etc.
# IIb.  Declaring the environment variables.
# III.  Initialising the variables for the system commands, etc.
# IV.   Print out some important messages etc.
# V.    Initialising the environment variables.
# VI.   Open the output file.
# VII.  Writing the data to the output file.
# VIII. Closing output file.
# IX.   Sourcing the output file.
# X.    Set up the build environment.
# XI.   Moving the output file to the build home directory.
#
#---------------------------------------------------------------------------
#
use strict;                        # pragma
use File::Basename;


#
#--------------------------------------------------------
# IIa. Declaring variables for the system commands, etc.
#--------------------------------------------------------
#
my ( $outfile, $outfile_sh, $outfile_bat, $bootfile, $newline, $comment, $comment4nt, $compiler, $unsetenv, $setenv, $unset, $set, $ds, $ps, $cur_dir, 
     $par_dir, $I, $L, $D, $buildenv, $answer, $tmp, $Solaris, $Linux, $FreeBSD, $NetBSD, $Tru64, $Irix, $Irix64, $Winnt, $Macosx, $MINGW,
     $platform, $cygwinver, $machine_type, $empty, $no_stl, $no_gcc_include, 
     $no_gxx_include, $warnfile, $Warning, $result, $unsetvars, $unsetvarssh, $unsetvarsbat, $exportvars, $win_format_var, $perl_os);
#
#-------------------------------------------------
# IIb. Declaring environment values (constants).
#-------------------------------------------------
#
# Platform independent constant values.
my @LANGUAGES = ("ARAB", "CAT", "CHINSIM", "CHINTRAD", "CZECH", "DAN", "DTCH", "ENUS", "FREN", "GREEK", "HUNG", "ITAL",
"JAPN", "KOREAN", "POL", "PORT", "PORTBR", "RUSS", "SLOVAK", "SLOVENIAN", "SPAN", "SWED", "TURK", "FINN", "ESTONIAN" ); 
my @DICTIONARIES = ("DADK", "DEDE", "ENGB", "ENUS", "ITIT", "RURU" );
my ( $CALL_CDECL, $COMMON_OUTDIR, $NO_SRS_PATCH, $PRODUCT, $PROFULLSWITCH, $BIG_GOODIES, $BMP_WRITES_FLAG, 
     $common_build, $MK_UNROLL, $NO_REC_RES, $PROEXT, $SO3, $SOLAR_JAVA, 
     $SOLAR_PLUGIN, $TF_PACKAGES, $TF_SDBAPI, $TF_FILEURL, $UPDATER, $BUILD_DELIVER, $USE_NEWCHARSET, $USE_NEW_RSC, $VCL, 
     $TF_CFGDATA, $TF_SVDATA, $CC, $CXX,
     $USE_NAMESPACE, $BUILD_SOSL, $LOCAL_SOLENV, $ENABLEUNICODE, $NEW_JAR_PACK, $NO_BSYMBOLIC, 
     $BUILD_SOSL_RELEASE, $RSC_ONCE );
#
# Platform dependent constant values.
my ( $BIG_SVX, $COM, $CPU, $CPUNAME, $CVER, $DLLSUFFIX, $GLIBC, $GUI, $GUIBASE, $GUIENV,
      $GVER, $GVERDIR, $OS, $OSVERSION, $OUTPATH, $INPATH, $PATH_SEPERATOR, $PROSWITCH, $XPVERSION, $BOTH,
      $DEMO_ENV, $DYNAMIC_CRT, $SET_EXCEPTIONS, $emergency, $use_shl_versions, $CDPATHx, $JRELIBDIR,
      $JRETOOLKITDIR, $JRETHREADDIR, $EXCEPTIONS, $WRAPCMD );
#
#-------------------------------------------
# IIc. Declaring the environment variables.
#-------------------------------------------
#
# Help variables.
my ( $USR, $ETC, $BIN, $LIB, $LIB64, $INC, $INCLUDE, $DEV, $OPT, $LOCAL, $SOLENV, $SOLVER, $CONFIG, 
     $USR_BIN, $USR_LIB, $USR_LOCAL, $USR_CCS, $JAVA_BIN, $JAVA_LIB, $JAVA_INCLUDE,
     $SOLARENVINC, $USR_DT, $USR_OPENWIN, $TCSH_PATH, $XLIB, $XINC,
     $CYGWIN_PATH, $language, $dict, $ASM_PATH, $ps_STLPORT_LIB, $L_STLPORT_LIB,
     $STLPORT_stlport, $STLPORT_inc_stlport, $PERL_PATH );

# Environment variables.
my ( $oldPATH, $SRC_ROOT, $SO_HOME, $JAVA_HOME, $SHELL,
     $UPD, $SOLARUPD, $WORK_STAMP, $TF_ONE51, $TF_UCB, 
     $URD_ONLY, $SOLARROOT, $SOLARSRC, $RSCRES, $DEVROOT, $SOLARVER, $SOLARVERSION, $SOLARENV, 
     $STAR_INIROOT, $STAR_INIROOTOLD, $STAR_STANDLST, $STAR_SSCOMMON, $STAR_SSOLARINI, 
     $STAR_REGISTRY, $STAR_RESOURCEPATH, $DMAKEROOT, $CLASSPATH, $XCLASSPATH, $COMPATH, 
     $MSPDB_PATH, $MIDL_PATH, $CSC_PATH, $WDEVENV_PATH, 
     $LD_LIBRARY_PATH, $PATH, $SOLARDEF, $SOLAREXTRAINC, $SOLAREXTRALIB, $SOLARLIB, 
     $SOLARINC, $LOCALINI, $MAC_LIB, $PATHEXTRA, $FRAMEWORKSHOME, $COMEX, $MULTITHREAD_OBJ, $PERL, 
     $COMP_ENV, $ILIB, $JAVAHOME, $PSDK_HOME, $USE_NEW_SDK, $FRAME_HOME, 
     $NO_HIDS, $TEMP, $COMMON_BUILD_TOOLS, $WIN_GREP, $WIN_FIND, $WIN_LS,
     $WIN_GNUCOPY, $WIN_TOUCH, $STLPORT4, $USE_GCC3, $ENABLE_DEBUG, $ENABLE_STATIC_GTK,
     $PYTHONPATH, $PYTHONHOME );
#
#-------------------------------------------
# IId. Declaring the aliases.
#-------------------------------------------
#
my ( $dmake, $build, $nmake, $mkout, $deliver, $zipdep );
#

#-------------------------------------------------------------
# IIIa. Initialising constants.
#-------------------------------------------------------------
#
$UPD            = '@UPD@';          # the project's UPD
$newline        = "\n";             # Perl newline character
$unsetenv       = "unsetenv";       # c-shell command
$setenv         = "setenv";         # c-shell command
$unset          = "unset";          # msdos batch file command
$set            = "set";            # msdos batch file command
$ds             = "/";              # directory separator
$ps             = ":";              # path separator
$cur_dir        = ".";              # current directory
$par_dir        = "..";             # parrent directory
$I              = " -I";            # include search path
$L              = " -L";            # library search path
$D              = " -D";            # define search path
$Solaris        = "SunOS";          # return of uname command on Solaris
$Linux          = "Linux";          # return of uname command on Linux
$NetBSD         = "NetBSD";	        # return of uname command on NetBSD
$FreeBSD        = "FreeBSD";        # return of uname command on FreeBSD
$Tru64          = "OSF1";           # return of uname command of Tru64
$Irix           = "IRIX";           # return of uname command of Irix on a 32 bit platform
$Irix64         = "IRIX64";         # return of uname command of Irix on a 64 bit platform
$Winnt          = "WINNT";          # return of uname command on Windows NT
$Macosx         = "Darwin";         # return of uname command on Mac OS X/Darwin
$empty          = "";               # used as argument
$no_stl         = "NO_STLPORT4";    # possible argument
$warnfile       = "warn";           # logfile configure warnings.
$Warning        = "";               # container for warning messages
$STLPORT4       = '@STLPORT4@';     # Location of STLport4
$MINGW          = '@WITH_MINGWIN@'; # use MinGW for Windows build
$USE_GCC3       = '@USE_GCC3@';     # use gcc3 (only for unxlngi4 and unxfbsd5i at the moment)
$CC             = '@CC@';           # C compiler
$CXX            = '@CXX@';          # C++ compiler
$EXCEPTIONS     = '@EXCEPTIONS@';   # Exception handling type
$ENABLE_DEBUG   = '@ENABLE_DEBUG@';  # Enable a debug build
$ENABLE_STATIC_GTK = '@ENABLE_STATIC_GTK@'; # Use static gtk libraries
$WRAPCMD        = "";               # Wrapper (only for winnt)
$GLIBC		= "";               # Whether the platform uses glibc

#
#--------------------------------------------------------------------
# IV. Initialise the warning container and print a note to the user.
#--------------------------------------------------------------------
#
# Add the configure (pre-requisite) warnings to the warning container
# , $Warning.
AddWarning( "configure", "" );
#
print ("Setting up the environment for building OpenOffice.org $newline");
#
#--------------------------------------------------
# V. Setting the environment variables/values.
#--------------------------------------------------
#
# A. Checking the platform first.
#
$platform = `uname`;       # probing the platform
if ( $platform =~ m/CYGWIN/g )
{   $platform = $Winnt;
    $cygwinver = `uname -r`;
    if ( $cygwinver =~ m/^1/g )
    {   $cygwinver = "1";
    }
    else
    {
 	  $cygwinver = "b";
    }
}

chomp( $platform );

$machine_type = `uname -m`;
chomp( $machine_type );
# get perls idea for OS
# needed to differentiate cygwin/native perl on windows
$perl_os = $^O;

#
# B. Gathering information from the system.
#
# 1. Path
$oldPATH = $ENV{"PATH"};
chomp( $oldPATH );                  # cut off new line
#
# C. Setting the constant values.
#
# Setting platform independent constant values.
print "Setting platform independent values... ";
# NB: Language options now set at 'ToFile' stage. 
$NO_SRS_PATCH         = "true";
$PRODUCT              = "full";
$PROFULLSWITCH        = "product=full";
$BIG_GOODIES          = "TRUE";
$BMP_WRITES_FLAG      = "TRUE";
$BUILD_SOSL_RELEASE   = "TRUE";
$RSC_ONCE             = "TRUE";
$CALL_CDECL           = "TRUE";
$COMMON_OUTDIR        = "";
$common_build         = "";
$MK_UNROLL            = "TRUE";
$MULTITHREAD_OBJ      = "";
$NO_REC_RES           = "TRUE";
$PROEXT               = ".pro";
$SO3                  = "TRUE";
$SOLAR_JAVA           = "@SOLAR_JAVA@";
$SOLAR_PLUGIN         = "TRUE";
$TF_PACKAGES          = "TRUE";
$TF_FILEURL           = "TRUE";
$TF_CFGDATA           = "TRUE";
$TF_SVDATA            = "TRUE";
$TF_SDBAPI            = "ist_da";
$TF_UCB               = "ist_da";
$UPDATER              = "YES";
$BUILD_DELIVER        = "true";
$USE_NEWCHARSET       = "TRUE";
$USE_NEW_RSC          = "TRUE";
$VCL                  = "TRUE";
$USE_NAMESPACE        = "TRUE"; 
$BUILD_SOSL           = "true";
$LOCAL_SOLENV         = "true";
$ENABLEUNICODE        = "TRUE";
$NEW_JAR_PACK         = "TRUE";
$NO_BSYMBOLIC         = "TRUE";
$comment              = "#";           # UNIX script comment character
$comment4nt           = "rem";         # Windows 4nt script comment character

# Setting platform dependent constant values.
if ( $platform eq "$Solaris" ) 
{     print "Setting Solaris specific values... ";
   if ($machine_type eq "i86pc")
   {  $outfile        = "SolarisIntelEnv.Set";
      $CPU            = "I";
      $CPUNAME        = "INTEL";
      $DLLSUFFIX      = "si";
      $OUTPATH        = "unxsoli4";
      $COMEX          = 4;
	  $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."i386";
	  $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."i386".$ds."motif21";
	  $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."i386".$ds."native_threads";

   }
   else
   {  $outfile        = "SolarisSparcEnv.Set"; 
      $CPU            = "S";
      $COMEX            = 4;
      $CPUNAME        = "SPARC";
      $DLLSUFFIX      = "ss";
      $OUTPATH        = "unxsols4";
	  $COMEX          = 4;
	  $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."sparc";
	  $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."sparc".$ds."motif21";
	  $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."sparc".$ds."native_threads";
   }
   $BIG_SVX        = "TRUE";
   $COM            = "C52";
   $COMPATH        = '@COMPATH@'; 
   $CVER           = "C52";
   $GUI            = "UNX";
   $GUIBASE        = "unx";
   $GUIENV         = "sal";
   $GVER           = "VCL";
   $INPATH         = $OUTPATH.$PROEXT;
   $GVERDIR        = $INPATH;
   $OS             = "SOLARIS";
   $PATH_SEPERATOR = $ps;
   $PROSWITCH      = "-DPRODUCT";
}
elsif ( $platform eq "$NetBSD" ) 
{
#Set machine_type specific values: 
   if ($machine_type eq "i386")
   {  print "Setting NetBSD Intel specific values... ";
      $outfile        = "NetBSDIntelEnv.Set"; 
      $CPU            = "I";
      $CPUNAME        = "INTEL";
      $DLLSUFFIX      = "bi";
      $OUTPATH        = "unxbsdi";
      $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."i386";
      $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."i386".$ds."client";
      $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."i386".$ds."native_threads";
   }
   elsif ($machine_type eq "sparc")
   {  print "Setting NetBSD Sparc specific values... ";
      $outfile        = "NetBSDSparcEnv.Set"; 
      $CPU            = "S";
      $CPUNAME        = "SPARC";
      $DLLSUFFIX      = "bs";
      $OUTPATH        = "unxbsds";
      $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."sparc";
      $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."sparc".$ds."client";
      $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."sparc".$ds."native_threads";
   }
   elsif ($machine_type eq "powerpc")
   {  print "Setting NetBSD PPC specific values... ";
      $outfile        = "NetBSDPPCEnv.Set"; 
      $CPU            = "P";
      $CPUNAME        = "POWERPC";
      $DLLSUFFIX      = "bp";
      $OUTPATH        = "unxbsdppc";
      $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."ppc";
      $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."ppc".$ds."classic";
      $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."ppc".$ds."native_threads";
   }
   else
   { print "Unsupported NetBSD architecture: $machine_type \n";
     exit 1;
   }
   #Conditional setting depending on gcc3:
   if ($USE_GCC3 eq  "TRUE")
   {
      $CVER           = "C300";
      $OUTPATH        = $OUTPATH."2"
   }
   else
   {
      $CVER           = "C295";
   }
   # General NetBSD settings:
      $BIG_SVX        = "TRUE";
      $COM            = "GCC";
      $COMPATH        = '@COMPATH@'; 
      $GUI            = "UNX";
      $GUIBASE        = "unx";
      $GUIENV         = "sal";
      $GVER           = "VCL";
      $INPATH         = $OUTPATH.$PROEXT;
      $GVERDIR        = $INPATH;
      $OS             = "NETBSD";
      $PATH_SEPERATOR = $ps;
      $PROSWITCH      = "-DPRODUCT";
      $XPVERSION      = "3"; 
}
elsif ( $platform eq "$FreeBSD" ) 
{     print "Setting FreeBSD specific values... ";
      $outfile        = "FreeBSDEnv.Set"; 
      $BIG_SVX        = "TRUE";
      $COM            = "GCC";
      $COMPATH        = '@COMPATH@'; 
      $CPU            = "I";
      $CPUNAME        = "INTEL";
      if ($USE_GCC3 eq  "TRUE")
      {
          $CVER       = "C300";
      }
      else
      {
          $CVER       = "C295";
      }
      $DLLSUFFIX      = "fi";
      $GUI            = "UNX";
      $GUIBASE        = "unx";
      $GUIENV         = "sal";
      $GVER           = "VCL";
      $OUTPATH        = "unxfbsd";
      $INPATH         = $OUTPATH.$PROEXT;
      $GVERDIR        = $INPATH;
      $OS             = "FREEBSD";
      $PATH_SEPERATOR = $ps;
      $PROSWITCH      = "-DPRODUCT";
      $XPVERSION      = "3";
      $OSVERSION      = '@OSVERSION@';
      $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."i386";
      $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."i386".$ds."client";
      $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."i386".$ds."native_threads";
} 
elsif ( $platform eq "$Linux" ) 
{
#Set machine_type specific values: 
   if (($machine_type eq "i686") or ($machine_type eq "i586"))
   {  print "Setting Linux Intel specific values... ";
      $outfile        = "LinuxIntelEnv.Set"; 
      $CPU            = "I";
      $CPUNAME        = "INTEL";
      $DLLSUFFIX      = "li";
      $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."i386";
      $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."i386".$ds."client";
      $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."i386".$ds."native_threads";
   }
   elsif ($machine_type eq "x86_64")
   {  print "Setting Linux x86-64 specific values... ";
      $outfile        = "LinuxAMDEnv.Set";
      $CPU            = "X";
      $CPUNAME        = "X86_64";
      $DLLSUFFIX      = "lx";
      $OUTPATH        = "unxlngx4";
      # Blackdown.org JDK porting project uses `amd64' and `server' in JDK 1.4.2 RC1
      $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."amd64";
      $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."amd64".$ds."server";
      $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."amd64".$ds."native_threads";
   }
   elsif (($machine_type eq "sparc") or ($machine_type eq "sparc64"))
 
   {  print "Setting Linux Sparc specific values... ";
      $outfile        = "LinuxSparcEnv.Set"; 
      $CPU            = "S";
      $CPUNAME        = "SPARC";
      $DLLSUFFIX      = "ls";
      $OUTPATH        = "unxlngs";
      $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."sparc";
      $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."sparc".$ds."client";
      $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."sparc".$ds."native_threads";
   }
   elsif (($machine_type eq "ppc") or ($machine_type eq "ppc64"))
   {  print "Setting Linux PPC specific values... ";
      $outfile        = "LinuxPPCEnv.Set"; 
      $CPU            = "P";
      $CPUNAME        = "POWERPC";
      $DLLSUFFIX      = "lp";
      $OUTPATH        = "unxlngppc";
      $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."ppc";
      $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."ppc".$ds."classic";
      $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."ppc".$ds."native_threads";
   }
   elsif ($machine_type eq "s390")
   {  print "Setting Linux S/390 specific values... ";
      $outfile        = "LinuxS390Env.Set";
      $CPU            = "3";
      $CPUNAME        = "S390";
      $DLLSUFFIX      = "l3";
      $OUTPATH        = "unxlngs390";
      $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."s390";
      $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."s390".$ds."client";
      $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."s390".$ds."native_threads";
   }
   elsif ($machine_type eq "alpha") 
   {  print "Setting Linux Alpha specific values... ";
      $outfile        = "LinuxAlphaEnv.Set"; 
      $CPU            = "A";
      $CPUNAME        = "ALPHA_";
      $DLLSUFFIX      = "la";
      $OUTPATH        = "unxlnga";
      $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."alpha";
      $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."alpha".$ds."client";
      $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."alpha".$ds."native_threads";
   }
   elsif ($machine_type eq "armv4l") 
   {  print "Setting Linux ARM specific values... ";
      $outfile        = "LinuxARMEnv.Set"; 
      $CPU            = "R";
      $CPUNAME        = "ARM";
      $DLLSUFFIX      = "lr";
      $OUTPATH        = "unxlngr";
      $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."arm";
      $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."arm".$ds."client";
      $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."arm".$ds."native_threads";
   }
   #Conditional setting depending on gcc3 (on x86):
   if ($USE_GCC3 eq  "TRUE")
   {
      $CVER           = "C300";
      if (($machine_type eq "i686") or ($machine_type eq "i586"))
      {
        $OUTPATH      = "unxlngi4"
      }
   }
   else
   {
      $CVER           = "C295";
      if (($machine_type eq "i686") or ($machine_type eq "i586"))
      {
        $OUTPATH      = "unxlngi3"
      }
   }
   # General Linux settings:

      $BIG_SVX        = "TRUE";
      $COM            = "GCC";
      $COMPATH        = '@COMPATH@'; 
      $GLIBC          = "2REDHAT60";
      $GUI            = "UNX";
      $GUIBASE        = "unx";
      $GUIENV         = "sal";
      $GVER           = "VCL";
      $INPATH         = $OUTPATH.$PROEXT;
      $GVERDIR        = $INPATH;
      $OS             = "LINUX";
      $PATH_SEPERATOR = $ps;
      $PROSWITCH      = "-DPRODUCT";
      $XPVERSION      = "3"; 
}
elsif ( $platform eq "$Tru64" ) 
{     print "Setting Tru64 specific values... ";
      $outfile        = "Tru64AlphaEnv.Set"; 
      $BIG_SVX        = "TRUE";
      $COM            = "CXX";
      $COMPATH        = '@COMPATH@'; 
      $CPU            = "A";
      $CPUNAME        = "ALPHA_";
      $CVER           = "C62";
      $DLLSUFFIX      = "t64";
      $GUI            = "UNX";
      $GUIBASE        = "unx";
      $GUIENV         = "sal";
      $GVER           = "VCL";
      $OUTPATH        = "unxt64";
      $INPATH         = $OUTPATH.$PROEXT;
      $GVERDIR        = $INPATH;
      $OS             = "TRU64";
      $PATH_SEPERATOR = $ps;
      $PROSWITCH      = "-DPRODUCT";
      $XPVERSION      = "3";
      $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."alpha";
      $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."alpha".$ds."client";
      $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."alpha".$ds."native_threads";
} 
elsif ( $platform eq "$Irix" || $platform eq "$Irix64" )
{     print "Setting Irix specific values... ";
      $outfile        = "IrixMipsEnv.Set";
      $BIG_SVX        = "TRUE";
      if ($CC =~ "gcc" ) {
            $COM          = "GCC";
            $OUTPATH        = "unxirgm";
            if ($USE_GCC3 eq  "TRUE") {
              $CVER           = "C300";
            } else {
              $CVER           = "C295";
            }
      }
	  else {
	  	$COM            = "C730";
        $CVER           = "C730";
        $OUTPATH        = "unxirxm3";
      }
      $COMPATH        = '@COMPATH@';
      $CPU            = "M";
      $CPUNAME        = "MIPS";
      $DLLSUFFIX      = "im";
      $GUI            = "UNX";
      $GUIBASE        = "unx";
      $GUIENV         = "sal";
      $GVER           = "VCL";
      $INPATH         = $OUTPATH.$PROEXT;
      $GVERDIR        = $INPATH;
      $OS             = "IRIX";
      $PATH_SEPERATOR = $ps;
      $PROSWITCH      = "-DPRODUCT";
      $XPVERSION      = "3";
      $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."mips";
      $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."mips".$ds."client";
      $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."mips".$ds."native_threads";
}
elsif ( $platform eq "$Winnt" ) 
{ 
      $COMPATH        = PosixFormat('@COMPATH@');
      $MSPDB_PATH     = PosixFormat('@MSPDB_PATH@');
      $MIDL_PATH      = PosixFormat('@MIDL_PATH@');
      $CSC_PATH       = PosixFormat('@CSC_PATH@');
      $WDEVENV_PATH   = PosixFormat('@WDEVENV_PATH@');
      $PSDK_HOME      = PosixFormat('@PSDK_HOME@');
      $FRAME_HOME     = PosixFormat('@FRAME_HOME@');
      $USE_NEW_SDK    = "TRUE";
      $NO_HIDS        = "TRUE";
      $CPUNAME        = "INTEL";
      $CPU            = "I";
      $GUI            = "WNT";
      $GUIBASE        = "WIN";
      $GUIENV         = "WNT";
      $GVER           = "NT351";
      $OS             = "WNT";
      $BOTH           = "TRUE";
      $DEMO_ENV       = "FALSE";
      $DYNAMIC_CRT    = "TRUE";
      $SET_EXCEPTIONS = "TRUE";
      $emergency      = "FALSE";
      $use_shl_versions = "TRUE";
      $MULTITHREAD_OBJ = "TRUE";
  if ( $MINGW eq "yes" )
  {   # At the moment this implies the use of tcsh
	  print "Setting Windows NT cygwin MinGW specific values... ";
	  $WRAPCMD        = "guw.pl";
      $outfile        = "winmingw.set"; 
      $COM            = "GCC";
      $CVER           = "C300";
      $DLLSUFFIX      = "gi";
      $OUTPATH        = "wntgcci";
      $INPATH         = $OUTPATH.$PROEXT;
      $GVERDIR        = $INPATH;
      $PATH_SEPERATOR = ':';
  }
  else # The MSVC section starts here
  {   $outfile        = "winenv.set";
      $COM            = "MSC";
      # COMPATH for MSC is differently used
      $COMPATH        =~ s/\/bin$//i;
      $DLLSUFFIX      = "mi";
      $OUTPATH        = "wntmsci@COMEX@";
      $INPATH         = $OUTPATH.$PROEXT;
      $GVERDIR        = $INPATH;
      $COMEX          = '@COMEX@';
      if ( "@COMEX@" eq "10" ) { # .NET 2003 needs M1310
          $CVER        = "M1310";
      } elsif ( "@COMEX@" eq "8" ) { # .NET 2002 needs M1300
          $CVER        = "M1300";
      } else {                   # Unsupported
          die "Unsupported value for COMEX variable.\n";
      }

  if ( "@USE_SHELL@" ne "4nt" )
  {   print "Setting Windows NT cygwin without 4NT specific values... ";
	  $WRAPCMD        = "guw.pl";
	  $CC             = $WRAPCMD." ".$CC;
	  $CXX            = $WRAPCMD." ".$CXX;
      $PATH_SEPERATOR = ':';
  }
  else # "@USE_SHELL@" ne "4nt"
  {   print "Setting Windows NT with 4NT specific values... ";
      # Change path to lower case.
      $COMPATH        = lc $COMPATH;
      $PATH_SEPERATOR = ';';
  }

  }
}
elsif ( $platform eq "$Macosx" ) 
{     print "Setting Mac OS X/Darwin specific values... ";
      $outfile        = "MacosxEnv.Set"; 
      $BIG_SVX        = "TRUE";
      $COM            = "GCC";
      $COMPATH        = '@COMPATH@'; 
      $CPU            = "P";
      $CPUNAME        = "POWERPC";
   if ($USE_GCC3 eq  "TRUE")
   {
      $CVER           = "C300";
   }
   else
   {
      $CVER           = "C295";
   }
      $DLLSUFFIX      = "mxp";
      $GUI            = "UNX";
      $GUIENV         = "sal";
      $GVER           = "VCL";
      $OUTPATH        = "unxmacxp";
      $INPATH         = $OUTPATH.$PROEXT;
      $GVERDIR        = $INPATH;
      $OS             = "MACOSX";
      $PATH_SEPERATOR = $ps;
      $PROSWITCH      = "-DPRODUCT";
      # GUIBASE is set below; may be "aqua" or "unx".
}
elsif ( $platform eq "AIX" )
{
   $machine_type = `uname -p`;  # trust AIX to be different!
   chomp( $machine_type );
   if( $machine_type ne "powerpc" )
   {
	print "\nAIX has only been ported and tested on powerpc\n";
	AddWarning( "set_soenv", "Machine type $machine_type has not been tested");
   }
   print "Setting Linux PPC specific values... ";
   $outfile        = "aixPPCEnv.Set"; 
   $CPU            = "P";
   $CPUNAME        = "POWERPC";
   $DLLSUFFIX      = "ap";
   $OUTPATH        = "unxlngppc";
   $JRELIBDIR      = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."ppc";
   $JRETOOLKITDIR  = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."ppc".$ds."classic";
   $JRETHREADDIR   = '$JAVA_HOME'.$ds."jre".$ds."lib".$ds."ppc".$ds."native_threads";
   $BIG_SVX        = "TRUE";
   $COM            = "GCC";
   $CVER           = "C300";
   $COMPATH        = '@COMPATH@'; 
   $GUI            = "UNX";
   $GUIBASE        = "unx";
   $GUIENV         = "sal";
   $GVER           = "VCL";
   $INPATH         = $OUTPATH.$PROEXT;
   $GVERDIR        = $INPATH;
   $OS             = "AIX";
   $PATH_SEPERATOR = $ps;
   $PROSWITCH      = "-DPRODUCT";
   $XPVERSION      = "3"; 
}
else {
	print "\nset_soenv:  Cannot figure out what platform you are running\n";
	print "For $platform and machine type $machine_type\n";
	exit 1;
}
print "done\n";

#
# D. Gathering directory information from the user.
#
# If the directory does not exist ask the user to create it.
# 1. OpenOffice.org build home directory.
$SRC_ROOT  = `pwd`; 
$SRC_ROOT =~ s/\/config_office//;
chomp($SRC_ROOT);
CheckPathExist( $SRC_ROOT );

#-----------------------------------------------------------------------------------------------------
# Copy top level makefile from config_office/ to $SRC_ROOT
#-----------------------------------------------------------------------------------------------------
if (! -e "makefile.rc")
{  AddWarning( "set_soenv", "makefile.rc not found in config_office/. Could not copy to SRC_ROOT." );
}
else
{  `cp -f makefile.rc $SRC_ROOT/makefile.mk`;
}

# 2. Java home directory.
# JAVA_HOME as argument from autoconf.
$JAVA_HOME = PosixFormat('@JAVA_HOME@') ;

if ( $platform eq "$Winnt" ) {
   $JAVA_HOME =~ s/[\s\/]+$//;	# remove trailing \n or \/ if there is any.
}
# 3. Tcsh path.
# Check whether autoconf found the Tcsh path.
if ("@USE_SHELL@" eq "tcsh") 
{  # SHELL as argument from autoconf.
   $SHELL = '@TCSH@'."\/tcsh";
   $TCSH_PATH = '@TCSH@';
}

if ( '@STLPORT4@' eq $no_stl )
{
   $STLPORT4 = "$no_stl";
}

# ml.exe assembler path for Windows users.
if ($platform eq "$Winnt")
{  $ASM_PATH = PosixFormat('@ASM_HOME@');
}
#
# E. Determining the envionment values based on the information
#    that was gathered earlier on.
#
print "Setting the environment variables... ";
$USR                  = $ds."usr";
$ETC                  = $ds."etc";
$BIN                  = $ds."bin";
$LIB                  = $ds."lib";
$LIB64                = $ds."lib";
$LIB64               .= "64"
if ($platform eq "Linux" && $machine_type eq "x86_64");
$INC                  = $ds."inc";
$INCLUDE              = $ds."include";
$DEV                  = $ds."dev";
$OPT                  = $ds."opt";
$LOCAL                = $ds."local";
$SOLENV               = $ds."solenv";
$SOLVER               = $ds."solver";
$CONFIG               = $ds."config";
$USR_BIN              = $USR.$BIN;
$USR_LIB              = $USR.$LIB64;
$USR_LOCAL            = $USR.$ds."local";
$USR_CCS              = $USR.$ds."ccs";
$USR_OPENWIN          = $USR.$ds."openwin";
$USR_DT               = $USR.$ds."dt";
$COMMON_BUILD_TOOLS   = '$SRC_ROOT'.$ds."external".$ds."common";

# Generate alternate output file for sh?
if ('@USE_SHELL@' eq "tcsh")
{  $outfile_sh = $outfile.".sh";
}
else
{  undef $outfile_sh;
}

# Generate output file for 4nt?
if ("@USE_SHELL@" eq "4nt")
{  $outfile_bat = $outfile;
   $outfile_bat =~ s/set$/bat/i;
}
else
{  undef $outfile_bat;
}

if ($STLPORT4 ne $no_stl) {
	$ps_STLPORT_LIB		= $ps.'$STLPORT4'.$LIB64;
	$L_STLPORT_LIB		= $L.'$STLPORT4'.$LIB64;
	$STLPORT_stlport 	= $I.'$STLPORT4'.$ds.'stlport';
	$STLPORT_inc_stlport	= $I.'$STLPORT4'.$ds.'include'.$ds.'stlport';
} else {
        $ps_STLPORT_LIB         = "";
        $L_STLPORT_LIB          = "";
        $STLPORT_stlport        = $I.$SRC_ROOT.$SOLVER.$ds.$UPD.$ds.$INPATH.$INC.$ds."stl";
        $STLPORT_inc_stlport    = "";
}


# Windows NT only variables
if ($platform eq "$Winnt")
{  
   if ( $JAVA_HOME ne "" )
   {
      $JAVA_LIB             = $JAVA_HOME.$LIB;
   }
   # Import SystemDrive enviroment variable
   use Env qw(SYSTEMDRIVE);
   # Change $SYSTEMDRIVE to lower case.
   $SYSTEMDRIVE          = lc $SYSTEMDRIVE;
   use Env qw(SYSTEMROOT);
   $CYGWIN_PATH          = PosixFormat('@CYGWIN_PATH@'); # Windows bash path
   $WIN_GREP             = '$CYGWIN_PATH'.$ds."grep.exe";
   $WIN_FIND             = '$CYGWIN_PATH'.$ds."find.exe";
   $WIN_LS               = '$CYGWIN_PATH'.$ds."ls.exe";
   $WIN_GNUCOPY          = '$CYGWIN_PATH'.$ds."cp.exe";
   $WIN_TOUCH            = '$CYGWIN_PATH'.$ds."touch.exe";
}

if ( $JAVA_HOME ne "" )
{
   $JAVA_BIN             = $JAVA_HOME.$BIN;
   $JAVA_INCLUDE         = $JAVA_HOME.$ds."include";
}


$PERL                 = PosixFormat('@PERL@'); # Perl program
$PERL_PATH            = dirname('@PERL@'); # Perl Path 
$XLIB                 = PosixFormat('@XLIB@'); # X11 libraries
$XINC                 = PosixFormat('@XINC@'); # X11 includes


# Mac OS X/Darwin only variables.
if ( $platform eq "$Macosx" )
{  $FRAMEWORKSHOME       = $ds."System".$ds."Library".$ds."Frameworks";
   if ( $XLIB eq "no_x_libraries" ) {
      $GUIBASE  = "aqua";
   } else {
      $GUIBASE  = "unx";
   }
}

# Same as UPD, used in the buildproces.
$SOLARUPD             = $UPD;
# The project's workstamp.
$WORK_STAMP            = "@SOURCEVERSION@";
#
$TF_ONE51             = $WORK_STAMP;
# 
$URD_ONLY             = $WORK_STAMP;
# Location of the build root.
$SOLARROOT            = '$SRC_ROOT';
# Location of the source.
$SOLARSRC             = '$SRC_ROOT';
# The location of the RESOURCE files.
$RSCRES               = '$SRC_ROOT';
#
$DEVROOT              = '$SRC_ROOT';
# Set solenv and solver to given or default values. 
# Location of the solenv tree.
if ('@LOCAL_SOLENV@' eq "DEFAULT")
{  $SOLARENV          = $SRC_ROOT.$SOLENV;
}
else
{  $SOLARENV          =  PosixFormat('@LOCAL_SOLENV@');
}
# Location of the solver tree.
if ('@LOCAL_SOLVER@' eq "DEFAULT")
{  $SOLARVER          = $SRC_ROOT.$SOLVER;
}
else
{  $SOLARVER          = PosixFormat('@LOCAL_SOLVER@');
}
#Location of Solar version.
$SOLARVERSION         = '$SOLARVER'.$ds.$UPD;

$SOLARENVINC          = '$SOLARENV'.$INC;
# Location of 
$LOCALINI             = '$SOLARENV'.$CONFIG;
# Location of 
$STAR_INIROOT         = '$SOLARENV'.$CONFIG;
# Location of 
$STAR_INIROOTOLD      = '$SOLARENV'.$CONFIG;
# Location of 
$STAR_STANDLST        = '$SOLARENV'.$CONFIG.$ds."stand.lst";
# Location of 
$STAR_SSCOMMON        = '$SOLARENV'.$CONFIG.$ds."ssolar.cmn";
# Location of 
$STAR_SSOLARINI       = '$SOLARENV'.$CONFIG.$ds."ssolar.ini";
# Path to the OpenOffice.org recourses.
$STAR_RESOURCEPATH    = '$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$BIN;
# Location of the registry file.
$STAR_REGISTRY        = '$STAR_RESOURCEPATH'.$ds."applicat.rdb";
# Location of dmake resource. 
$DMAKEROOT            = '$SOLARENVINC'.$ds."startup";
# Location of JDK classes .zip file.
# but in jdk 1.2 it is called rt.jar and it lives in jre/lib
$CLASSPATH            = '$JAVA_HOME'.$ds.'jre'.$LIB.$ds."rt.jar".$ps.'.';
# Location of the JDK supported standard classes.zip file.
# see above for why the change
$XCLASSPATH           = '$JAVA_HOME'.$ds.'jre'.$LIB.$ds."rt.jar".$ps.'.';

# Paths to run time shared libraries.
if ($platform eq "$Solaris") 
{  $LD_LIBRARY_PATH   = $cur_dir.
                        $ps.$USR_DT.$LIB.
                        $ps.$USR_OPENWIN.$LIB.
                        $ps.$USR_LOCAL.$LIB.
                        $ps.$par_dir.$LIB.
                        $ps_STLPORT_LIB.
                        $ps.$JRELIBDIR.
                        $ps.$JRETOOLKITDIR.
                        $ps.$JRETHREADDIR.
                        $ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$LIB;
}
elsif (($platform eq "$Linux") || ($platform eq "$NetBSD") ||
       ($platform eq "$Tru64") || ($platform eq "$FreeBSD") ||
	   ($platform eq "AIX") )
{  $LD_LIBRARY_PATH   = $cur_dir.
                        $ps.'$SOLARENV'.$ds.'$INPATH'.$LIB.
                        $ps.$JRELIBDIR.
                        $ps.$JRETOOLKITDIR.
                        $ps.$JRETHREADDIR.
                        $ps.$par_dir.$LIB64.
                        $ps_STLPORT_LIB.
                        $ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$LIB.
                       $ps.$ENV{'LD_LIBRARY_PATH'};
}
elsif ($platform eq "$Irix" || $platform eq "$Irix64")
{  $LD_LIBRARY_PATH   = $cur_dir.
                        $ps.'$SOLARENV'.$ds.'$INPATH'.$LIB.
                        $ps.$JRELIBDIR.
                        $ps.$JRETOOLKITDIR.
                        $ps.$JRETHREADDIR.
                        $ps.$USR_LOCAL.$LIB.
                        $ps.$par_dir.$LIB.
                        $ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$LIB;
}
elsif ($platform eq $Macosx)
{  $LD_LIBRARY_PATH   = '$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$LIB.
                        $ps_STLPORT_LIB;
}
elsif ($platform ne $Winnt )
{  AddWarning( "set_soenv", "$platform not configured for runtime shared libraries" );
}
	
# Compiler directives.
if ($platform eq "$Solaris") 
{  $SOLARDEF          = $D."UNX".
                        $D.$COM.
                        $D.$GVER.
                        $D."_PTHREADS".
                        $D."NO_AUDIO".
                        $D."SYSV".
                        $D.$OS.
                        $D.$CPUNAME.
                        $D."SUN".
                        $D."SUN4".
                        $D."_REENTRANT".
                        $D."_POSIX_PTHREAD_SEMANTICS".
                        $D."SUPD=$UPD".
                        $D."PRODUCT".
                        $D."UPDVER=".'""'."'".'"'."'".'"'."SV$UPD".'"'."'".'"'."'".'"'.'"';
}
elsif (($platform eq "$Linux") || ($platform eq "$NetBSD") ||
	($platform eq "$FreeBSD") || ($platform eq "$Tru64") ||
	($platform eq "$Irix") || ($platform eq "$Irix64") ||
	($platform eq "AIX") )
{  $SOLARDEF          = $D."UNX".
                        $D.$COM.
                        $D.$CVER.
                        $D.$GVER.
                        $D.$OS.
                        $D.$CPUNAME;
    if  ($platform eq "$FreeBSD")
    {  $SOLARDEF     .= $D."X86".
                        $D."OSVERSION=$OSVERSION".
                        " @PTHREAD_CFLAGS@";
    }
    $SOLARDEF        .= $D."_REENTRANT".
					    $D."_POSIX_PTHREAD_SEMANTICS";
    if  ($GLIBC ne "" )
    {  $SOLARDEF     .= $D."GLIBC=".$GLIBC;
    }
    $SOLARDEF        .= $D."SUPD=$UPD".
                        $D."PRODUCT".
                        $D."UPDVER=".'""'."'".'"'."'".'"'."SV$UPD".'"'."'".'"'."'".'"'.'"';
}
elsif ($platform eq "$Macosx") {
	;
}
elsif ($platform ne $Winnt )
{  AddWarning( "set_soenv", "$platform not configured for compiler directives" );
}

# Location used by the linker to create libraries.
if ($platform eq "$Solaris") 
{  $SOLAREXTRALIB     = $L.$par_dir.$LIB.
                        $L.'$SOLARENV'.$ds.'$OUTPATH'.$ds."lib.solaris.2.6".
                        $L.$LIB.
                        $L.$USR.$LIB.
                        $L.$USR.$LOCAL.$LIB.
                        $L.$USR_DT.$LIB.
                        $L.$USR_OPENWIN.$LIB;
}
elsif (($platform eq "$Linux") || ($platform eq "$NetBSD") ||
	($platform eq "$Tru64") || ($platform eq "$Irix") ||
	($platform eq "$Irix64") || ($platform eq "$FreeBSD") ||
	($platform eq "AIX"))
{
   $SOLAREXTRALIB     = $L.$par_dir.$LIB64;
}
elsif ($platform eq "$Macosx") 
{  $SOLAREXTRALIB     = $L.$LIB.
                        $L.$USR.$LIB;
}
elsif ($platform ne $Winnt )
{  AddWarning( "set_soenv", "$platform not configured for linkage create libraries" );
}

# Windows NT only variables
if ($platform eq "$Winnt")
{  $COMP_ENV          = $OUTPATH;

   $JAVAHOME          = '$JAVA_HOME';

   $ILIB             = $cur_dir.$ps_STLPORT_LIB.$ps.
                        $ps.$SOLARVER.$ds.$UPD.$LIB.
                        $ps.$SOLARVER.$ds.$UPD.$ds.$INPATH.$LIB.
                        $ps.$SOLARENV.$ds.$OUTPATH.$LIB.
                        $ps.$JAVA_HOME.$LIB.
                        $ps.'$PSDK_HOME'.$LIB.
                        $ps.'$FRAME_HOME'.$LIB;
   # Mingw is different
   if ( $COM eq "MSC" )
   {  $ILIB       .= $ps.'$COMPATH'.$LIB;
   }

   $JAVAHOME          = '$JAVA_HOME';

}
     
# The general environment path.
if (($platform eq "$Linux")  || ($platform eq "$NetBSD") ||
    ($platform eq "$Tru64")  || ($platform eq "$Irix") ||
    ($platform eq "$Irix64") || ($platform eq "$FreeBSD") ||
    ($platform eq "AIX")     || ($platform eq "$Solaris"))
{  $PATH              = $cur_dir.
                        $ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$BIN.
                        $ps.'$SOLARENV'.$ds.'$OUTPATH'.$BIN.
                        $ps.'$SOLARENV'.$BIN;

   if ($platform eq "$Solaris") {
	$PATH .= $ps.$USR_CCS.$BIN;
   }

   $PATH             .= $ps.$oldPATH;

   my @javaBits;
   if ( $JAVA_HOME ne "" ) {
      @javaBits = ( '$JAVA_HOME'.$BIN, 'javac' );
   } else {
      @javaBits = (); 
   }
   $PATH              = GetCorrectPath ($PATH, $COMPATH, $CC,
                                        $PERL_PATH, 'perl',
					$TCSH_PATH, 'tcsh',
                                        @javaBits);
}

elsif ($platform eq "$Winnt")
{ 
   my ( $noldPATH );
   $noldPATH = $oldPATH;

   # convert path to posix if using native NT perl
   $noldPATH = PosixFormat($noldPATH);

   $PATH              = $cur_dir.
                        $ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$BIN.
                        $ps.'$SOLARENV'.$ds."bin".
                        $ps.'$SOLARENV'.$ds.'$OUTPATH'.$BIN;

   if ( $JAVA_HOME ne "" )
   {
      # hack either "hotspot" or "client" should be used, depending on the jdk version:
      # 1.2.x   -   no such directory, unsupported 
      # 1.3.x   -   hotspot, client missing
      # 1.4.x   -   client, hotspot missing
      
      $PATH .= $ps.$JAVA_HOME.$BIN;
	  if ( -d $JAVA_HOME.$ds."jre".$ds."bin".$ds."hotspot" ) {
		  $PATH .= $ps.$JAVA_HOME.$ds."jre".$ds."bin".$ds."hotspot";
	  }
	  if ( -d $JAVA_HOME.$ds."jre".$ds."bin".$ds."client" ) {
		  $PATH .= $ps.$JAVA_HOME.$ds."jre".$ds."bin".$ds."client";
	  }
   }
   # Cygwin or MSVC++ Environement sets the PATH variable, dont add $COMPATH to $PATH !
   # anyway, add if path to compiler isn't already set in PATH
   if ( ! ( $noldPATH =~ /(?:[:]|\A)(?:$COMPATH)(?:[:]|\Z|$ds)/ ) )
   {   # Mingw is different
       if ( $COM eq "MSC" ) {
          $PATH .= $ps.'$COMPATH'.$BIN;
       } else {
          $PATH .= $ps.'$COMPATH';
       }
   }
   if ( $COM eq "MSC" ) {
	   # for MS-Visual Studio 6.0 to find mspdb60.dll (needed by CL.EXE C/C++ Compiler) 
	   # and rcdll.dll (need by RC.EXE -- 32 bit Resource Compiler) location
	   # and
	   # for .NET to find mspdb70.dll (needed by CL.EXE C/C++ Compiler)
	   if ( $noldPATH !~ /(?:[:]|\A)(?:$MSPDB_PATH)(?:[:]|\Z)/ ) {
		   $PATH .= $ps.$MSPDB_PATH;
	   }
	   if ( ( $COMEX eq "8" ) || ( $COMEX eq "10" ) ) {
		   # .NET needs midl.exe
		   if ( $noldPATH !~ /(?:[:]|\A)(?:$MIDL_PATH)(?:[:]|\Z)/ ) {
			   $PATH .= $ps.$MIDL_PATH;
		   }
		   # .NET needs csc.exe
		   if ( $noldPATH !~ /(?:[:]|\A)(?:$CSC_PATH)(?:[:]|\Z)/ ) {
			   $PATH .= $ps.$CSC_PATH;
		   }
		   # .NET needs wdevenv.exe
		   if ( $noldPATH !~ /(?:[:]|\A)(?:$WDEVENV_PATH)(?:[:]|\Z)/ ) {
			   $PATH .= $ps.$WDEVENV_PATH;
		   }
	   }
   }

   # Check if $PERL_PATH is already set in PATH
   if ( ! ( $noldPATH =~ /(?:[:]|\A)(?:$PERL_PATH)(?:[:]|\Z)/ ) )
   {
	$PATH          .= $ps.'${PERL_PATH}';
   }
   # Check if $TCSH_PATH is already set in PATH
   if ( ( "'@USE_SHELL@'" eq "tcsh" ) && ( ! $noldPATH =~ /(?:[:]|\A)(?:$TCSH_PATH)(?:[:]|\Z)/ ) )
   {   $PATH          .= $ps.$TCSH_PATH;
   }
   if ( ($COM eq "MSC") && ($ASM_PATH ne "ASM_IN_PATH") )
   {   $PATH          .= $ps.'${ASM_PATH}';
   } 
   # unzip.exe path for Windows users.
   if( "@ZIP_HOME@" ne "ZIP_IN_PATH")
   {  
       $PATH          .= $ps.PosixFormat('@ZIP_HOME@');
   }
   # Check if $CYGWIN_PATH is already set in PATH
   if ( ! $noldPATH =~ /(?:[:]|\A)(?:$CYGWIN_PATH)(?:[:]|\Z)/ )
   {
	   $PATH      .= $ps.'$CYGWIN_PATH';
   }
   $PATH              .= $ps.$noldPATH.
                         $ps_STLPORT_LIB;
}

elsif ($platform eq $Macosx)
{  $PATH              = $cur_dir.
                        $ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$BIN.
                        $ps.'$SOLARENV'.$ds.'$OUTPATH'.$ds."UNXP".
                        $ps.'$SOLARENV'.$ds.'$OUTPATH'.$BIN.
                        $ps.$USR.$BIN.
                        $ps.$ds."Local".$ds."Users".$ds."buildso".$ds."bin".$ds."powerpc-apple-macos".
                        $ps.$ds."Local".$ds."Users".$ds."buildso".$ds."bin".
                        $ps.$BIN.
                        $ps.$USR.$ds."sbin".
                        $ps.$ds."sbin".
                        $ps.'$SOLARENV'.$BIN.
                        $ps.$USR_LOCAL.$BIN.
                        $ps.$USR.$ds."X11R6".$BIN.
                        $ps.$USR_LOCAL.$ds."sbin";
                        
  # PATHEXTRA variable for Macosx.
  $PATHEXTRA         = $USR_BIN.
                        $ps.$BIN.
                        $ps.$USR.$ds."sbin".
                        $ps.$ds."sbin".
                        $ps.'$SOLARENV'.$BIN;
}
else
{  AddWarning( "set_soenv", "$platform not configured for general environment paths" );
}

# Linker library search directory paths. 
if ($platform eq "$Solaris") 
{  $SOLARLIB          = $L.$par_dir.$LIB.
                        $L.'$SOLARENV'.$ds.'$OUTPATH'.$LIB.
                        $L.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$LIB.
                        $L.'$SOLARENV'.$ds.'$OUTPATH'.$LIB.
                        $L.'$SOLARENV'.$ds.'$OUTPATH'.$LIB."solaris.2.6".
                        $L.$LIB.
                        $L.$USR_LIB.
                        $L.$USR_LOCAL.$LIB.
                        $L.$USR_DT.$LIB.
                        $L.$USR_OPENWIN.$LIB.
                        $L.'$JAVA_HOME'.$LIB.
                        $L.$JRELIBDIR.
                        $L.$JRETOOLKITDIR.
                        $L.$JRETHREADDIR.
                        $L_STLPORT_LIB.
                        $L.$XLIB;
}
elsif (($platform eq "$Linux")  || ($platform eq "$NetBSD") ||
	($platform eq "$Tru64")  || ($platform eq "$Irix") ||
	($platform eq "$Irix64") || ($platform eq "AIX") ||
	($platform eq "$FreeBSD"))
{  $SOLARLIB          = $L.$par_dir.$LIB.
                        $L.'$SOLARENV'.$ds.'$OUTPATH'.$LIB.
                        $L.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$LIB.
                        $L.'$SOLARENV'.$ds.'$OUTPATH'.$LIB.
                        $L.'$JAVA_HOME'.$LIB.
                        $L.$JRELIBDIR.
                        $L.$JRETOOLKITDIR.
                        $L.$JRETHREADDIR.
                        $L_STLPORT_LIB.
                        $L.$XLIB;
}
elsif ($platform eq "$Winnt")
{  $SOLARLIB          = $L.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$LIB.
                        $L.$par_dir.$LIB.
                        $L_STLPORT_LIB.
                        $L.'$SOLARENV'.$ds.'$OUTPATH'.$LIB;
} 
elsif ($platform eq "$Macosx") 
{  $SOLARLIB          = $L.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$LIB.
                        $L_STLPORT_LIB.
                        $L.$USR_LIB;
    # [ed] 6/15/02 Add in X11 libraries onto the library path
    if ($GUIBASE eq "unx") {
       $SOLARLIB      .= $L.$XLIB;
    }

}
# Location of the compiler include search directory paths.
$SOLARINC             = $I.$cur_dir.
                        $I.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$INC.$ds."stl".
                        $I.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$INC.$ds."external".
                        $I.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$INC.
                        $I.'$SOLARENV'.$ds.'$OUTPATH'.$INC.
                        $I.'$SOLARENV'.$INC.
                        $I.'$SRC_ROOT'.$ds."res";

if (($platform eq "$Solaris") or ($platform eq "$Linux") or ($platform eq "$Tru64") or ($platform eq "$FreeBSD") or ($platform eq "$NetBSD") or ($platform eq "$Irix") or ($platform eq "$Irix64"))
{
$SOLARINC	     .= $STLPORT_stlport;
if ($platform eq "$Linux" || $platform eq "$FreeBSD" || $platform eq "$NetBSD")
{
# This simply adds an include path, so even cases that break the FHS work
$SOLARINC            .= $STLPORT_inc_stlport;
}
if ($platform eq "$Solaris")
{
$SOLARINC            .= '/SC5 ';
}
# Platform dependent include path at the top of this list of include paths
if ($platform eq "$Solaris")
{   my $temp;
    $temp =~ s:$COMPATH:/bin\$:;
    $SOLARINC         .= $I.$temp.$ds."include";
}
if ($platform eq "$Linux")
{
# This simply adds an include path, so even cases that break the FHS work
   $SOLARINC         .= $STLPORT_inc_stlport;
}


   $SOLARINC      .= $I.'$SOLARENV'.$INC.$ds."Xp31".
                     $I.'$JAVA_HOME'.$INCLUDE;

   #include system dependent Java include directory

   if ($platform eq "$Solaris")
   {  $SOLARINC   .=$I.'$JAVA_HOME'.$INCLUDE.$ds."solaris";
   }
   elsif  (($platform eq "$Linux") || ($platform eq "$Tru64"))
   {  $SOLARINC   .=$I.'$JAVA_HOME'.$INCLUDE.$ds."linux";
   }
   elsif ($platform eq "$FreeBSD")
   {
      $SOLARINC   .=$I.'$JAVA_HOME'.$INCLUDE.$ds."freebsd";
      $SOLARINC   .=$I.'$JAVA_HOME'.$INCLUDE.$ds."bsd";
   }
   elsif ($platform eq "$NetBSD")
   {  $SOLARINC   .=$I.'$JAVA_HOME'.$INCLUDE.$ds."netbsd";
   }
   elsif (($platform eq $Irix) || ($platform eq $Irix64))
   {  $SOLARINC   .=$I.'$JAVA_HOME'.$INCLUDE.$ds."irix";
   }

   #java threads include path

   $SOLARINC          .=$I.'$JAVA_HOME'.$INCLUDE.$ds."native_threads".$ds."include";

    #The tail, if needed
    if (($platform eq "$Linux") || ($platform eq "$FreeBSD") ||
	   ($platform eq "$NetBSD"))
    {  $SOLARINC  .= $I.$XINC;
    }
    elsif ($platform eq "$Tru64") 
    {  $SOLARINC  .= $I.$XINC.
                     $I.$USR.$INCLUDE;
    }
}
elsif ($platform eq "$Winnt")
{  $SOLARINC         .= $STLPORT_stlport.
                        $I.'$JAVA_HOME'.$ds."include".$ds."win32".
                        $I.'$JAVA_HOME'.$ds."include".
                        $I.'$PSDK_HOME'.$INCLUDE;
   # Mingw is different
   if ( $COM eq "MSC" )
   { $SOLARINC       .= $I.'$COMPATH'.$ds."include";
   }
}
elsif ($platform eq "$Macosx")
{  $SOLARINC         .= $STLPORT_stlport.
						$I.$FRAMEWORKSHOME.$ds."JavaVM.framework".$ds."Versions".$ds."Current".$ds."Headers".
                        $I.$FRAMEWORKSHOME.$ds."JavaVM.framework".$ds."Headers";
   # [ed] 6/15/02 Add in X11 headers as appropriate for the build
   if ($GUIBASE eq "unx") {
      $SOLARINC      .= $I.$XINC.
                        $I.$XINC.$ds."freetype2";
   }
}
else
{  AddWarning( "set_soenv", "$platform not configured for system dependant include dir" );
}

$PYTHONPATH           = '.'.$ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$ds.'lib'.$ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$ds.'lib'.$ds.'python'.$ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$ds.'lib'.$ds.'python'.$ds.'lib-dynload';
$PYTHONHOME           = '$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH';

#
print "done\n";

#
# F. Setting the different aliases.
#
print "Setting the aliases... ";
# 1. alias for a full product make. 
# ToFile will take care for the right 4nt format
	$mkout           = '"perl $SOLARENV/bin/mkout.pl"';
	$deliver         = '"perl $SOLARENV/bin/deliver.pl"';
	$build           = '"perl $SOLARENV/bin/build.pl"';
	$zipdep          = '"perl $SOLARENV/bin/zipdep.pl"';
# 3. alias for a full product make
$nmake           = '"dmake"';
print "done\n";
#
#--------------------------
# VI. Open the output file.
#--------------------------
#
open( OUT, ">$outfile" ) ||
   die "Cannot open $outfile: $!\n";

if(defined($outfile_sh))
{  # Create sh environment file
   open( OUT_SH, ">$outfile_sh" ) ||
   die "Cannot open $outfile_sh: $!\n";
}

if(defined($outfile_bat))
{  # Create bat environment file
   open( OUT_BAT, ">$outfile_bat" ) ||
   die "Cannot open $outfile_bat: $!\n";
}

#
#------------------------------------------
# VII. Writing the data to the output file.
#------------------------------------------
#
# Write file header.
CreateFileHeader( *OUT, $UPD, $platform, "(t)csh", "#" );
CreateFileHeader( *OUT_SH, $UPD, $platform, "sh/bash/ksh", "#" ) if defined($outfile_sh);
CreateFileHeader( *OUT_BAT, $UPD, $platform, "4nt", "rem" ) if defined($outfile_bat);
#
# Writing the platform independent constant values to file.
# (c = comment, e = environment variable, a = alias )
ToFile( "SRC_ROOT",	     $SRC_ROOT,          "e" );
ToFile( "SHELL",             $SHELL,             "e" );
ToFile( "JAVA_HOME",         $JAVA_HOME,         "e" );
if ( '@JDK@' ne '' )
{ ToFile( "JDK",             "@JDK@",            "e" );
}
ToFile( "XSLTPROC",          "@XSLTPROC@",       "e" );
ToFile( "ANT_HOME",          "@ANT_HOME@",       "e" );
ToFile( "ANT_LIB",           "@ANT_LIB@",        "e" );
ToFile( "JDKLIB",            $JAVA_LIB,          "e" );
ToFile( "STLPORT4",          $STLPORT4,          "e" );
ToFile( "ASM_PATH",          $ASM_PATH,          "e" );
ToFile( "Empty",             $empty,             "n" );
ToFile( "BUILD_SOSL",        $BUILD_SOSL,        "e" );
ToFile( "LOCAL_SOLENV",      $LOCAL_SOLENV,      "e" );
ToFile( "FRAMEWORKSHOME",    $FRAMEWORKSHOME,    "e" );
ToFile( "Empty",             $empty,             "n" );
ToFile( "Platform independent constant values.", $empty, "c" );
# dictionaries
if ('@WITH_DICT@' =~ m/ALL,/s)
{
   foreach $dict (@DICTIONARIES)
   {
      ToFile( "DIC_$dict",     "TRUE",          "e" );
   }
}
else
{	
   foreach $dict (@DICTIONARIES)
   {   if ('@WITH_DICT@' =~ m/$dict,/s)
       {   my $val="TRUE";
           ToFile( "DIC_$dict",     $val,          "e" );
       }
       else
       {   my $val;
           undef $val;
           ToFile( "DIC_$dict",     $val,          "e" );
       }
   }
}
# Languages
if ('@WITH_LANG@' =~ m/ALL,/s)
{
   foreach $language (@LANGUAGES)
   {
      ToFile( "RES_$language",     "TRUE",          "e" );
   }
}
else
{	
   foreach $language (@LANGUAGES)
   {   if ('@WITH_LANG@' =~ m/$language,/s || $language eq "ENUS" )
       {
           ToFile( "RES_$language",   "TRUE",          "e" );
       }
       else
       {   my $val;
           undef $val;
           ToFile( "RES_$language",     $val,          "e" );
       }
   }
}
ToFile( "CALL_CDECL",        $CALL_CDECL,        "e" );
ToFile( "COMMON_OUTDIR",     $COMMON_OUTDIR,     "e" );
ToFile( "common_build",      $common_build,      "e" );
ToFile( "NO_SRS_PATCH",      $NO_SRS_PATCH,      "e" );
ToFile( "PRODUCT",           $PRODUCT,           "e" );
ToFile( "PROFULLSWITCH",     $PROFULLSWITCH,     "e" );
ToFile( "BIG_GOODIES",       $BIG_GOODIES,       "e" );
ToFile( "BMP_WRITES_FLAG",   $BMP_WRITES_FLAG,   "e" );
ToFile( "BUILD_SOSL_RELEASE", $BUILD_SOSL_RELEASE, "e" );
ToFile( "MK_UNROLL",         $MK_UNROLL,         "e" );
ToFile( "MULTITHREAD_OBJ",   $MULTITHREAD_OBJ,   "e" );
ToFile( "NO_REC_RES",        $NO_REC_RES,        "e" );
ToFile( "PROEXT",            $PROEXT,            "e" );
ToFile( "SO3",               $SO3,               "e" );
ToFile( "SOLAR_PLUGIN",      $SOLAR_PLUGIN,      "e" );
ToFile( "TF_PACKAGES",       $TF_PACKAGES,       "e" );
ToFile( "TF_FILEURL",        $TF_FILEURL,        "e" );
ToFile( "TF_CFGDATA",        $TF_CFGDATA,        "e" );
ToFile( "TF_SVDATA",         $TF_SVDATA,         "e" );
ToFile( "TF_SDBAPI",         $TF_SDBAPI,         "e" );
ToFile( "TF_UCB",            $TF_UCB,            "e" );
ToFile( "UPDATER",           $UPDATER,           "e" );
ToFile( "build_deliver",     $BUILD_DELIVER,     "e" );
ToFile( "USE_NEWCHARSET",    $USE_NEWCHARSET,    "e" );
ToFile( "USE_NEW_RSC",       $USE_NEW_RSC,       "e" );
ToFile( "VCL",               $VCL,               "e" );
ToFile( "USE_NAMESPACE",     $USE_NAMESPACE,     "e" );
ToFile( "ENABLEUNICODE",     $ENABLEUNICODE,     "e" );
ToFile( "NEW_JAR_PACK",      $NEW_JAR_PACK,      "e" );
ToFile( "NO_BSYMBOLIC",      $NO_BSYMBOLIC,      "e" );
ToFile( "TF_FILTER",         "TRUE",             "e" );
if ($ENABLE_DEBUG eq "TRUE") {
ToFile( "debug",             "true",             "e" );
}
ToFile( "ENABLE_STATIC_GTK", $ENABLE_STATIC_GTK, "e" );
ToFile( "PSPRINT",           "TRUE",             "e" );
# [ed] 5/14/02 If we're building Aqua graphics, insert a C macro to indicate this.
# There may be a better way to do this, like splitting unxmacxp into two, but
# hopefully this hack will work for now...

if ($platform eq "$Macosx")
{
    my $macosxCdefs="";
    
    if( ! -e "/usr/bin/osascript" ) {
        # no command line applescript.  Chances are we're on a Darwin system
        
        ToFile( "BUILD_OS_DARWIN", "TRUE", "e");

        $macosxCdefs.=" -DBUILD_OS_DARWIN";
        open DARVER, "/usr/bin/uname -v |";
        my $s=<DARVER>;
        chomp $s;
        if ( $s =~ /(\d+?)\.(\d+?)(.*?)/)
        {
            ToFile("BUILD_OS_MAJOR", $1, "e");
            $macosxCdefs.=" -DBUILD_OS_MAJOR=" . $1;

            ToFile("BUILD_OS_MINOR", $2, "e");
            $macosxCdefs.=" -DBUILD_OS_MINOR=" . $2;
            
            $s=$3;
            if ( $s =~ /(\d+?)/) {
                ToFile("BUILD_OS_REV", $1, "e");
                $macosxCdefs.=" -DBUILD_OS_REV=" . $1;
            } else {
                ToFile("BUILD_OS_REV", "0", "e");
                $macosxCdefs.=" -DBUILD_OS_REV=0";
            }
        }
        close DARVER;
    }
    else
    {
        $macosxCdefs.=" -DBUILD_OS_APPLEOSX";
        ToFile("BUILD_OS_APPLEOSX", "TRUE", "e");
        
        my $majorScript = <<EOF;
on Num32ToHex(num)
	if num < 0 then
		set num to (2 ^ 32) + num
	end if
	set out to ""
	repeat with idx from 7 to 0 by -1
		set bas to (16 ^ idx) as integer
		if num >= bas then
			set mult to ((num - (num mod bas)) / bas) as integer
			set out to out & character mult of "123456789ABCDEF"
			set num to (num - bas * mult)
		else
			set out to out & "0"
		end if
	end repeat
	return out
end Num32ToHex

tell application "Finder"
	system attribute "sysv"
end tell

Num32ToHex(result)
return (text 5 through 6 of result)
EOF
        open BLECH, ">/tmp/os$$";
        print BLECH $majorScript;
        close BLECH;
        
        open OSXMAJ, "/usr/bin/osascript </tmp/os$$|";
        
        my $tmp=<OSXMAJ>;
        chomp $tmp;
        $macosxCdefs.=" -DBUILD_OS_MAJOR=" . $tmp;
        ToFile("BUILD_OS_MAJOR", $tmp, "e");
        close OSXMAJ;
        unlink "/tmp/os$$";
        
        my $minorScript = <<EOF;
on Num32ToHex(num)
	if num < 0 then
		set num to (2 ^ 32) + num
	end if
	set out to ""
	repeat with idx from 7 to 0 by -1
		set bas to (16 ^ idx) as integer
		if num >= bas then
			set mult to ((num - (num mod bas)) / bas) as integer
			set out to out & character mult of "123456789ABCDEF"
			set num to (num - bas * mult)
		else
			set out to out & "0"
		end if
	end repeat
	return out
end Num32ToHex

tell application "Finder"
	system attribute "sysv"
end tell

Num32ToHex(result)
return (text 7 through 7 of result)
EOF
        
        open BLECH, ">/tmp/os$$";
        print BLECH $minorScript;
        close BLECH;
        
        open OSXMIN, "/usr/bin/osascript </tmp/os$$|";
        $tmp=<OSXMIN>;
        chomp $tmp;
        $macosxCdefs.=" -DBUILD_OS_MINOR=" . $tmp;
        ToFile("BUILD_OS_MINOR", $tmp, "e");
        close OSXMIN;
        unlink "/tmp/os$$";
        
        my $revScript = <<EOF;
on Num32ToHex(num)
	if num < 0 then
		set num to (2 ^ 32) + num
	end if
	set out to ""
	repeat with idx from 7 to 0 by -1
		set bas to (16 ^ idx) as integer
		if num >= bas then
			set mult to ((num - (num mod bas)) / bas) as integer
			set out to out & character mult of "123456789ABCDEF"
			set num to (num - bas * mult)
		else
			set out to out & "0"
		end if
	end repeat
	return out
end Num32ToHex

tell application "Finder"
	system attribute "sysv"
end tell

Num32ToHex(result)
return (text 8 through 8 of result)
EOF
        open BLECH, ">/tmp/os$$";
        print BLECH $revScript;
        close BLECH;
                
        open OSXREV, "/usr/bin/osascript </tmp/os$$|";
        $tmp=<OSXREV>;
        chomp $tmp;
        $macosxCdefs.=" -DBUILD_OS_REV=" . $tmp;
        ToFile("BUILD_OS_REV", $tmp, "e");
        close OSXREV;
        unlink "/tmp/os$$";
    }
    
    if ( $GUIBASE eq "aqua" ) {
        $macosxCdefs.=" -DQUARTZ";
    }
    
    ToFile( "ENVCDEFS", $macosxCdefs, "e");
}

ToFile( "MKDEPENDSOLVER",    "TRUE",             "e" );
#
# Writing the platform dependent constant values to file.
# (c = comment, e = environment variable, a = alias )
ToFile( "Platform dependent constant values.", $empty, "c" );
ToFile( "SOLAR_JAVA",        $SOLAR_JAVA,        "e" );
ToFile( "BIG_SVX",           $BIG_SVX,           "e" );
ToFile( "COM",               $COM,               "e" );
ToFile( "COMPATH",           $COMPATH,           "e" );
ToFile( "CPU",               $CPU,               "e" );
ToFile( "CPUNAME",           $CPUNAME,           "e" );
ToFile( "CVER",              $CVER,              "e" );
ToFile( "DLLSUFFIX",         $DLLSUFFIX,         "e" );
ToFile( "GUI",               $GUI,               "e" );
ToFile( "GLIBC",             $GLIBC,             "e" );
ToFile( "GUIBASE",           $GUIBASE,           "e" );
ToFile( "GUIENV",            $GUIENV,            "e" );
ToFile( "GVER",              $GVER,              "e" );
ToFile( "OS",                $OS,                "e" );
ToFile( "EXCEPTIONS",        $EXCEPTIONS,        "e" );
ToFile( "OSVERSION",         $OSVERSION,         "e" );
ToFile( "PTHREAD_CFLAGS",    "@PTHREAD_CFLAGS@", "e" );
ToFile( "PTHREAD_LIBS",      "@PTHREAD_LIBS@",   "e" );
ToFile( "OUTPATH",           $OUTPATH,           "e" );
ToFile( "INPATH",            $INPATH,            "e" );
ToFile( "GVERDIR",           $GVERDIR,           "e" );
ToFile( "PATH_SEPERATOR",    $PATH_SEPERATOR,    "e" );
ToFile( "XPVERSION",         $XPVERSION,         "e" );
ToFile( "COMEX",             $COMEX,             "e" );
ToFile( "PROSWITCH",         $PROSWITCH,         "e" );
ToFile( "BOTH",              $BOTH,              "e" );
ToFile( "CDPATHx",           $CDPATHx,           "e" );
ToFile( "DEMO_ENV",          $DEMO_ENV,          "e" );
ToFile( "DYNAMIC_CRT",       $DYNAMIC_CRT,       "e" );
ToFile( "SET_EXCEPTIONS",    $SET_EXCEPTIONS,    "e" );
ToFile( "emergency",         $emergency,         "e" );
ToFile( "use_shl_versions",  $use_shl_versions,  "e" );
ToFile( "WRAPCMD",           $WRAPCMD,           "e" );
#
# Writing the variables to file.
# (c = comment, e = environment variable, a = alias, n = newline )
ToFile( "Variable values.",  $empty,             "c" );
if ( $platform eq "$Winnt" )
{  ToFile( "CYGWIN_PATH",       $CYGWIN_PATH,       "e" );
   ToFile( "PSDK_HOME",         $PSDK_HOME,         "e" );
   ToFile( "USE_NEW_SDK",       $USE_NEW_SDK,       "e" );
   ToFile( "NO_HIDS",           $NO_HIDS,           "e" );
}
ToFile( "PERL",              $PERL,              "e" );
ToFile( "GNUMAKE",           "@GNUMAKE@",        "e" );
ToFile( "UPD",               $UPD,               "e" );
ToFile( "SOLARUPD",          $SOLARUPD,          "e" );
ToFile( "WORK_STAMP",        $WORK_STAMP,        "e" );
ToFile( "TF_ONE51",          $TF_ONE51,          "e" );
ToFile( "TF_SVDATA",         $TF_SVDATA,         "e" );
ToFile( "TF_CFGDATA",        $TF_CFGDATA,        "e" );
ToFile( "TF_FILEURL",        $TF_FILEURL,        "e" );
ToFile( "URD_ONLY",          $URD_ONLY,          "e" );
ToFile( "SOLARROOT",         $SOLARROOT,         "e" );
ToFile( "RSCRES",            $RSCRES,            "e" );
ToFile( "SOLARVER",          $SOLARVER,          "e" );
ToFile( "SOLARVERSION",      $SOLARVERSION,      "e" );
ToFile( "SOLARENV",          $SOLARENV,          "e" );
ToFile( "SOLARENVINC",       $SOLARENVINC,       "e" );
ToFile( "LOCALINI",          $LOCALINI,          "e" );
ToFile( "STAR_INIROOT",      $STAR_INIROOT,      "e" );
ToFile( "STAR_INIROOTOLD",   $STAR_INIROOTOLD,   "e" );
ToFile( "STAR_STANDLST",     $STAR_STANDLST,     "e" );
ToFile( "STAR_SSCOMMON",     $STAR_SSCOMMON,     "e" );
ToFile( "STAR_SSOLARINI",    $STAR_SSOLARINI,    "e" );
ToFile( "STAR_RESOURCEPATH", $STAR_RESOURCEPATH, "e" );
ToFile( "STAR_REGISTRY",     $STAR_REGISTRY,     "e" );
ToFile( "DMAKEROOT",         $DMAKEROOT,         "e" );
ToFile( "CLASSPATH",         $CLASSPATH,         "e" );
ToFile( "XCLASSPATH",        $XCLASSPATH,        "e" );
if ( $platform eq "$Macosx" )
{  ToFile( "DYLD_LIBRARY_PATH", $LD_LIBRARY_PATH,   "e" );
}
else {
  if ( $platform eq "$Irix" || $platform eq "$Irix64" ) { 
    ToFile( "LD_LIBRARYN32_PATH",   $LD_LIBRARY_PATH,   "e" );
  }
  else {
    ToFile( "LD_LIBRARY_PATH",   $LD_LIBRARY_PATH,   "e" );
  }
}
ToFile( "SOLARDEF",          $SOLARDEF,          "e" );
ToFile( "SCPDEFS",           '@SCPDEFS@',        "e" );
ToFile( "SOLAREXTRAINC",     $SOLAREXTRAINC,     "e" );
ToFile( "SOLAREXTRALIB",     $SOLAREXTRALIB,     "e" );
ToFile( "PATH",              $PATH,              "e" );
ToFile( "PATHEXTRA",         $PATHEXTRA,         "e" );
ToFile( "SOLARLIB",          $SOLARLIB,          "e" );
ToFile( "SOLARINC",          $SOLARINC,          "e" );
ToFile( "COMP_ENV",          $COMP_ENV,          "e" );
ToFile( "JAVAHOME",          $JAVAHOME,          "e" );
ToFile( "CC",                $CC,                "e" );
ToFile( "CXX",               $CXX,               "e" );
if ( $COM ne "MSC" ) {
  ToFile( "LINK",			 $CC,				 "e" );
}
ToFile( "ENABLE_SYMBOLS",    "@ENABLE_SYMBOLS@",    "e" );
ToFile( "ENABLE_CRASHDUMP",  "@ENABLE_CRASHDUMP@",  "e" );
ToFile( "ENABLE_CUPS",       "@ENABLE_CUPS@",       "e" );
ToFile( "ENABLE_FONTCONFIG", "@ENABLE_FONTCONFIG@", "e" );
ToFile( "ENABLE_DIRECTX",    "@ENABLE_DIRECTX@",    "e" );
ToFile( "VC_STANDARD",       "@VC_STANDARD@",      "e" );
ToFile( "WITH_GPC",          "@WITH_GPC@",         "e" );
ToFile( "WITH_LIBART",       "@WITH_LIBART@",      "e" );
ToFile( "LIBART_CFLAGS",     "@LIBART_CFLAGS@",    "e" );
ToFile( "LIBART_LIBS",       "@LIBART_LIBS@",      "e" );
ToFile( "WITH_LIBSN",        "@WITH_LIBSN@",       "e" );
ToFile( "LIBSN_CFLAGS",      "@LIBSN_CFLAGS@",     "e" );
ToFile( "LIBSN_LIBS",        "@LIBSN_LIBS@",       "e" );
ToFile( "WITH_MOZILLA",      "@WITH_MOZILLA@",     "e" );
ToFile( "WITH_FONTS",        "@WITH_FONTS@",       "e" );
if ( '@ENABLE_RPATH@' eq "no" ) {
  ToFile( "LINKFLAGSRUNPATH",'',                   "e" );
}
ToFile( "SYSTEM_ZLIB",       "@SYSTEM_ZLIB@",      "e" );
ToFile( "BUILD_DMAKE",       "@BUILD_DMAKE@",      "e" );
ToFile( "GXX_INCLUDE_PATH",  "@GXX_INCLUDE_PATH@", "e" );
ToFile( "COMMON_BUILD_TOOLS",$COMMON_BUILD_TOOLS,  "e" );
if ($platform ne "$Winnt")
{  ToFile( "TEMP",              $TEMP,              "e" );
   ToFile( "TMP",               $TEMP,              "e" );
}
ToFile( "SOLARSRC",           $SOLARSRC,           "e" );
if ( $platform eq "$Winnt" )
{
   # these variables marked with "j" are used with cygwin only
   ToFile( "ILIB",              $ILIB,              "j" );
   
   ToFile( "GREP",              $WIN_GREP,          "e" );
   ToFile( "FIND",              $WIN_FIND,          "e" );
   ToFile( "LS",                $WIN_LS,            "e" );
   ToFile( "GNUCOPY",           $WIN_GNUCOPY,       "e" );
   ToFile( "TOUCH",             $WIN_TOUCH,         "e" );
}
elsif ($platform eq "$Macosx" )
{  ToFile( "LIB",               $MAC_LIB,           "e" );
}
if (( $platform eq "$Winnt" ) and ( '@USE_SHELL@' eq "4nt" )) {
  my ($tempstring);
  $tempstring="perl ".WinFormat(${SOLARENV}.${BIN}.${ds}."deliver.pl");
  if ( $perl_os =~ /cygwin/ ) { $tempstring =~ s#\\#\\\\#g; }
  ToFile( "set DELIVER=$tempstring", $empty, "x" );
  $tempstring="perl ".WinFormat(${SOLARENV}.${BIN}.${ds}."mkout.pl");
  if ( $perl_os =~ /cygwin/ ) { $tempstring =~ s#\\#\\\\#g; }
  ToFile( "set MKOUT=$tempstring", $empty, "x" );
  $tempstring="perl ".WinFormat(${SOLARENV}.${BIN}.${ds}."zipdep.pl");
  if ( $perl_os =~ /cygwin/ ) { $tempstring =~ s#\\#\\\\#g; }
  ToFile( "set ZIPDEP=$tempstring", $empty, "x" );

  ToFile( "HOME",              "   ",          "e" );
} else {
  ToFile( "DELIVER",           "deliver.pl",       "e" );
  ToFile( "MKOUT",             "mkout.pl",         "e" );
  ToFile( "ZIPDEP",            "zipdep.pl",         "e" );
  ToFile( "GCCINSTLIB",        "gccinstlib.pl",    "e" );
}
ToFile( "USE_SHELL",         '@USE_SHELL@',         "e" );
if ( $platform eq "$Winnt" ) {
  ToFile( "PYTHONPATH",        $PYTHONPATH,        "j" );
  ToFile( "PYTHONHOME",        $PYTHONHOME,        "j" );
} else {
  ToFile( "PYTHONPATH",        $PYTHONPATH,        "e" );
  ToFile( "PYTHONHOME",        $PYTHONHOME,        "e" );
}
#
# Writing the aliases to file.
# (c = comment, e = environment variable, a = alias )
ToFile( "Aliases.",          $empty,             "c" );
ToFile( "alias mkout",       $mkout,             "a" );
ToFile( "alias deliver",     $deliver,           "a" );
ToFile( "alias build",       $build,             "a" );
ToFile( "alias zipdep",      $zipdep,            "a" );
if ( $platform ne "$Winnt" )
{  ToFile( "alias nmake",       $nmake,             "a" );
}
# write make command for dmake for windows
# (x = write as is)

if ( $platform eq "$Winnt" and '@USE_SHELL@' eq "4nt" )
{
  ToFile( "build the dmake executable.", $empty, "c");
  ToFile( "if not exist \%SOLARENV\\\%OUTPATH\\bin\\dmake.exe (cd \%SRC_ROOT\\dmake \^ call make.bat win95-vpp40 \^ cd \%SRC_ROOT)", $empty, "x");
  ToFile( "if not exist \%SOLARENV\\\%OUTPATH\\bin\\dmake.exe ( mkdir /S \%SOLARENV\\\%OUTPATH\\bin \^ copy dmake\\dmake.exe \%SOLARENV\\\%OUTPATH\\bin\\dmake.exe )", $empty, "x");
  ToFile( "  ", $empty, "x");
}
# on Solaris and FreeBSD, set GNUCOPY and GNUPATCH
if ($platform eq "$Solaris" or $platform eq "$FreeBSD")
{
  ToFile( "GNUPATCH",   "@GNUPATCH@",	"e");
  ToFile( "GNUCOPY",	"@GNUCP@",	"e");
}
#
# Writing unset variables you might not need to file.
# 
print OUT $unsetvars;
if(defined($outfile_sh))
{  print OUT_SH "export $exportvars $newline";
   print OUT_SH "unset $unsetvarssh $newline";
}
if(defined($outfile_bat))
{  print OUT_BAT $unsetvarsbat;
}

#
#---------------------------
# VIII. Closing output file.
#---------------------------
#
close( OUT ) || print "Can't close $outfile: $!";
if( defined($outfile_sh))
{  close( OUT_SH ) || print "Can't close $outfile_sh: $!";
}
if( defined($outfile_bat))
{  close( OUT_BAT ) || print "Can't close $outfile_bat: $!";
}
#
#------------------------------
# IX. Sourcing the output file.
#------------------------------
#
#---------------------------------
# X. Set up the build environment.
#---------------------------------
# 
# Check whether the build environment is set up.
# If not, ask the user to create it.
#
$buildenv = CheckBuildEnv( $SRC_ROOT );
if ( !$buildenv ) 
{  print "Your systems build environment is not properly set up.\n";
   print "You want to create it now? (y/n): ";
   $answer = <STDIN>;
   chomp( $answer );
   if ( $answer eq "Y" || $answer eq "y" ) 
   {  print "Creating the build environment... ";
      CreateBuildEnv( $SRC_ROOT );
      print "done\n";
   }
   else 
   {  print "You need to create the build environment before you ";
      print "start building OpenOffice.org $UPD.\n";
      AddWarning( "set_soenv", 
                  "No build environment set-up. Create before building OpenOffice.org" );
   }
}
else 
{  print "Build environment is properly set up.\n";
}
#
#--------------------------------------------------------
# XI. Moving the output file to the build home directory.
#--------------------------------------------------------
#
$tmp = $SRC_ROOT.$ds.$outfile;
if (rename( $outfile, $tmp ) ne 1)
{  `mv -f $outfile $tmp`;
}
if(defined($outfile_sh))
{
    $tmp = $SRC_ROOT.$ds.$outfile_sh;
    if (rename( $outfile_sh, $tmp ) ne 1)
    {  `mv -f $outfile_sh $tmp`;
    }
}
if(defined($outfile_bat))
{
    $tmp = $SRC_ROOT.$ds.$outfile_bat;
    if (rename( $outfile_bat, $tmp ) ne 1)
    {  `mv -f $outfile_bat $tmp`;
    }
}

#
#--------------------------------------------------------
# XII. Message at the end.
#--------------------------------------------------------
#
#
print "*********************************************************".
      "******************* $newline"."*"."$newline";
print "* OpenOffice.org $UPD configuration. $newline";
for ( $tmp = 0; $tmp < 2; $tmp++ ) 
{  print "* $newline";
}
print "* Configuration part of OpenOffice.org $UPD build is finished. $newline* $newline";
print "* NB! Be aware that you might not be able to build OpenOffice.org if you $newline".
      "* ignore any warning message that were generated during this configuration $newline".
      "* process. $newline* $newline" .
      "* Any interactive values you have given have not been version checked. $newline* $newline"; 

if ( $Warning ne "" ) 
{  print "$Warning*"; 
   print "$newline";
}

print "$newline* USAGE: $newline";
print "* Source $outfile (in tcsh)";
print " or $outfile.sh (in sh)" if defined($outfile_sh);
print "$newline";
print "* in order to set up the build-environment variables.$newline";
for ( $tmp = 0; $tmp < 2; $tmp++ ) 
{  print "* $newline";
}
print "*********************************************************".
      "******************* $newline";

$bootfile = "bootstrap";
open( OUT, ">$bootfile" ) ||
die "Cannot open $bootfile: $!\n";
if ( "@USE_SHELL@" eq "4nt" )
{  $SHELL="tcsh";
}
print OUT "#!$SHELL -f\n";
close( OUT ) || print "Can't close $bootfile: $!";
open( OUT, ">>$bootfile" ) ||
   die "Cannot open $bootfile: $!\n";
print OUT "source $SRC_ROOT/$outfile\n"; 
close( OUT ) || print "Can't close $bootfile: $!";
system(`cat bootstrap.1 >> bootstrap`);
system(`cat bootstrap.2 >> bootstrap`);
system(`chmod +x bootstrap`);
#
#--------------------------------------------------------
# Moving the bootstrap file to the build home directory.
#--------------------------------------------------------
#
$tmp = $SRC_ROOT.$ds.$bootfile;
if (rename( $bootfile, $tmp ) ne 1)
{  `mv -f $bootfile $tmp`;
}

print "Configure completed\n";
if ($platform ne "$Winnt") {
	print "You may now run $tmp in $SRC_ROOT\n";
}
if ( $Warning ne "" ) {
	print "***** WARNINGS ISSUED *****";
}

#
#-----------------
# XII. Functions.
#-----------------
#
#-------------------------------------------------------------
# Function name: CheckPathName 
# Description:   chops off the '/' character if it's the last
#                character in a pathname. also adds the '/'
#                character if it's not the first character
#                in a path.
# Arguments:     1. Path (string)
# Return value:  Path (string)
#-------------------------------------------------------------
sub CheckPathName 
{  my $retrn = $_[ 0 ];
   if (($platform ne "$Winnt") or ( '@USE_SHELL@' ne "4nt" ))
   {  # Check if the first character is not a '/'.
      if ( !( $_[ 0 ] =~ /^\// ) ) 
      {  $retrn = $ds.$_[ 0 ];
      }
   }
   # kill the last '/','\','\n' if they exists.
   $retrn =~ s![\s/\\]+$!!;
   # Done!
   return( $retrn );
}
#-------------------------------------------------------------
# Function name: CheckPathExist 
# Description:   Checks whether the directory that is given
#                as an argument exists. If not it asks the     
#                the user to make it. 
# Arguments:     1. Path (string)
# Return value:  void
#-------------------------------------------------------------
sub CheckPathExist 
{  my $dir = $_[ 0 ];
   if ( !( -d $dir ) and $platform ne "$Winnt") 
   {  printf "The directory $_[ 0 ] does not exist. Want to create it (y/n)?: ";
      my $answer = <STDIN>; 
      chomp( $answer );
      if ( $answer eq "y" || $answer eq "Y" ) 
      {  mkdir( $_[ 0 ], 0777 ) || 
            print ( "Cannot make directory $_[ 0 ]: $!" );
            AddWarning( "set_soenv",
                        "Directory $_[ 0 ] does not exist on your system." );
      }
      else 
      {  AddWarning( "set_soenv",
                     "Directory $_[ 0 ] does not exist on your system." );
      }
      return "false";
   }
   else
   {   # Don't check under "$Winnt". The path is possibly posix and you could use a native NT perl!  
	   return "true";
   }
}
#------------------------------------------------------------
# Function name: CreateFileHeader 
# Description:   Creates a header for the outfile.
# Arguments:     1. File to write to
#                2. UPD (string)
#                3. Platform (string)
#                4. name of shell for this file
#                5. comment to use for this file
# Return value:  void
#------------------------------------------------------------
sub CreateFileHeader 
{  my $timestamp = `date`;
   chomp( $timestamp );
   my $filehandle = $_[0];
   my $comment = $_[4];
   print { $filehandle } "$comment #################################################################"; 
   print { $filehandle } $newline;
   print { $filehandle } "$comment OpenOffice.org $_[ 1 ] build environment file for: $_[ 2 ]. $newline"; 
   print { $filehandle } "$comment Generated on: $timestamp $newline"; 
   print { $filehandle } "$comment Source this file to set up the build environment. $newline"; 
   print { $filehandle } "$comment 1. exec $_[3] $newline"; 
   print { $filehandle } "$comment 2. source $outfile $newline"; 
   print { $filehandle } "$comment #################################################################"; 
   print { $filehandle } $newline;
}
#---------------------------------------------------------
# Function name: ToFile 
# Description:   Writes the environment variable in the
#                output file. 
# Arguments:     1. Name of environment variable (string)
#                2. Value of environment variable (string)
#                3. e - env. var, a - alias, c - comment
#                   j - env. var in DOS style (WINNT only)
# Return value:  void
#---------------------------------------------------------
sub ToFile 
{  if ( $_[ 2 ] eq "e" ) 
   {  # Write an environment variable to file.
      if (defined $_[ 1 ])
      {  printf("%-12s %-17s %-10s %s\n", "The variable", $_[ 0 ], "is set to:", $_[ 1 ]) ; # to stdout
         print OUT "$setenv $_[ 0 ] \"$_[ 1 ]\"$newline";  # to tcsh file
         if(defined($outfile_sh))
         {  print OUT_SH "$_[ 0 ]=\"$_[ 1 ]\"$newline";    # to sh file
            $exportvars .= " $_[ 0 ]";                     # add to export list for sh file
         }
         if(defined($outfile_bat))
         {   $win_format_var = WinFormat( $_[ 1 ] );  #Filter for Windows
             print OUT_BAT "IF DEFINED $_[ 0 ] $unset $_[ 0 ] $newline";
             print OUT_BAT "$set $_[ 0 ]=$win_format_var $newline";
         }
      }
      else
      {  printf("%-12s %-17s %-10s %s\n", "The variable", $_[ 0 ], "is set to:", "unset") ; # to stdout
         $unsetvars .= "$unsetenv $_[ 0 ] >& /dev/null$newline"; # for tcsh file
         $unsetvarssh .= " $_[ 0 ]";                             # for sh file
         if(defined($outfile_bat))
         {  $unsetvarsbat .= "$unset $_[ 0 ] >& NUL$newline";
         }
      }
   }
   elsif ( $_[ 2 ] eq "a" ) 
   {  # Write an alias to file.
      print "The $_[ 0 ] is set to: $_[ 1 ]\n";     # to stdout
      print OUT "$_[ 0 ] $_[ 1 ] $newline";         # to tcsh file
      print OUT_SH "$_[ 0 ]=$_[ 1 ] $newline" if defined($outfile_sh); # to sh file
      if(defined($outfile_bat)) # create the correct 4nt alias format
      {  my $aliastmp = $_[ 1 ];
         $aliastmp =~ s/\$/\%/g;
         $aliastmp =~ s!/!\\!g;
         $aliastmp =~ s!"!!g;
         print OUT_BAT "$_[ 0 ]=".'`'.$aliastmp.'`'.$newline;
      }
   }
   elsif ( $_[ 2 ] eq "c" ) 
   {  # Write a comment to file.
      print "$newline";
      print "$comment $newline";
      print "$comment $_[ 0 ] $newline"; 
      print "$comment $newline";     
      print OUT "$newline";
      print OUT "$comment $newline";
      print OUT "$comment $_[ 0 ] $newline"; 
      print OUT "$comment $newline";     
      if(defined($outfile_sh))
      {
          print OUT_SH "$newline";
          print OUT_SH "$comment $newline";
          print OUT_SH "$comment $_[ 0 ] $newline"; 
          print OUT_SH "$comment $newline";     
      }
      if(defined($outfile_bat))
      {
          print OUT_BAT "$newline";
          print OUT_BAT "$comment4nt $newline";
          print OUT_BAT "$comment4nt $_[ 0 ] $newline"; 
          print OUT_BAT "$comment4nt $newline";     
      }
   }
   elsif ( $_[ 2 ] eq "n" ) 
   {  #Write a newline to a file
      print OUT "$newline";
      print OUT_SH "$newline" if defined($outfile_sh);
      print OUT_BAT "$newline" if defined($outfile_bat);
   }
   elsif ( $_[ 2 ] eq "x" )
   {
      #Write first argument as is, and nothing else
      #Only useful for 4nt
      print OUT_BAT "$_[ 0 ] $newline" if defined($outfile_bat);
   }
   elsif ( $_[ 2 ] eq "j" )
   {
      if ((defined $_[ 1 ]) and ( $platform eq "$Winnt" )) 
      {  printf("%-12s %-17s %-10s %-39s\n", "The variable", $_[ 0 ], "is set to:", $_[ 1 ]) ; # to stdout
         $win_format_var = WinFormat( $_[ 1 ] );  #Filter for Windows
         $win_format_var =~ s/\\/\\\\/g;
         print OUT "$setenv $_[ 0 ] \"$win_format_var\" $newline";
         if(defined($outfile_sh))
         {  # bash needs one layer of escaping more
            $win_format_var =~ s/\\\\/\\\\\\\\/g;
            print OUT_SH "$_[ 0 ]=\"$win_format_var\"$newline";    # to sh file
            $exportvars .= " $_[ 0 ]";                     # add to export list for sh file
         }
         if (defined($outfile_bat))
         {
             $win_format_var = WinFormat( $_[ 1 ] );  #Filter for Windows
             print OUT_BAT "IF DEFINED $_[ 0 ] $unset $_[ 0 ] $newline";
             print OUT_BAT "$set $_[ 0 ]=$win_format_var $newline";
         }
      }
      else
      {
          print "Type \"j\" only intended for Windows! $newline"; 
          print "use \"e\" to set and unset variables. $newline"; 
      }
   }
   else 
   {  print "Unknown type! $newline"; 
   }
}
#----------------------------------------------------------
# Function name: PosixFormat
# Description:   Format variables to Posix Style Format. Should only be used 
#                with DOS-style path variables
# Arguments:     1. Variable (string)
# Return value:  Reformatted String
#----------------------------------------------------------
sub PosixFormat
{  my ( $variable, $d1, $d2 );
   $variable = $_[ 0 ];
   # ToDo: Do the replacement only if "Winnt" and var contains "\" and ":"
   if ( $platform eq "$Winnt" )
   {   $variable =~ s/(\$\{?\w+\}?)/$1/eeg ;         # expand the variables
       $variable =~ s/(\$\{?\w+\}?)/$1/eeg ;         # expand the variables twice!
   	   if ( ( $variable =~ /\\/ ) and ( $variable =~ /:/ ) )
	   {   $variable =~ s{([c-z]):}{/cygdrive/$1}gi;
		   # Map drives to /cgydrive/drive
		   # We do this also for old cygwins, back
		   # replacement in winformat.
	   }
	   $variable =~ s!\\!/!g;
	   $variable =~ s/;/:/g;

	   # Search for posix path :path with space: and replace with short dos path
	   while ( $variable =~ /(?::|\A)[\'\"]?([^:]+ [^:]+)[\'\"]?(?::|\Z)/ ) {
		 $d1 = $1 ;
		 chomp( $d2 = qx{cygpath -d "$d1"} ) || die( "Path with space: $1 propably doesn't exist!" );
		 chomp( $d2 = qx{cygpath -u "$d2"} ) ;
		 $variable =~ s/$d1/$d2/ ;
	   }
   }
   return $variable;
}
#----------------------------------------------------------
# Function name: WinFormat 
# Description:   Format variables to Windows Format.
# Arguments:     1. Variable (string)
# Return value:  Reformatted String
#----------------------------------------------------------
sub WinFormat         
{  my ( $variable, $d1, $d1_prefix, $d1_fname, @split_var );  
   $variable = $_[ 0 ];
   $variable =~ s/^\s+//g ; #remove leading spaces
   $variable =~ s/\s+$//g ; #remove trailing spaces
   # Here should be NO "\"! If yes, PosixFormat() was forgotten before !
   if ( $variable =~ /\\/ )
   {
	   die("Error! Variable contains \"\\\" : $variable PosixFormat() missing?");
   }
   $variable =~ s/\$\{PATH\}/%PATH/g ;     # explicit replace ${PATH}
   $variable =~ s/(\$\{?\w+\}?)/$1/eeg ;   # expand the variables
   $variable =~ s/(\$\{?\w+\}?)/$1/eeg ;   # expand the variables twice!
   $variable =~ s/:+/:/g ;                 # remove multiple ;

   if ( $cygwinver eq "b" )
   {
	   $variable =~ s/:/;/g;                   # Change path-separator
	   $variable =~ s{//([c-z])/}{$1:\\}gi;    # drives from cgywin-b20 (just in case ...)
	   $variable =~ s{/cygdrive/([c-z])/}{$1:\\}gi;  # more drives for cgywin-b20
       $variable =~ s!([;]|\A|-[iIlL])/!$1$SYSTEMDRIVE/!g; # get back the hidden drives
	   $variable =~ s!/!\\!g;                        # Rest is windows stuff 
   }
   else  # New cygwin
   {
       $variable =~ s/:/;/g;
       # Search for posix path entry and replace with cygpath -w entry ( -d if filename contains space )
       if ( $variable =~ /^\s*-\w/ )
       {
           # Include paths
           @split_var = split(/\s+-/,$variable);
		   $split_var[0] =~ s/^-//; # split deletes the "-" from all but the first element
           foreach $d1 ( @split_var )
           {
			   $d1 = "-".$d1;
               if ( $d1 =~ /^(-\w)[\'\"]?((?:\/[\w\.~ ]+)+)[\'\"]?/ )
			   # This regex: option -> $1, filename without quotes -> $2
               {
                   $d1_prefix = $1;
				   $d1_fname = $2;
				   if ( $d1_fname =~ / / )
				   {
					   chomp( $d1_fname = qx{cygpath -d "$d1_fname"} ); # Use DOS 8.3 style to avoid quoting
				   }                                        # ! This fails when $d1 doesn't exist!
				   else
				   {
					   chomp( $d1_fname = qx{cygpath -w "$d1_fname"} ); # Use "normal" filenames
				   }
                   $d1 = $d1_prefix.$d1_fname;
               }
			   else
			   {   # relative paths here
				   # Do nothing.
			   }
           }
           $variable = join(' ',@split_var);
       }
       elsif ( $variable eq ";" ) {}
       else
       {
           # Normal paths
           @split_var = split(/;/,$variable);
           foreach $d1 ( @split_var )
           {
               if ( $d1 =~ /(?:^\/[\w\.~ ]+)+/ )
               {
				   if ( $d1 =~ / / )
				   {
					   chomp( $d1 = qx{cygpath -d "$d1"} ); # Use DOS 8.3 style to avoid quoting
				   }                                        # ! This fails when $d1 doesn't exist!
				   else
				   {
					   chomp( $d1 = qx{cygpath -w "$d1"} ); # Use "normal" filenames
				   }
               }
			   else
			   {   # relative paths here
				   # Do nothing.
			   }
           }
           $variable = join(';',@split_var);
       }
       $variable =~ s/\//\\/g; # Remaining \ come from e.g.: ../foo/baa
   }
   return $variable;
}
#----------------------------------------------------------
# Function name: CheckBuildEnv 
# Description:   Checks whether the build environment 
#                exists on the system.
# Arguments:     1. $SO_HOME: Build home directory (string)
# Return value:  0 - Failure
#                1 - Success
#----------------------------------------------------------
sub CheckBuildEnv 
{  my ( $src_root );
   $src_root  = $_[ 0 ];
   if ( !( -d $src_root ) and $platform ne "$Winnt") 
   {  return 0;
   }
   return 1;
}
#--------------------------------------------------------
# Function name: CreateBuildEnv 
# Description:   Creates the build environment. 
# Arguments:     1. $SO_HOME: Build home directory.
#                2. $UPD:     UPD.
# Return value:  void
#--------------------------------------------------------
sub CreateBuildEnv 
{  my ( $src_root );
   $src_root  = $_[ 0 ];
   # 1. Create the SRC_ROOT directory.
   mkdir( $src_root, 0777 ) || 
      print ( "Cannot create directory $src_root \n");
}

#--------------------------------------------------------
# Function name: GetCorrectPath
# Description:   Creates the build environment. 
# Arguments:     1.   existing / original path
#                2... pairs of <path, executable>
# Return value:  String - Correct Path
#--------------------------------------------------------
sub GetCorrectPath
{
	sub PathLookup
	{
	    my $cmd = shift;
	    while (@_) {
		my $elem = shift;
		
		-x "$elem/$cmd" && return $elem;
	    }
	    return '';
	}

	sub SaneGrep
	{
	    # Perl grep is unbelievably strange.
	    my $needle = shift;
	    while (@_) {
		my $haystack = shift;
		if ($needle eq $haystack) {
		    return 1;
		} 
	    }
	    return 0;
	}	

	sub CleanupPath
	{
	    my @elements = @_;
	    my @cleanName = ();

	    while (@elements) {
		my $elem = shift @elements;
		if (!SaneGrep ($elem, @cleanName)) {
			push @cleanName, $elem;
		}
	    }

	    return @cleanName;
	}

	my $oldPath = shift;
	my @originalPairs = @_;
	my @pairs = @originalPairs;
	my @Path = split /$ps/, $oldPath;

	while (@pairs) {
	    my $path = shift @pairs;
	    my $cmd = shift @pairs;
	    my $to_append = 1;
	    my $elem;

	    if (! -x "$path/$cmd") {
		AddWarning ("Missing executable $path/$cmd\n");
	    }

	    for $elem (@Path) {
		if ($elem eq $path) {
#		    print "Hit duplicate path in path; break\n";
		    $to_append = 0;
		    last;
		}
		if (-f "$elem/$cmd") {
#		    print "Element already in path ...\n";
		    unshift @Path, $path;
		    $to_append = 0;
		    last;
		} else {
#		    print "No file $elem/$cmd\n";
		}
	    }
	    if ($to_append) {
		push @Path, $path;
	    }
	}

	@pairs = @originalPairs;
	while (@pairs) {
	    my $path = shift @pairs;
	    my $cmd = shift @pairs;
	    my $realpath;

	    $realpath = PathLookup ($cmd, @Path);
	    if (!($realpath eq $path)) {
		AddWarning ("Path conflict for executables " .
                            "$path/$cmd against $realpath");
	    }
	}

	return join $ps, CleanupPath (@Path);
}

#------------------------------------------------------------
# Function name: AddWarning 
# Description:   Adds any kind of warning for the user.
#                The warning will be shown at the end
#                of this script.
# Arguments:     1. Add the configure warnings or the set_soenv
#                   warning (string).
#                2. Warning (string).
# Return value:  void
#------------------------------------------------------------
sub AddWarning 
{  if ( $_[ 0 ] eq "configure" ) 
   {  open( IN, $warnfile );
      while ( <IN> ) 
      {  $Warning = $Warning."* - ".$_;
      }
      close( IN );
      # Remove the temporary warning file.
      # unlink ( $warnfile );
   }
   elsif ( $_[ 0 ] eq "set_soenv" ) 
   {  my ( $arg1 );
      $arg1 = $_[ 1 ];
      chomp( $arg1 );                            # cut off new line      
      $Warning = $Warning."* - set_soenv: warning: $arg1 $newline";  # add the warning  
   }
}
#-------------------
# That's all folks!
#-------------------
